/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/login/api-key": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/login/api-secret": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>API secret 를 사용한 토큰 발급</p>
		 *
		 * @description <p>API secret 를 사용한 토큰 발급</p>
		 *     <p>API secret 를 통해 API 인증에 사용할 토큰을 가져옵니다.</p>
		 *
		 */
		post: operations["loginViaApiSecret"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/token/refresh": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>토큰 갱신</p>
		 *
		 * @description <p>토큰 갱신</p>
		 *     <p>리프레시 토큰을 사용해 유효기간이 연장된 새로운 토큰을 재발급합니다.</p>
		 *
		 */
		post: operations["refreshToken"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/merchant": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 플랫폼 정보를 조회합니다.
		 *     요청된 Authorization header 를 통해 자동으로 요청자의 고객사를 특정합니다.</p>
		 *      */
		get: operations["getPlatform"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/** @description <p>고객사의 플랫폼 관련 정보를 업데이트합니다.
		 *     요청된 Authorization header 를 통해 자동으로 요청자의 고객사를 특정합니다.</p>
		 *      */
		patch: operations["updatePlatform"];
		trace?: never;
	};
	"/platform/discount-share-policy-filter-options": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>할인 분담 정책 다건 조회 시 필요한 필터 옵션을 조회합니다.</p>
		 *      */
		get: operations["getPlatformDiscountSharePolicyFilterOptions"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/discount-share-policies": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>할인 분담 정책 다건 조회</p>
		 *
		 * @description <p>할인 분담 정책 다건 조회</p>
		 *     <p>여러 할인 분담을 조회합니다.</p>
		 *
		 */
		get: operations["getPlatformDiscountSharePolicies"];
		put?: never;
		/**
		 * <p>할인 분담 정책 생성</p>
		 *
		 * @description <p>할인 분담 정책 생성</p>
		 *     <p>새로운 할인 분담을 생성합니다.</p>
		 *
		 */
		post: operations["createPlatformDiscountSharePolicy"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/discount-share-policies/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>할인 분담 정책 조회</p>
		 *
		 * @description <p>할인 분담 정책 조회</p>
		 *     <p>주어진 아이디에 대응되는 할인 분담을 조회합니다.</p>
		 *
		 */
		get: operations["getPlatformDiscountSharePolicy"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * <p>할인 분담 정책 수정</p>
		 *
		 * @description <p>할인 분담 정책 수정</p>
		 *     <p>주어진 아이디에 대응되는 할인 분담을 업데이트합니다.</p>
		 *
		 */
		patch: operations["updatePlatformDiscountSharePolicy"];
		trace?: never;
	};
	"/platform/discount-share-policies/{id}/schedule": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>주어진 아이디에 대응되는 할인 분담의 예약 업데이트를 조회합니다.</p>
		 *      */
		get: operations["getPlatformDiscountSharePolicySchedule"];
		/** @description <p>주어진 아이디에 대응되는 할인 분담에 예약 업데이트를 재설정합니다.</p>
		 *      */
		put: operations["rescheduleDiscountSharePolicy"];
		/** @description <p>주어진 아이디에 대응되는 할인 분담에 업데이트를 예약합니다.</p>
		 *      */
		post: operations["scheduleDiscountSharePolicy"];
		/** @description <p>주어진 아이디에 대응되는 할인 분담의 예약 업데이트를 취소합니다.</p>
		 *      */
		delete: operations["cancelPlatformDiscountSharePolicySchedule"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/discount-share-policies/{id}/archive": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>할인 분담 정책 보관</p>
		 *
		 * @description <p>할인 분담 정책 보관</p>
		 *     <p>주어진 아이디에 대응되는 할인 분담을 보관합니다.</p>
		 *
		 */
		post: operations["archivePlatformDiscountSharePolicy"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/discount-share-policies/{id}/recover": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>할인 분담 정책 복원</p>
		 *
		 * @description <p>할인 분담 정책 복원</p>
		 *     <p>주어진 아이디에 대응되는 할인 분담을 복원합니다.</p>
		 *
		 */
		post: operations["recoverPlatformDiscountSharePolicy"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/additional-fee-policies": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>추가 수수료 정책 다건 조회</p>
		 *
		 * @description <p>추가 수수료 정책 다건 조회</p>
		 *     <p>여러 추가 수수료 정책을 조회합니다.</p>
		 *
		 */
		get: operations["getPlatformAdditionalFeePolicies"];
		put?: never;
		/**
		 * <p>추가 수수료 정책 생성</p>
		 *
		 * @description <p>추가 수수료 정책 생성</p>
		 *     <p>새로운 추가 수수료 정책을 생성합니다.</p>
		 *
		 */
		post: operations["createPlatformAdditionalFeePolicy"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/additional-fee-policies/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>추가 수수료 정책 조회</p>
		 *
		 * @description <p>추가 수수료 정책 조회</p>
		 *     <p>주어진 아이디에 대응되는 추가 수수료 정책을 조회합니다.</p>
		 *
		 */
		get: operations["getPlatformAdditionalFeePolicy"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * <p>추가 수수료 정책 수정</p>
		 *
		 * @description <p>추가 수수료 정책 수정</p>
		 *     <p>주어진 아이디에 대응되는 추가 수수료 정책을 업데이트합니다.</p>
		 *
		 */
		patch: operations["updatePlatformAdditionalFeePolicy"];
		trace?: never;
	};
	"/platform/additional-fee-policies/{id}/schedule": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>주어진 아이디에 대응되는 추가 수수료 정책의 예약 업데이트를 조회합니다.</p>
		 *      */
		get: operations["getPlatformAdditionalFeePolicySchedule"];
		put: operations["rescheduleAdditionalFeePolicy"];
		/** @description <p>주어진 아이디에 대응되는 추가 수수료 정책에 업데이트를 예약합니다.</p>
		 *      */
		post: operations["scheduleAdditionalFeePolicy"];
		/** @description <p>주어진 아이디에 대응되는 추가 수수료 정책의 예약 업데이트를 취소합니다.</p>
		 *      */
		delete: operations["cancelPlatformAdditionalFeePolicySchedule"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/additional-fee-policies/{id}/archive": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>추가 수수료 정책 보관</p>
		 *
		 * @description <p>추가 수수료 정책 보관</p>
		 *     <p>주어진 아이디에 대응되는 추가 수수료 정책을 보관합니다.</p>
		 *
		 */
		post: operations["archivePlatformAdditionalFeePolicy"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/additional-fee-policies/{id}/recover": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>추가 수수료 정책 복원</p>
		 *
		 * @description <p>추가 수수료 정책 복원</p>
		 *     <p>주어진 아이디에 대응되는 추가 수수료 정책을 복원합니다.</p>
		 *
		 */
		post: operations["recoverPlatformAdditionalFeePolicy"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partner-filter-options": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>파트너 다건 조회 시 필요한 필터 옵션을 조회합니다.</p>
		 *      */
		get: operations["getPlatformPartnerFilterOptions"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partners": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>파트너 다건 조회</p>
		 *
		 * @description <p>파트너 다건 조회</p>
		 *     <p>여러 파트너를 조회합니다.</p>
		 *
		 */
		get: operations["getPlatformPartners"];
		put?: never;
		/**
		 * <p>파트너 생성</p>
		 *
		 * @description <p>파트너 생성</p>
		 *     <p>새로운 파트너를 생성합니다.</p>
		 *
		 */
		post: operations["createPlatformPartner"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partner-dashboard": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partners/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>파트너 조회</p>
		 *
		 * @description <p>파트너 조회</p>
		 *     <p>파트너 객체를 조회합니다.</p>
		 *
		 */
		get: operations["getPlatformPartner"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * <p>파트너 수정</p>
		 *
		 * @description <p>파트너 수정</p>
		 *     <p>주어진 아이디에 대응되는 파트너 정보를 업데이트합니다.</p>
		 *
		 */
		patch: operations["updatePlatformPartner"];
		trace?: never;
	};
	"/platform/partners/batch": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>파트너 다건 생성</p>
		 *
		 * @description <p>파트너 다건 생성</p>
		 *     <p>새로운 파트너를 다건 생성합니다.</p>
		 *
		 */
		post: operations["createPlatformPartners"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partners/{id}/approve": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partners/{id}/reject": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partners/{id}/schedule": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>주어진 아이디에 대응되는 파트너의 예약 업데이트를 조회합니다.</p>
		 *      */
		get: operations["getPlatformPartnerSchedule"];
		/** @description <p>주어진 아이디에 대응되는 파트너에 예약 업데이트를 재설정합니다.</p>
		 *      */
		put: operations["reschedulePartner"];
		/** @description <p>주어진 아이디에 대응되는 파트너에 업데이트를 예약합니다.</p>
		 *      */
		post: operations["schedulePartner"];
		/** @description <p>주어진 아이디에 대응되는 파트너의 예약 업데이트를 취소합니다.</p>
		 *      */
		delete: operations["cancelPlatformPartnerSchedule"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partners/schedule": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["schedulePlatformPartners"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partners/{id}/archive": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>파트너 복원</p>
		 *
		 * @description <p>파트너 복원</p>
		 *     <p>주어진 아이디에 대응되는 파트너를 보관합니다.</p>
		 *
		 */
		post: operations["archivePlatformPartner"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partners/{id}/recover": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>파트너 복원</p>
		 *
		 * @description <p>파트너 복원</p>
		 *     <p>주어진 아이디에 대응되는 파트너를 복원합니다.</p>
		 *
		 */
		post: operations["recoverPlatformPartner"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/contracts": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>계약 다건 조회</p>
		 *
		 * @description <p>계약 다건 조회</p>
		 *     <p>여러 계약을 조회합니다.</p>
		 *
		 */
		get: operations["getPlatformContracts"];
		put?: never;
		/**
		 * <p>계약 생성</p>
		 *
		 * @description <p>계약 생성</p>
		 *     <p>새로운 계약을 생성합니다.</p>
		 *
		 */
		post: operations["createPlatformContract"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/contracts/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>계약 조회</p>
		 *
		 * @description <p>계약 조회</p>
		 *     <p>주어진 아이디에 대응되는 계약을 조회합니다.</p>
		 *
		 */
		get: operations["getPlatformContract"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * <p>계약 수정</p>
		 *
		 * @description <p>계약 수정</p>
		 *     <p>주어진 아이디에 대응되는 계약을 업데이트합니다.</p>
		 *
		 */
		patch: operations["updatePlatformContract"];
		trace?: never;
	};
	"/platform/contracts/{id}/schedule": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>주어진 아이디에 대응되는 계약의 예약 업데이트를 조회합니다.</p>
		 *      */
		get: operations["getPlatformContractSchedule"];
		/** @description <p>주어진 아이디에 대응되는 계약에 예약 업데이트를 재설정합니다.</p>
		 *      */
		put: operations["rescheduleContract"];
		/** @description <p>주어진 아이디에 대응되는 계약에 업데이트를 예약합니다.</p>
		 *      */
		post: operations["scheduleContract"];
		/** @description <p>주어진 아이디에 대응되는 계약의 예약 업데이트를 취소합니다.</p>
		 *      */
		delete: operations["cancelPlatformContractSchedule"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/contracts/{id}/archive": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>계약 보관</p>
		 *
		 * @description <p>계약 보관</p>
		 *     <p>주어진 아이디에 대응되는 계약을 보관합니다.</p>
		 *
		 */
		post: operations["archivePlatformContract"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/contracts/{id}/recover": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>계약 복원</p>
		 *
		 * @description <p>계약 복원</p>
		 *     <p>주어진 아이디에 대응되는 계약을 복원합니다.</p>
		 *
		 */
		post: operations["recoverPlatformContract"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/transfers/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>정산건 조회</p>
		 *
		 * @description <p>정산건 조회</p>
		 *     <p>정산건을 조회합니다.</p>
		 *
		 */
		get: operations["getPlatformTransfer"];
		put?: never;
		post?: never;
		/**
		 * <p>정산건 삭제</p>
		 *
		 * @description <p>정산건 삭제</p>
		 *     <p>scheduled, in_process 상태의 정산건만 삭제가능합니다.</p>
		 *
		 */
		delete: operations["deletePlatformTransfer"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/transfer-summaries": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>정산건 다건 조회</p>
		 *
		 * @description <p>정산건 다건 조회</p>
		 *     <p>성공 응답으로 조회된 정산건 요약 리스트와 페이지 정보가 반환됩니다.</p>
		 *
		 */
		get: operations["getPlatformTransferSummaries"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/transfers/order": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>주문 정산건 생성</p>
		 *
		 * @description <p>주문 정산건 생성</p>
		 *     <p>성공 응답으로 생성된 주문 정산건 객체가 반환됩니다.</p>
		 *
		 */
		post: operations["createPlatformOrderTransfer"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/transfers/order-cancel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>주문 취소 정산건 생성</p>
		 *
		 * @description <p>주문 취소 정산건 생성</p>
		 *     <p>성공 응답으로 생성된 주문 취소 정산건 객체가 반환됩니다.</p>
		 *
		 */
		post: operations["createPlatformOrderCancelTransfer"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/transfers/manual": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>수기 정산건 생성</p>
		 *
		 * @description <p>수기 정산건 생성</p>
		 *     <p>성공 응답으로 생성된 수기 정산건 객체가 반환됩니다.</p>
		 *
		 */
		post: operations["createPlatformManualTransfer"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/transfer-dashboard": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/transfer-filter-options": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/transfer-summaries/sheet-file": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>정산 상세 내역 다운로드</p>
		 *
		 * @description <p>정산 상세 내역 다운로드</p>
		 *     <p>정산 상세 내역을 csv 파일로 다운로드 합니다.</p>
		 *
		 */
		get: operations["downloadPlatformTransferSheet"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/payable-settlement-dates": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partner-settlements": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partner-settlements/settlement-dates": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partner-settlements/currencies": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partner-settlements/dashboard": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/partner-settlements/sheet-file": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/payouts/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/payouts": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/bulk-payouts/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/bulk-payouts": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/bulk-payouts/{bulkPayoutId}/partner-settlements": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/bank-accounts/{bank}/{accountNumber}/holder": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>예금주 조회</p>
		 *
		 * @description <p>예금주 조회</p>
		 *     <p>계좌의 예금주를 조회합니다.</p>
		 *
		 */
		get: operations["getPlatformAccountHolder"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/holidays/{year}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/identity-verifications/{identityVerificationId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>본인인증 단건 조회</p>
		 *
		 * @description <p>본인인증 단건 조회</p>
		 *     <p>주어진 아이디에 대응되는 본인인증 내역을 조회합니다.</p>
		 *
		 */
		get: operations["getIdentityVerification"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/identity-verifications/{identityVerificationId}/send": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>본인인증 요청 전송</p>
		 *
		 * @description <p>본인인증 요청 전송</p>
		 *     <p>SMS 또는 APP 방식을 이용하여 본인인증 요청을 전송합니다.</p>
		 *
		 */
		post: operations["sendIdentityVerification"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/identity-verifications/{identityVerificationId}/confirm": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>본인인증 확인</p>
		 *
		 * @description <p>본인인증 확인</p>
		 *     <p>요청된 본인인증에 대한 확인을 진행합니다.</p>
		 *
		 */
		post: operations["confirmIdentityVerification"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/identity-verifications/{identityVerificationId}/resend": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>SMS 본인인증 요청 재전송</p>
		 *
		 * @description <p>SMS 본인인증 요청 재전송</p>
		 *     <p>SMS 본인인증 요청을 재전송합니다.</p>
		 *
		 */
		post: operations["resendIdentityVerification"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}/pre-register": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>결제 정보 사전 등록</p>
		 *
		 * @description <p>결제 정보 사전 등록</p>
		 *     <p>결제 정보를 사전 등록합니다.</p>
		 *
		 */
		post: operations["preRegisterPayment"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/billing-keys/{billingKey}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>빌링키 단건 조회</p>
		 *
		 * @description <p>빌링키 단건 조회</p>
		 *     <p>주어진 빌링키에 대응되는 빌링키 정보를 조회합니다.</p>
		 *
		 */
		get: operations["getBillingKeyInfo"];
		put?: never;
		post?: never;
		/**
		 * <p>빌링키 삭제</p>
		 *
		 * @description <p>빌링키 삭제</p>
		 *     <p>빌링키를 삭제합니다.</p>
		 *
		 */
		delete: operations["deleteBillingKey"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/billing-keys": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>빌링키 다건 조회</p>
		 *
		 * @description <p>빌링키 다건 조회</p>
		 *     <p>주어진 조건에 맞는 빌링키들을 페이지 기반으로 조회합니다.</p>
		 *
		 */
		get: operations["getBillingKeyInfos"];
		put?: never;
		/**
		 * <p>빌링키 발급</p>
		 *
		 * @description <p>빌링키 발급</p>
		 *     <p>빌링키 발급을 요청합니다.</p>
		 *
		 */
		post: operations["issueBillingKey"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}/cash-receipt": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>현금 영수증 단건 조회</p>
		 *
		 * @description <p>현금 영수증 단건 조회</p>
		 *     <p>주어진 결제 아이디에 대응되는 현금 영수증 내역을 조회합니다.</p>
		 *
		 */
		get: operations["getCashReceiptByPaymentId"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>결제 단건 조회</p>
		 *
		 * @description <p>결제 단건 조회</p>
		 *     <p>주어진 아이디에 대응되는 결제 건을 조회합니다.</p>
		 *
		 */
		get: operations["getPayment"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>결제 다건 조회(페이지 기반)</p>
		 *
		 * @description <p>결제 다건 조회(페이지 기반)</p>
		 *     <p>주어진 조건에 맞는 결제 건들을 페이지 기반으로 조회합니다.</p>
		 *
		 */
		get: operations["getPayments"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments-by-cursor": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>결제 대용량 다건 조회(커서 기반)</p>
		 *
		 * @description <p>결제 대용량 다건 조회(커서 기반)</p>
		 *     <p>기간 내 모든 결제 건을 커서 기반으로 조회합니다. 결제 건의 생성일시를 기준으로 주어진 기간 내 존재하는 모든 결제 건이 조회됩니다.</p>
		 *
		 */
		get: operations["getAllPaymentsByCursor"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payment-schedules/{paymentScheduleId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>결제 예약 단건 조회</p>
		 *
		 * @description <p>결제 예약 단건 조회</p>
		 *     <p>주어진 아이디에 대응되는 결제 예약 건을 조회합니다.</p>
		 *
		 */
		get: operations["getPaymentSchedule"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payment-schedules": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>결제 예약 다건 조회</p>
		 *
		 * @description <p>결제 예약 다건 조회</p>
		 *     <p>주어진 조건에 맞는 결제 예약 건들을 조회합니다.
		 *     <code>filter.from</code>, <code>filter.until</code> 파라미터의 기본값이 결제 시점 기준 지난 90일에 속하는 건을 조회하도록 되어 있으니, 미래 예약 상태의 건을 조회하기 위해서는 해당 파라미터를 직접 설정해 주셔야 합니다.</p>
		 *
		 */
		get: operations["getPaymentSchedules"];
		put?: never;
		post?: never;
		/**
		 * <p>결제 예약 취소</p>
		 *
		 * @description <p>결제 예약 취소</p>
		 *     <p>결제 예약 건을 취소합니다.</p>
		 *
		 */
		delete: operations["revokePaymentSchedule"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}/schedule": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>결제 예약</p>
		 *
		 * @description <p>결제 예약</p>
		 *     <p>결제를 예약합니다.</p>
		 *
		 */
		post: operations["createPaymentSchedule"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}/cancel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>결제 취소</p>
		 *
		 * @description <p>결제 취소</p>
		 *     <p>결제 취소를 요청합니다.</p>
		 *
		 */
		post: operations["cancelPayment"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}/billing-key": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>빌링키 결제</p>
		 *
		 * @description <p>빌링키 결제</p>
		 *     <p>빌링키로 결제를 진행합니다.</p>
		 *
		 */
		post: operations["PayWithBillingKey"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}/instant": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>수기 결제</p>
		 *
		 * @description <p>수기 결제</p>
		 *     <p>수기 결제를 진행합니다.</p>
		 *
		 */
		post: operations["PayInstantly"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/cash-receipts": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>현금 영수증 수동 발급</p>
		 *
		 * @description <p>현금 영수증 수동 발급</p>
		 *     <p>현금 영수증 발급을 요청합니다.</p>
		 *
		 */
		post: operations["issueCashReceipt"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}/cash-receipt/cancel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>현금 영수증 취소</p>
		 *
		 * @description <p>현금 영수증 취소</p>
		 *     <p>현금 영수증 취소를 요청합니다.</p>
		 *
		 */
		post: operations["cancelCashReceiptByPaymentId"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}/virtual-account/close": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>가상계좌 말소</p>
		 *
		 * @description <p>가상계좌 말소</p>
		 *     <p>발급된 가상계좌를 말소합니다.</p>
		 *
		 */
		post: operations["closeVirtualAccount"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}/escrow/logistics": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>에스크로 배송 정보 등록</p>
		 *
		 * @description <p>에스크로 배송 정보 등록</p>
		 *     <p>에스크로 배송 정보를 등록합니다.</p>
		 *
		 */
		post: operations["applyEscrowLogistics"];
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * <p>에스크로 배송 정보 수정</p>
		 *
		 * @description <p>에스크로 배송 정보 수정</p>
		 *     <p>에스크로 배송 정보를 수정합니다.</p>
		 *
		 */
		patch: operations["modifyEscrowLogistics"];
		trace?: never;
	};
	"/payments/{paymentId}/escrow/complete": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>에스크로 구매 확정</p>
		 *
		 * @description <p>에스크로 구매 확정</p>
		 *     <p>에스크로 결제를 구매 확정 처리합니다</p>
		 *
		 */
		post: operations["confirmEscrow"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}/resend-webhook": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>웹훅 재발송</p>
		 *
		 * @description <p>웹훅 재발송</p>
		 *     <p>웹훅을 재발송합니다.</p>
		 *
		 */
		post: operations["resendWebhook"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/channels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/payment": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 결제 현황을 조회합니다.</p>
		 *      */
		get: operations["getAnalyticsPaymentChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/payment-insight": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 결제 현황 인사이트를 조회합니다.</p>
		 *      */
		get: operations["getAnalyticsPaymentChartInsight"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/average-amount": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 평균 거래액 현황을 조회합니다.</p>
		 *      */
		get: operations["getAverageAmountChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/payment-method": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 결제수단 현황을 조회합니다.</p>
		 *      */
		get: operations["getPaymentMethodChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/payment-method-trend": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 결제수단 트렌드를 조회합니다.</p>
		 *      */
		get: operations["getPaymentMethodTrendChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/card": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 카드결제 현황을 조회합니다.</p>
		 *      */
		get: operations["getAnalyticsCardChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/card-company": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 카드사별 결제 현황을 조회합니다.</p>
		 *      */
		get: operations["getAnalyticsCardCompanyChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/easy-pay": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 간편결제 현황을 조회합니다.</p>
		 *      */
		get: operations["getAnalyticsEasyPayChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/easy-pay-provider": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 간편결제사별 결제 현황을 조회합니다.</p>
		 *      */
		get: operations["getAnalyticsEasyPayProviderChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/pg-company": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 결제대행사 현황을 조회합니다.</p>
		 *      */
		get: operations["getPgCompanyChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/pg-company-trend": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 결제대행사별 거래 추이를 조회합니다.</p>
		 *      */
		get: operations["getPgCompanyTrendChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/overseas-payment-usage": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 해외 결제 사용 여부를 조회합니다.</p>
		 *      */
		get: operations["getAnalyticsOverseasPaymentUsage"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/cancellation-rate": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 환불율을 조회합니다.</p>
		 *      */
		get: operations["getAnalyticsCancellationRate"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/payment-status": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 결제상태 이력 집계를 조회합니다.</p>
		 *      */
		get: operations["getPaymentStatusChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/payment-status/by-method": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 결제수단별 결제전환율을 조회합니다.</p>
		 *      */
		get: operations["getPaymentStatusByPaymentMethodChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/payment-status/by-pg-company": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 PG사별 결제전환율을 조회합니다.</p>
		 *      */
		get: operations["getPaymentStatusByPgCompanyChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/analytics/charts/payment-status/by-payment-client": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description <p>고객사의 결제환경별 결제전환율을 조회합니다.</p>
		 *      */
		get: operations["getPaymentStatusByPaymentClientChart"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/member-companies/{brn}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>연동 사업자 조회</p>
		 *
		 * @description <p>연동 사업자 조회</p>
		 *     <p>포트원 B2B 서비스에 연동된 사업자를 조회합니다.</p>
		 *
		 */
		get: operations["getB2bMemberCompany"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * <p>연동 사업자 정보 수정</p>
		 *
		 * @description <p>연동 사업자 정보 수정</p>
		 *     <p>연동 사업자 정보를 수정합니다.</p>
		 *
		 */
		patch: operations["updateB2bMemberCompany"];
		trace?: never;
	};
	"/b2b-preview/member-companies": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>사업자 연동</p>
		 *
		 * @description <p>사업자 연동</p>
		 *     <p>포트원 B2B 서비스에 사업자를 연동합니다.</p>
		 *
		 */
		post: operations["registerB2bMemberCompany"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/member-companies/{brn}/contacts/{contactId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>담당자 조회</p>
		 *
		 * @description <p>담당자 조회</p>
		 *     <p>연동 사업자에 등록된 담당자를 조회합니다.</p>
		 *
		 */
		get: operations["getB2bMemberCompanyContact"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * <p>담당자 정보 수정</p>
		 *
		 * @description <p>담당자 정보 수정</p>
		 *     <p>담당자 정보를 수정합니다.</p>
		 *
		 */
		patch: operations["updateB2bMemberCompanyContact"];
		trace?: never;
	};
	"/b2b-preview/member-companies/{brn}/certificate/registration-url": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>사업자 인증서 등록 URL 조회</p>
		 *
		 * @description <p>사업자 인증서 등록 URL 조회</p>
		 *     <p>연동 사업자의 인증서를 등록하기 위한 URL을 조회합니다.</p>
		 *
		 */
		get: operations["getB2bCertificateRegistrationUrl"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/member-companies/{brn}/certificate": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>인증서 조회</p>
		 *
		 * @description <p>인증서 조회</p>
		 *     <p>연동 사업자의 인증서를 조회합니다.</p>
		 *
		 */
		get: operations["getB2bCertificate"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/member-companies/contacts/id-existence": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>담당자 ID 존재 여부 확인</p>
		 *
		 * @description <p>담당자 ID 존재 여부 확인</p>
		 *     <p>담당자 ID가 이미 사용중인지 확인합니다.</p>
		 *
		 */
		get: operations["getB2bContactIdExistence"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/bank-accounts/{bank}/{accountNumber}/holder": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>예금주 조회</p>
		 *
		 * @description <p>예금주 조회</p>
		 *     <p>원하는 계좌의 예금주를 조회합니다.</p>
		 *
		 */
		get: operations["getB2bBankAccountHolder"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/company/{brn}/state": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>사업자 상태 조회</p>
		 *
		 * @description <p>사업자 상태 조회</p>
		 *     <p>원하는 사업자의 상태를 조회합니다. 포트원 B2B 서비스에 연동 및 등록되지 않은 사업자도 조회 가능합니다.</p>
		 *
		 */
		get: operations["getB2bCompanyState"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/request-reverse-issuance": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>세금계산서 역발행 요청</p>
		 *
		 * @description <p>세금계산서 역발행 요청</p>
		 *     <p>공급자에게 세금계산서 역발행을 요청합니다.</p>
		 *
		 */
		post: operations["requestB2bTaxInvoiceReverseIssuance"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/{documentKey}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>세금 계산서 조회</p>
		 *
		 * @description <p>세금 계산서 조회</p>
		 *     <p>등록된 세금 계산서를 공급자 혹은 공급받는자 문서번호로 조회합니다.</p>
		 *
		 */
		get: operations["getB2bTaxInvoice"];
		put?: never;
		post?: never;
		/**
		 * <p>세금계산서 삭제</p>
		 *
		 * @description <p>세금계산서 삭제</p>
		 *     <p>세금계산서를 삭제합니다.</p>
		 *
		 */
		delete: operations["deleteB2bTaxInvoice"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/issue": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>세금계산서 발행</p>
		 *
		 * @description <p>세금계산서 발행</p>
		 *     <p>역발행의 경우 역발행요청(REQUESTED) 상태, 정발행의 경우 임시저장(REGISTERED) 상태의 세금계산서를 발행합니다.</p>
		 *
		 */
		post: operations["issueB2bTaxInvoice"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/cancel-request": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>세금계산서 역발행 요청 취소</p>
		 *
		 * @description <p>세금계산서 역발행 요청 취소</p>
		 *     <p>공급받는자가 공급자에게 세금계산서 역발행 요청한 것을 취소합니다.</p>
		 *
		 */
		post: operations["cancelB2bTaxInvoiceRequest"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/cancel-issuance": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>세금계산서 역발행 취소</p>
		 *
		 * @description <p>세금계산서 역발행 취소</p>
		 *     <p>공급자가 발행 완료한 세금계산서를 국세청 전송 전 취소합니다.</p>
		 *
		 */
		post: operations["cancelB2bTaxInvoiceIssuance"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/refuse-request": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>세금계산서 역발행 요청 거부</p>
		 *
		 * @description <p>세금계산서 역발행 요청 거부</p>
		 *     <p>공급자가 공급받는자로부터 요청받은 세금계산서 역발행 건을 거부합니다.</p>
		 *
		 */
		post: operations["refuseB2bTaxInvoiceRequest"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>세금 계산서 다건조회</p>
		 *
		 * @description <p>세금 계산서 다건조회</p>
		 *     <p>조회 기간 내 등록된 세금 계산서를 다건 조회합니다.</p>
		 *
		 */
		get: operations["getB2bTaxInvoices"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/{documentKey}/popup-url": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>세금 계산서 팝업 URL 조회</p>
		 *
		 * @description <p>세금 계산서 팝업 URL 조회</p>
		 *     <p>등록된 세금 계산서 팝업 URL을 공급자 혹은 공급받는자 문서번호로 조회합니다.</p>
		 *
		 */
		get: operations["getB2bTaxInvoicePopupUrl"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/{documentKey}/print-url": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>세금 계산서 프린트 URL 조회</p>
		 *
		 * @description <p>세금 계산서 프린트 URL 조회</p>
		 *     <p>등록된 세금 계산서 프린트 URL을 공급자 혹은 공급받는자 문서번호로 조회합니다.</p>
		 *
		 */
		get: operations["getB2bTaxInvoicePrintUrl"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/{documentKey}/pdf-download-url": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>세금 계산서 PDF 다운로드 URL 조회</p>
		 *
		 * @description <p>세금 계산서 PDF 다운로드 URL 조회</p>
		 *     <p>등록된 세금 계산서 PDF 다운로드 URL을 공급자 혹은 공급받는자 문서번호로 조회합니다.</p>
		 *
		 */
		get: operations["getB2bTaxInvoicePdfDownloadUrl"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/register": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>세금계산서 임시 저장</p>
		 *
		 * @description <p>세금계산서 임시 저장</p>
		 *     <p>세금계산서 임시 저장을 요청합니다.</p>
		 *
		 */
		post: operations["requestB2bTaxInvoiceRegister"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/request": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>세금계산서 역발행 요청</p>
		 *
		 * @description <p>세금계산서 역발행 요청</p>
		 *     <p>임시저장(REGISTERED) 상태의 역발행 세금계산서를 공급자에게 발행 요청합니다.</p>
		 *
		 */
		post: operations["requestB2bTaxInvoice"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/file-upload-link": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>세금계산서 파일 업로드 링크 생성</p>
		 *
		 * @description <p>세금계산서 파일 업로드 링크 생성</p>
		 *     <p>세금계산서의 첨부파일를 업로드할 링크를 생성합니다.</p>
		 *
		 */
		post: operations["createB2bTaxInvoiceFileUploadLink"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/attach-file": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>세금계산서 파일 첨부</p>
		 *
		 * @description <p>세금계산서 파일 첨부</p>
		 *     <p>세금계산서에 파일을 첨부합니다.</p>
		 *
		 */
		post: operations["attachB2bTaxInvoiceFile"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/{documentKey}/attachments": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>세금계산서 첨부파일 목록 조회</p>
		 *
		 * @description <p>세금계산서 첨부파일 목록 조회</p>
		 *     <p>세금계산서에 첨부된 파일 목록을 조회합니다.</p>
		 *
		 */
		get: operations["getB2bTaxInvoiceAttachments"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/b2b-preview/tax-invoices/{documentKey}/attachments/{attachmentId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * <p>세금계산서 첨부파일 삭제</p>
		 *
		 * @description <p>세금계산서 첨부파일 삭제</p>
		 *     <p>세금계산서 첨부파일을 삭제합니다.</p>
		 *
		 */
		delete: operations["deleteB2bTaxInvoiceAttachment"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/kakaopay/payment/order": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * <p>카카오페이 주문 조회 API</p>
		 *
		 * @description <p>카카오페이 주문 조회 API</p>
		 *     <p>주어진 아이디에 대응되는 카카오페이 주문 건을 조회합니다.
		 *     해당 API 사용이 필요한 경우 포트원 기술지원팀으로 문의 주시길 바랍니다.</p>
		 *
		 */
		get: operations["GetKakaopayPaymentOrder"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/payments/{paymentId}/register-store-receipt": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * <p>영수증 내 하위 상점 거래 등록 API</p>
		 *
		 * @description <p>영수증 내 하위 상점 거래 등록 API</p>
		 *     <p>결제 내역 매출전표에 하위 상점의 거래를 등록할 수 있는 API입니다.
		 *     지원되는 PG사:
		 *     KG이니시스(이용 전 콘솔 -&gt; 결제연동 탭에서 INIApi Key 등록 필요)</p>
		 *
		 */
		post: operations["registerStoreReceipt"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/payouts-sheet": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/platform/bulk-payouts-sheet": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/**
		 * 분리 형식 주소
		 * @description <p>분리 형식 주소</p>
		 *     <p>oneLine(한 줄 형식 주소) 필드는 항상 존재합니다.</p>
		 *
		 */
		Address:
			| components["schemas"]["OneLineAddress"]
			| components["schemas"]["SeparatedAddress"];
		/**
		 * 결제가 이미 완료된 경우
		 * @description <p>결제가 이미 완료된 경우</p>
		 *
		 */
		AlreadyPaidError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "ALREADY_PAID";
			message?: string;
		};
		/**
		 * 결제가 이미 완료되었거나 대기중인 경우
		 * @description <p>결제가 이미 완료되었거나 대기중인 경우</p>
		 *
		 */
		AlreadyPaidOrWaitingError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "ALREADY_PAID_OR_WAITING";
			message?: string;
		};
		Analytics: Record<string, never>;
		/**
		 * 고객사의 평균 거래액 현황 조회 응답
		 * @description <p>고객사의 평균 거래액 현황 조회 응답</p>
		 *
		 */
		AnalyticsAverageAmountChart: {
			stats: components["schemas"]["AnalyticsAverageAmountChartStat"][];
			summary: components["schemas"]["AnalyticsAverageAmountChartSummary"];
		};
		/** @description <p>특정 시점의 건별 평균 거래액, 고객 당 평균 거래액을 나타냅니다.</p>
		 *      */
		AnalyticsAverageAmountChartStat: {
			/**
			 * 시점
			 * Format: date-time
			 */
			timestamp: string;
			/**
			 * 건별 평균 거래액
			 * Format: int64
			 */
			paymentAverageAmount: number;
			/**
			 * 고객 당 평균 거래액
			 * Format: int64
			 */
			customerAverageAmount: number;
		};
		/** @description <p>전체 구간의 건별 평균 거래액, 고객 당 평균 거래액을 나타냅니다.</p>
		 *      */
		AnalyticsAverageAmountChartSummary: {
			/**
			 * 건별 평균 거래액
			 * Format: int64
			 */
			paymentAverageAmount: number;
			/**
			 * 고객 당 평균 거래액
			 * Format: int64
			 */
			customerAverageAmount: number;
		};
		/**
		 * 고객사의 환불율 정보
		 * @description <p>고객사의 환불율 정보</p>
		 *
		 */
		AnalyticsCancellationRate: {
			/** Format: double */
			cancellationRate: number;
		};
		/**
		 * 고객사의 카드결제 현황 차트 정보
		 * @description <p>고객사의 카드결제 현황 차트 정보</p>
		 *
		 */
		AnalyticsCardChart: {
			stats: components["schemas"]["AnalyticsCardChartStat"][];
		};
		/** @description <p>특정 시점의 카드결제 거래 건 수와 금액을 나타냅니다.</p>
		 *      */
		AnalyticsCardChartStat: {
			/**
			 * 시점
			 * Format: date-time
			 */
			timestamp: string;
			/**
			 * 거래액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 거래 건수
			 * Format: int64
			 */
			count: number;
		};
		/**
		 * 고객사의 카드사별 결제 현황 조회 응답
		 * @description <p>고객사의 카드사별 결제 현황 조회 응답</p>
		 *
		 */
		AnalyticsCardCompanyChart: {
			stats: components["schemas"]["AnalyticsCardCompanyChartStat"][];
			remainderStats: components["schemas"]["AnalyticsCardCompanyChartRemainderStat"][];
			summary: components["schemas"]["AnalyticsCardCompanyChartSummary"];
		};
		/** @description <p>특정 시점의 나머지 카드사들의 결제금액, 결제 건수를 나타냅니다.</p>
		 *      */
		AnalyticsCardCompanyChartRemainderStat: {
			/**
			 * 시점
			 * Format: date-time
			 */
			timestamp: string;
			/**
			 * 결제금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 결제 건수
			 * Format: int64
			 */
			count: number;
		};
		/** @description <p>특정 시점의 카드사 별 결제금액, 결제 건수를 나타냅니다.</p>
		 *      */
		AnalyticsCardCompanyChartStat: {
			/**
			 * 시점
			 * Format: date-time
			 */
			timestamp: string;
			/** 카드사 */
			cardCompany: components["schemas"]["CardCompany"];
			/**
			 * 결제금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 결제 건수
			 * Format: int64
			 */
			count: number;
		};
		/** @description <p>결제금액, 결제 건수의 총합을 나타냅니다.</p>
		 *      */
		AnalyticsCardCompanyChartSummary: {
			/**
			 * 결제금액 합
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 결제 건수 합
			 * Format: int64
			 */
			totalCount: number;
		};
		/**
		 * 고객사의 간편결제 현황 차트 정보
		 * @description <p>고객사의 간편결제 현황 차트 정보</p>
		 *
		 */
		AnalyticsEasyPayChart: {
			stats: components["schemas"]["AnalyticsEasyPayChartStat"][];
		};
		/** @description <p>특정 시점의 간편결제 거래 건수와 금액을 나타냅니다.</p>
		 *      */
		AnalyticsEasyPayChartStat: {
			/**
			 * 시점
			 * Format: date-time
			 */
			timestamp: string;
			/**
			 * 거래액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 거래 건수
			 * Format: int64
			 */
			count: number;
		};
		/**
		 * 고객사의 간편결제사별 결제 현황 차트 정보
		 * @description <p>고객사의 간편결제사별 결제 현황 차트 정보</p>
		 *
		 */
		AnalyticsEasyPayProviderChart: {
			stats: components["schemas"]["AnalyticsEasyPayProviderChartStat"][];
			remainderStats: components["schemas"]["AnalyticsEasyPayProviderChartRemainderStat"][];
			summary: components["schemas"]["AnalyticsEasyPayProviderChartSummary"];
		};
		/** @description <p>특정 시점의 나머지 간편결제사들의 결제금액, 결제 건수를 나타냅니다.</p>
		 *      */
		AnalyticsEasyPayProviderChartRemainderStat: {
			/**
			 * 시점
			 * Format: date-time
			 */
			timestamp: string;
			/**
			 * 결제금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 결제 건수
			 * Format: int64
			 */
			count: number;
		};
		/** @description <p>특정 시점의 간편결제사별 결제금액, 결제 건수를 나타냅니다.</p>
		 *      */
		AnalyticsEasyPayProviderChartStat: {
			/**
			 * 시점
			 * Format: date-time
			 */
			timestamp: string;
			/** 간편결제사 */
			easyPayProvider: components["schemas"]["EasyPayProvider"];
			/**
			 * 결제금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 결제 건수
			 * Format: int64
			 */
			count: number;
		};
		/** @description <p>결제금액, 결제 건수의 총합을 나타냅니다.</p>
		 *      */
		AnalyticsEasyPayProviderChartSummary: {
			/**
			 * 결제금액의 합
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 결제 건수의 합
			 * Format: int64
			 */
			totalCount: number;
		};
		/**
		 * 고객사의 해외 결제 사용 여부
		 * @description <p>고객사의 해외 결제 사용 여부</p>
		 *
		 */
		AnalyticsOverseasPaymentUsage: {
			isUsing: boolean;
		};
		/**
		 * 고객사의 결제 현황 차트 정보
		 * @description <p>고객사의 결제 현황 차트 정보</p>
		 *
		 */
		AnalyticsPaymentChart: {
			stats: components["schemas"]["AnalyticsPaymentChartStat"][];
		};
		/**
		 * 고객사의 결제 현황 인사이트 정보
		 * @description <p>고객사의 결제 현황 인사이트 정보</p>
		 *
		 */
		AnalyticsPaymentChartInsight: {
			/**
			 * 월간 최고 거래액 발생일
			 * Format: int64
			 */
			highestDateInMonth?: number;
			/**
			 * 월간 최저 거래액 발생일
			 * Format: int64
			 */
			lowestDateInMonth?: number;
			/** 주간 최고 거래액 발생 요일 */
			highestDayInWeek?: components["schemas"]["DayOfWeek"];
			/** 주간 최저 거래액 발생 요일 */
			lowestDayInWeek?: components["schemas"]["DayOfWeek"];
			/**
			 * 일간 최고 거래액 발생 시간
			 * Format: int64
			 */
			highestHourInDay: number;
			/**
			 * 일간 최저 거래액 발생 시간
			 * Format: int64
			 */
			lowestHourInDay: number;
		};
		/** @description <p>특정 시점의 거래 건 수와 금액을 나타냅니다.</p>
		 *      */
		AnalyticsPaymentChartStat: {
			/**
			 * 시점
			 * Format: date-time
			 */
			timestamp: string;
			/**
			 * 거래액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 거래 건수
			 * Format: int64
			 */
			count: number;
		};
		/**
		 * 고객사의 결제수단 현황 차트 정보
		 * @description <p>고객사의 결제수단 현황 차트 정보</p>
		 *
		 */
		AnalyticsPaymentMethodChart: {
			stats: components["schemas"]["AnalyticsPaymentMethodChartStat"][];
		};
		/** @description <p>결제수단별 결제금액, 결제 건수를 나타냅니다.</p>
		 *      */
		AnalyticsPaymentMethodChartStat: {
			/** 결제수단 */
			paymentMethod?: components["schemas"]["PaymentMethodType"];
			/**
			 * 결제수단별 결제금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 결제수단별 결제 건수
			 * Format: int64
			 */
			count: number;
		};
		/**
		 * 고객사의 결제수단 트렌드 차트 정보
		 * @description <p>고객사의 결제수단 트렌드 차트 정보</p>
		 *
		 */
		AnalyticsPaymentMethodTrendChart: {
			/**
			 * 결제수단별 결제금액, 결제 건수 데이터
			 * @description <p>(timestamp, paymentMethod) 를 기준으로 오름차순 정렬되어 주어집니다.</p>
			 *
			 */
			stats: components["schemas"]["AnalyticsPaymentMethodTrendChartStat"][];
		};
		/** @description <p>특정 시점의 결제수단별 결제금액, 결제 건수를 나타냅니다.</p>
		 *      */
		AnalyticsPaymentMethodTrendChartStat: {
			/**
			 * 시점
			 * Format: date-time
			 */
			timestamp: string;
			/** 결제수단 */
			paymentMethod?: components["schemas"]["PaymentMethodType"];
			/**
			 * 결제금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 결제 건수
			 * Format: int64
			 */
			count: number;
		};
		/**
		 * 고객사의 결제 환경 별 결제 상태 차트 정보
		 * @description <p>고객사의 결제 환경 별 결제 상태 차트 정보</p>
		 *
		 */
		AnalyticsPaymentStatusByPaymentClientChart: {
			stats: components["schemas"]["AnalyticsPaymentStatusByPaymentClientChartStat"][];
		};
		/** @description <p>고객사의 결제 환경 별 결제 상태 차트 정보</p>
		 *      */
		AnalyticsPaymentStatusByPaymentClientChartStat: {
			/** 결제가 발생한 클라이언트 환경 */
			paymentClientType: components["schemas"]["PaymentClientType"];
			/** 결제 건 상태 */
			paymentStatus: components["schemas"]["PaymentStatus"];
			/**
			 * 거래액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 거래 건수
			 * Format: int64
			 */
			count: number;
		};
		/**
		 * 고객사의 결제 수단 별 결제 상태 차트 정보
		 * @description <p>고객사의 결제 수단 별 결제 상태 차트 정보</p>
		 *
		 */
		AnalyticsPaymentStatusByPaymentMethodChart: {
			stats: components["schemas"]["AnalyticsPaymentStatusByPaymentMethodChartStat"][];
		};
		/** @description <p>각 결제수단, 상태 별 건수와 금액을 나타냅니다.</p>
		 *      */
		AnalyticsPaymentStatusByPaymentMethodChartStat: {
			/** 결제수단 */
			paymentMethod?: components["schemas"]["PaymentMethodType"];
			/** 결제 건 상태 */
			paymentStatus: components["schemas"]["PaymentStatus"];
			/**
			 * 거래액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 거래 건수
			 * Format: int64
			 */
			count: number;
		};
		/**
		 * 고객사의 PG사 별 결제 상태 차트 정보
		 * @description <p>고객사의 PG사 별 결제 상태 차트 정보</p>
		 *
		 */
		AnalyticsPaymentStatusByPgCompanyChart: {
			stats: components["schemas"]["AnalyticsPaymentStatusByPgCompanyChartStat"][];
		};
		/** @description <p>각 상태의 건수와 금액, 사분위수를 나타냅니다.</p>
		 *      */
		AnalyticsPaymentStatusByPgCompanyChartStat: {
			/** PG사 */
			pgCompany: components["schemas"]["PgCompany"];
			/** 결제 건 상태 */
			paymentStatus: components["schemas"]["PaymentStatus"];
			/**
			 * 거래액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 거래 건수
			 * Format: int64
			 */
			count: number;
		};
		/**
		 * 고객사의 결제 상태 차트 정보
		 * @description <p>고객사의 결제 상태 차트 정보</p>
		 *
		 */
		AnalyticsPaymentStatusChart: {
			stats: components["schemas"]["AnalyticsPaymentStatusChartStat"][];
		};
		/** @description <p>각 상태의 건수와 금액, 사분위수를 나타냅니다.</p>
		 *      */
		AnalyticsPaymentStatusChartStat: {
			/** 결제 건 상태 */
			paymentStatus: components["schemas"]["PaymentStatus"];
			/**
			 * 거래액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 거래 건수
			 * Format: int64
			 */
			count: number;
			/**
			 * 해당 상태 비율
			 * Format: int64
			 */
			averageRatio: number;
			/**
			 * 1 사분위수
			 * Format: int64
			 */
			firstQuantile: number;
			/**
			 * 중앙값
			 * Format: int64
			 */
			median: number;
			/**
			 * 3 사분위수
			 * Format: int64
			 */
			thirdQuantile: number;
		};
		/**
		 * 고객사의 결제대행사 현황 차트 정보
		 * @description <p>고객사의 결제대행사 현황 차트 정보</p>
		 *
		 */
		AnalyticsPgCompanyChart: {
			stats: components["schemas"]["AnalyticsPgCompanyChartStat"][];
		};
		/** @description <p>결제대행사별 결제금액, 결제 건수를 나타냅니다.</p>
		 *      */
		AnalyticsPgCompanyChartStat: {
			/** 결제대행사 */
			pgCompany: components["schemas"]["PgCompany"];
			/**
			 * 결제대행사별 결제금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 결제대행사별 결제 건수
			 * Format: int64
			 */
			count: number;
		};
		/**
		 * 고객사의 결제대행사별 거래 추이 차트 정보
		 * @description <p>고객사의 결제대행사별 거래 추이 차트 정보</p>
		 *
		 */
		AnalyticsPgCompanyTrendChart: {
			stats: components["schemas"]["AnalyticsPgCompanyTrendChartStat"][];
		};
		/** @description <p>특정 시점의 결제대행사 별 결제금액, 결제 건수를 나타냅니다.</p>
		 *      */
		AnalyticsPgCompanyTrendChartStat: {
			/**
			 * 시점
			 * Format: date-time
			 */
			timestamp: string;
			/** 결제대행사 */
			pgCompany: components["schemas"]["PgCompany"];
			/**
			 * 결제금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 결제 건수
			 * Format: int64
			 */
			count: number;
		};
		/**
		 * 조회 시간 단위
		 * @description <p>조회 시간 단위</p>
		 *     <p>하나의 단위 필드만 선택하여 입력합니다.</p>
		 *
		 */
		AnalyticsTimeGranularity: {
			minute?: components["schemas"]["AnalyticsTimeGranularityMinute"];
			hour?: components["schemas"]["AnalyticsTimeGranularityHour"];
			day?: components["schemas"]["AnalyticsTimeGranularityDay"];
			week?: components["schemas"]["AnalyticsTimeGranularityWeek"];
			month?: components["schemas"]["AnalyticsTimeGranularityMonth"];
		};
		/**
		 * 일
		 * @description <p>일</p>
		 *
		 */
		AnalyticsTimeGranularityDay: {
			/** Format: int32 */
			timezoneHourOffset: number;
		};
		/**
		 * 시간
		 * @description <p>시간</p>
		 *
		 */
		AnalyticsTimeGranularityHour: Record<string, never>;
		/**
		 * 분
		 * @description <p>분</p>
		 *
		 */
		AnalyticsTimeGranularityMinute: Record<string, never>;
		/**
		 * 월
		 * @description <p>월</p>
		 *
		 */
		AnalyticsTimeGranularityMonth: {
			/** Format: int32 */
			timezoneHourOffset: number;
		};
		/**
		 * 주
		 * @description <p>주</p>
		 *
		 */
		AnalyticsTimeGranularityWeek: {
			/** Format: int32 */
			timezoneHourOffset: number;
		};
		ApplyEscrowLogisticsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentNotFoundError"]
			| components["schemas"]["PaymentNotPaidError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 에스크로 배송 정보 등록 성공 응답
		 * @description <p>에스크로 배송 정보 등록 성공 응답</p>
		 *
		 */
		ApplyEscrowLogisticsResponse: {
			/** 송장 번호 */
			invoiceNumber: string;
			/**
			 * 발송 시점
			 * Format: date-time
			 */
			sentAt: string;
			/**
			 * 에스크로 정보 등록 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		/**
		 * 파트너 상태를 승인 완료로 변경하기 위한 입력 정보
		 * @description <p>파트너 상태를 승인 완료로 변경하기 위한 입력 정보</p>
		 *
		 */
		ApprovePlatformPartnerBody: {
			/** 파트너 메모. 값이 명시되지 않은 경우 업데이트하지 않습니다. */
			memo?: string;
		};
		ApprovePlatformPartnerError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformArchivedPartnerError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 파트너 승인 성공 응답
		 * @description <p>파트너 승인 성공 응답</p>
		 *
		 */
		ApprovePlatformPartnerResponse: {
			/** 승인된 파트너 */
			partner: components["schemas"]["PlatformPartner"];
		};
		ArchivePlatformAdditionalFeePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAdditionalFeePolicyNotFoundError"]
			| components["schemas"]["PlatformCannotArchiveScheduledAdditionalFeePolicyError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 추가 수수료 정책 보관 성공 응답
		 * @description <p>추가 수수료 정책 보관 성공 응답</p>
		 *
		 */
		ArchivePlatformAdditionalFeePolicyResponse: {
			/** 보관된 추가 수수료 정책 */
			additionalFeePolicy: components["schemas"]["PlatformAdditionalFeePolicy"];
		};
		ArchivePlatformContractError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformCannotArchiveScheduledContractError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 계약 보관 성공 응답
		 * @description <p>계약 보관 성공 응답</p>
		 *
		 */
		ArchivePlatformContractResponse: {
			/** 보관된 계약 */
			contract: components["schemas"]["PlatformContract"];
		};
		ArchivePlatformDiscountSharePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformCannotArchiveScheduledDiscountSharePolicyError"]
			| components["schemas"]["PlatformDiscountSharePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 할인 분담 보관 성공 응답
		 * @description <p>할인 분담 보관 성공 응답</p>
		 *
		 */
		ArchivePlatformDiscountSharePolicyResponse: {
			/** 보관된 할인 분담 */
			discountSharePolicy: components["schemas"]["PlatformDiscountSharePolicy"];
		};
		ArchivePlatformPartnerError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformCannotArchiveScheduledPartnerError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 파트너 보관 성공 응답
		 * @description <p>파트너 보관 성공 응답</p>
		 *
		 */
		ArchivePlatformPartnerResponse: {
			/** 보관된 파트너 */
			partner: components["schemas"]["PlatformPartner"];
		};
		/**
		 * 세금계산서 파일 첨부 정보
		 * @description <p>세금계산서 파일 첨부 정보</p>
		 *
		 */
		AttachB2bTaxInvoiceFileBody: {
			/**
			 * 사업자등록번호
			 * @description <ul>
			 *     <li>없이 숫자 10자리로 구성됩니다.</li>
			 *     </ul>
			 *
			 */
			brn: string;
			/** 세금계산서 문서 번호 */
			documentKey: string;
			/**
			 * 문서 번호 유형
			 * @description <p>기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
			 *
			 */
			documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
			/** 파일 아이디 */
			fileId: string;
		};
		AttachB2bTaxInvoiceFileError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bFileNotFoundError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["B2bTaxInvoiceNotRegisteredStatusError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 계좌가 존재하지 않는 경우
		 * @description <p>계좌가 존재하지 않는 경우</p>
		 *
		 */
		B2bBankAccountNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_BANK_ACCOUNT_NOT_FOUND";
			message?: string;
		};
		B2bCertificate: {
			/**
			 * 등록일시
			 * Format: date-time
			 */
			registeredAt: string;
			/**
			 * 만료일시
			 * Format: date-time
			 */
			expiredAt: string;
			/** 발행자명 */
			issuerDn: string;
			/** 본인명 */
			subjectDn: string;
			/** 인증서 타입 */
			certificateType: components["schemas"]["B2bCertificateType"];
			/** OID */
			oid: string;
			/** 등록 담당자 성명 */
			registrantContactName: string;
			/** 등록 담당자 ID */
			registrantContactId: string;
		};
		/**
		 * 인증서 타입
		 * @description <p>인증서 타입</p>
		 *
		 * @enum {string}
		 */
		B2bCertificateType: "ETC" | "E_TAX" | "POP_BILL";
		/**
		 * 인증서가 등록되어 있지 않은 경우
		 * @description <p>인증서가 등록되어 있지 않은 경우</p>
		 *
		 */
		B2bCertificateUnregisteredError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_CERTIFICATE_UNREGISTERED";
			message?: string;
		};
		/**
		 * 사업자가 이미 연동되어 있는 경우
		 * @description <p>사업자가 이미 연동되어 있는 경우</p>
		 *
		 */
		B2bCompanyAlreadyRegisteredError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_COMPANY_ALREADY_REGISTERED";
			message?: string;
		};
		B2bCompanyContact: {
			/**
			 * 담당자 ID
			 * @description <p>팝빌 로그인 계정으로 사용됩니다.</p>
			 *
			 */
			id: string;
			/** 담당자 성명 */
			name: string;
			/** 담당자 핸드폰 번호 */
			phoneNumber: string;
			/** 담당자 이메일 */
			email: string;
			/**
			 * 등록 일시
			 * Format: date-time
			 */
			registeredAt: string;
			/**
			 * 관리자 여부
			 * @description <p>true일 경우 관리자, false일 경우 담당자입니다.</p>
			 *
			 */
			isManager: boolean;
		};
		B2bCompanyContactInput: {
			/**
			 * 담당자 ID
			 * @description <p>팝빌 로그인 계정으로 사용됩니다.</p>
			 *
			 */
			id: string;
			/** 비밀번호 */
			password: string;
			/** 담당자 성명 */
			name: string;
			/** 담당자 핸드폰 번호 */
			phoneNumber: string;
			/** 담당자 이메일 */
			email: string;
		};
		/**
		 * 사업자가 존재하지 않는 경우
		 * @description <p>사업자가 존재하지 않는 경우</p>
		 *
		 */
		B2bCompanyNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_COMPANY_NOT_FOUND";
			message?: string;
		};
		/**
		 * 사업자 상태
		 * @description <p>사업자 상태</p>
		 *
		 */
		B2bCompanyState: {
			/** 사업자 과세 유형 */
			taxationType: components["schemas"]["B2bCompanyStateTaxationType"];
			/**
			 * 과세 유형 변경 일자
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			taxationTypeDate?: string;
			/** 사업자 영업 상태 */
			businessStatus: components["schemas"]["B2bCompanyStateBusinessStatus"];
			/**
			 * 휴폐업 일자
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			closedSuspendedDate?: string;
		};
		/**
		 * 영업 상태
		 * @description <p>영업 상태</p>
		 *
		 * @enum {string}
		 */
		B2bCompanyStateBusinessStatus: "CLOSED" | "IN_BUSINESS" | "SUSPENDED";
		/**
		 * 사업자 과세 유형
		 * @description <p>사업자 과세 유형</p>
		 *
		 * @enum {string}
		 */
		B2bCompanyStateTaxationType:
			| "ASSIGNED_ID_NUMBER"
			| "NORMAL"
			| "SIMPLE"
			| "SIMPLE_TAX_INVOICE_ISSUER"
			| "TAX_FREE";
		/**
		 * 담당자가 존재하지 않는 경우
		 * @description <p>담당자가 존재하지 않는 경우</p>
		 *
		 */
		B2bContactNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_CONTACT_NOT_FOUND";
			message?: string;
		};
		/**
		 * 외부 서비스에서 에러가 발생한 경우
		 * @description <p>외부 서비스에서 에러가 발생한 경우</p>
		 *
		 */
		B2bExternalServiceError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_EXTERNAL_SERVICE";
			message: string;
		};
		/**
		 * 업로드한 파일을 찾을 수 없는 경우
		 * @description <p>업로드한 파일을 찾을 수 없는 경우</p>
		 *
		 */
		B2bFileNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_FILE_NOT_FOUND";
			message?: string;
		};
		/**
		 * 금융기관과의 통신에 실패한 경우
		 * @description <p>금융기관과의 통신에 실패한 경우</p>
		 *
		 */
		B2bFinancialSystemCommunicationError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_FINANCIAL_SYSTEM_COMMUNICATION";
			message?: string;
		};
		/**
		 * 금융기관 장애
		 * @description <p>금융기관 장애</p>
		 *
		 */
		B2bFinancialSystemFailureError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_FINANCIAL_SYSTEM_FAILURE";
			message?: string;
		};
		/**
		 * 금융기관 시스템이 점검 중인 경우
		 * @description <p>금융기관 시스템이 점검 중인 경우</p>
		 *
		 */
		B2bFinancialSystemUnderMaintenanceError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_FINANCIAL_SYSTEM_UNDER_MAINTENANCE";
			message?: string;
		};
		/**
		 * 계좌 정보 조회가 불가능한 외화 계좌인 경우
		 * @description <p>계좌 정보 조회가 불가능한 외화 계좌인 경우</p>
		 *
		 */
		B2bForeignExchangeAccountError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_FOREIGN_EXCHANGE_ACCOUNT";
			message?: string;
		};
		/**
		 * 홈택스가 점검중이거나 순단이 발생한 경우
		 * @description <p>홈택스가 점검중이거나 순단이 발생한 경우</p>
		 *
		 */
		B2bHometaxUnderMaintenanceError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_HOMETAX_UNDER_MAINTENANCE";
			message?: string;
		};
		/**
		 * ID가 이미 사용중인 경우
		 * @description <p>ID가 이미 사용중인 경우</p>
		 *
		 */
		B2bIdAlreadyExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_ID_ALREADY_EXISTS";
			message?: string;
		};
		B2bMemberCompany: {
			/**
			 * 사업자등록번호
			 * @description <ul>
			 *     <li>없이 숫자로만 구성됩니다.</li>
			 *     </ul>
			 *
			 */
			brn: string;
			/** 회사명 */
			name: string;
			/** 대표자 성명 */
			ceoName: string;
			/** 회사 주소 */
			address: string;
			/** 업태 */
			businessType: string;
			/** 업종 */
			businessClass: string;
		};
		/**
		 * 연동 사업자가 존재하지 않는 경우
		 * @description <p>연동 사업자가 존재하지 않는 경우</p>
		 *
		 */
		B2bMemberCompanyNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_MEMBER_COMPANY_NOT_FOUND";
			message?: string;
		};
		/**
		 * 세금 계산서 수정
		 * @description <p>세금 계산서 수정</p>
		 *
		 */
		B2bModification: {
			/** 수정 사유 */
			type: components["schemas"]["B2bTaxInvoiceModificationType"];
			/** 수정 대상 원본 세금계산서 국세청 승인 번호 */
			originalNtsApproveNumber: string;
		};
		/**
		 * B2B 기능이 활성화되지 않은 경우
		 * @description <p>B2B 기능이 활성화되지 않은 경우</p>
		 *
		 */
		B2bNotEnabledError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_NOT_ENABLED";
			message?: string;
		};
		/**
		 * 공급받는자가 존재하지 않은 경우
		 * @description <p>공급받는자가 존재하지 않은 경우</p>
		 *
		 */
		B2bRecipientNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_RECIPIENT_NOT_FOUND";
			message?: string;
		};
		/**
		 * 금융기관 시스템이 정기 점검 중인 경우
		 * @description <p>금융기관 시스템이 정기 점검 중인 경우</p>
		 *
		 */
		B2bRegularMaintenanceTimeError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_REGULAR_MAINTENANCE_TIME";
			message?: string;
		};
		/**
		 * 조회 기준
		 * @description <p>조회 기준</p>
		 *
		 * @enum {string}
		 */
		B2bSearchDateType: "ISSUE" | "REGISTER" | "WRITE";
		/**
		 * 공급자가 존재하지 않은 경우
		 * @description <p>공급자가 존재하지 않은 경우</p>
		 *
		 */
		B2bSupplierNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_SUPPLIER_NOT_FOUND";
			message?: string;
		};
		/**
		 * 정지 계좌인 경우
		 * @description <p>정지 계좌인 경우</p>
		 *
		 */
		B2bSuspendedAccountError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_SUSPENDED_ACCOUNT";
			message?: string;
		};
		B2bTaxInvoice:
			| components["schemas"]["B2bTaxInvoiceBeforeSending"]
			| components["schemas"]["B2bTaxInvoiceIssuanceCancelled"]
			| components["schemas"]["B2bTaxInvoiceIssued"]
			| components["schemas"]["B2bTaxInvoiceRegistered"]
			| components["schemas"]["B2bTaxInvoiceRequestCancelled"]
			| components["schemas"]["B2bTaxInvoiceRequestRefused"]
			| components["schemas"]["B2bTaxInvoiceRequested"]
			| components["schemas"]["B2bTaxInvoiceSending"]
			| components["schemas"]["B2bTaxInvoiceSendingCompleted"]
			| components["schemas"]["B2bTaxInvoiceSendingFailed"]
			| components["schemas"]["B2bTaxInvoiceWaitingSending"];
		/**
		 * 추가 담당자
		 * @description <p>추가 담당자</p>
		 *
		 */
		B2bTaxInvoiceAdditionalContact: {
			/**
			 * 성명
			 * @description <p>최대 100자</p>
			 *
			 */
			name?: string;
			/** 이메일 */
			email: string;
		};
		/**
		 * 세금계산서 첨부파일
		 * @description <p>세금계산서 첨부파일</p>
		 *
		 */
		B2bTaxInvoiceAttachment: {
			/** 첨부 파일 아이디 */
			id: string;
			/** 첨부 파일명 */
			name: string;
			/**
			 * 첨부 일시
			 * Format: date-time
			 */
			attachedAt: string;
		};
		/**
		 * 세금계산서의 첨부파일을 찾을 수 없는 경우
		 * @description <p>세금계산서의 첨부파일을 찾을 수 없는 경우</p>
		 *
		 */
		B2bTaxInvoiceAttachmentNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_TAX_INVOICE_ATTACHMENT_NOT_FOUND";
			message?: string;
		};
		B2bTaxInvoiceBeforeSending: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "BEFORE_SENDING";
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 책번호 - 권
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookVolume?: number;
			/**
			 * 책번호 - 호
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks: string[];
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 문자 전송 여부 */
			sendSms: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
			/**
			 * 발행 일시
			 * Format: date-time
			 */
			issuedAt: string;
			/**
			 * 국세청 승인번호
			 * @description <p>세금계산서 발행(전자서명) 시점에 자동으로 부여</p>
			 *
			 */
			ntsApproveNumber: string;
		};
		B2bTaxInvoiceCompany: {
			/**
			 * 사업자등록번호
			 * @description <ul>
			 *     <li>를 제외한 10자리</li>
			 *     </ul>
			 *
			 */
			brn: string;
			/**
			 * 종사업자 식별 번호
			 * @description <p>4자리 고정</p>
			 *
			 */
			taxRegistrationId?: string;
			/**
			 * 상호명
			 * @description <p>최대 200자</p>
			 *
			 */
			name?: string;
			/**
			 * 대표자 성명
			 * @description <p>최대 100자</p>
			 *
			 */
			ceoName?: string;
			/**
			 * 주소
			 * @description <p>최대 300자</p>
			 *
			 */
			address?: string;
			/**
			 * 업태
			 * @description <p>최대 100자</p>
			 *
			 */
			businessType?: string;
			/**
			 * 종목
			 * @description <p>최대 100자</p>
			 *
			 */
			businessClass?: string;
			/** 담당자 */
			contact?: components["schemas"]["B2bTaxInvoiceContact"];
		};
		/**
		 * 세금계산서 담당자
		 * @description <p>세금계산서 담당자</p>
		 *
		 */
		B2bTaxInvoiceContact: {
			/** 성명 */
			name?: string;
			/** 부서 */
			department?: string;
			/** 전화번호 */
			phoneNumber?: string;
			/** 휴대전화번호 */
			mobilePhoneNumber?: string;
			/** 이메일 */
			email?: string;
		};
		/**
		 * 문서번호 유형
		 * @description <p>문서번호 유형</p>
		 *
		 * @enum {string}
		 */
		B2bTaxInvoiceDocumentKeyType: "RECIPIENT" | "SUPPLIER";
		/**
		 * 세금계산서 생성 요청 정보
		 * @description <p>세금계산서 생성 요청 정보</p>
		 *
		 */
		B2bTaxInvoiceInput: {
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 권
			 * Format: int32
			 */
			bookVolume?: number;
			/**
			 * 호
			 * Format: int32
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks?: string[];
			/**
			 * 공급자 문서번호
			 * @description <p>영문 대소문자, 숫자, 특수문자('-','_')만 이용 가능</p>
			 *
			 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/**
			 * 공급받는자 문서번호
			 * @description <p>영문 대소문자, 숫자, 특수문자('-','_')만 이용 가능</p>
			 *
			 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/**
			 * 문자 전송 여부
			 * @description <p>공급자 담당자 휴대폰번호 {supplier.contact.mobile_phone_number} 값으로 문자 전송 전송시 포인트 차감되며, 실패시 환불 처리 기본값은 false</p>
			 *
			 */
			sendSms?: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items?: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts?: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
		};
		B2bTaxInvoiceIssuanceCancelled: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "ISSUANCE_CANCELLED";
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 책번호 - 권
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookVolume?: number;
			/**
			 * 책번호 - 호
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks: string[];
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 문자 전송 여부 */
			sendSms: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
			/**
			 * 발행 일시
			 * Format: date-time
			 */
			issuedAt: string;
			/**
			 * 국세청 승인번호
			 * @description <p>세금계산서 발행(전자서명) 시점에 자동으로 부여</p>
			 *
			 */
			ntsApproveNumber: string;
			/** 공급받는자 영업 상태 */
			recipientBusinessStatus?: components["schemas"]["B2bCompanyStateBusinessStatus"];
			/**
			 * 공급받는자 휴폐업일자
			 * @description <p>상태가 CLOSED, SUSPENDED 상태인 경우에만 결과값 반환</p>
			 *
			 */
			recipientClosedSuspendedDate?: string;
		};
		B2bTaxInvoiceIssued: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "ISSUED";
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 책번호 - 권
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookVolume?: number;
			/**
			 * 책번호 - 호
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks: string[];
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 문자 전송 여부 */
			sendSms: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
			/**
			 * 발행 일시
			 * Format: date-time
			 */
			issuedAt: string;
			/**
			 * 국세청 승인번호
			 * @description <p>세금계산서 발행(전자서명) 시점에 자동으로 부여</p>
			 *
			 */
			ntsApproveNumber: string;
		};
		/**
		 * 품목
		 * @description <p>품목</p>
		 *
		 */
		B2bTaxInvoiceItem: {
			/**
			 * 결제일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			purchaseDate?: string;
			/**
			 * 품명
			 * @description <p>최대 100자</p>
			 *
			 */
			name?: string;
			/**
			 * 규격
			 * @description <p>최대 100자</p>
			 *
			 */
			spec?: string;
			/**
			 * 수량
			 * Format: int64
			 * @description <p>입력 범위 : -99999999.99 ~ 999999999.99, 10^-quantityScale 단위로 치환됨</p>
			 *
			 */
			quantity?: number;
			/**
			 * 수량 단위
			 * Format: int32
			 * @description <p>입력 범위 : 0 ~ 2, 기본값: 0</p>
			 *
			 */
			quantityScale?: number;
			/**
			 * 단가
			 * Format: int64
			 * @description <p>입력 범위 : -99999999999999.99 ~ 999999999999999.99</p>
			 *
			 */
			unitCostAmount?: number;
			/**
			 * 단가 단위
			 * Format: int32
			 * @description <p>입력 범위 : 0 ~ 2, 기본값: 0</p>
			 *
			 */
			unitCostAmountScale?: number;
			/**
			 * 공급가액
			 * Format: int64
			 */
			supplyCostAmount?: number;
			/**
			 * 세액
			 * Format: int64
			 */
			taxAmount?: number;
			/** 비고 */
			remark?: string;
		};
		/**
		 * 수정 사유
		 * @description <p>수정 사유</p>
		 *
		 * @enum {string}
		 */
		B2bTaxInvoiceModificationType:
			| "CANCELLATION_OF_CONTRACT"
			| "CHANGE_IN_SUPPLY_COST"
			| "CORRECTION_OF_ENTRY_ERRORS"
			| "DUPLICATE_ISSUANCE_DUE_TO_ERROR"
			| "POST_ISSUANCE_LOCAL_LETTER_OF_CREDIT"
			| "RETURN";
		/**
		 * 세금계산서에 공급받는자 문서 번호가 기입되지 않은 경우
		 * @description <p>세금계산서에 공급받는자 문서 번호가 기입되지 않은 경우</p>
		 *
		 */
		B2bTaxInvoiceNoRecipientDocumentKeyError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_TAX_INVOICE_NO_RECIPIENT_DOCUMENT_KEY";
			message?: string;
		};
		/**
		 * 세금계산서에 공급자 문서 번호가 기입되지 않은 경우
		 * @description <p>세금계산서에 공급자 문서 번호가 기입되지 않은 경우</p>
		 *
		 */
		B2bTaxInvoiceNoSupplierDocumentKeyError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_TAX_INVOICE_NO_SUPPLIER_DOCUMENT_KEY";
			message?: string;
		};
		/**
		 * 세금계산서가 삭제 가능한 상태가 아닌 경우
		 * @description <p>세금계산서가 삭제 가능한 상태가 아닌 경우</p>
		 *     <p>삭제 가능한 상태는 <code>REGISTERED</code>, <code>ISSUE_REFUSED</code>, <code>REQUEST_CANCELLED_BY_RECIPIENT</code>, <code>ISSUE_CANCELLED_BY_SUPPLIER</code>, <code>SENDING_FAILED</code> 입니다.</p>
		 *
		 */
		B2bTaxInvoiceNonDeletableStatusError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_TAX_INVOICE_NON_DELETABLE_STATUS";
			message?: string;
		};
		/**
		 * 세금계산서가 존재하지 않은 경우
		 * @description <p>세금계산서가 존재하지 않은 경우</p>
		 *
		 */
		B2bTaxInvoiceNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_TAX_INVOICE_NOT_FOUND";
			message?: string;
		};
		/**
		 * 세금계산서가 발행된(ISSUED) 상태가 아닌 경우
		 * @description <p>세금계산서가 발행된(ISSUED) 상태가 아닌 경우</p>
		 *
		 */
		B2bTaxInvoiceNotIssuedStatusError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_TAX_INVOICE_NOT_ISSUED_STATUS";
			message?: string;
		};
		/**
		 * 세금계산서가 임시저장 상태가 아닌 경우
		 * @description <p>세금계산서가 임시저장 상태가 아닌 경우</p>
		 *
		 */
		B2bTaxInvoiceNotRegisteredStatusError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_TAX_INVOICE_NOT_REGISTERED_STATUS";
			message?: string;
		};
		/**
		 * 세금계산서가 역발행 대기 상태가 아닌 경우
		 * @description <p>세금계산서가 역발행 대기 상태가 아닌 경우</p>
		 *
		 */
		B2bTaxInvoiceNotRequestedStatusError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "B2B_TAX_INVOICE_NOT_REQUESTED_STATUS";
			message?: string;
		};
		/**
		 * 영수/청구
		 * @description <p>영수/청구</p>
		 *
		 * @enum {string}
		 */
		B2bTaxInvoicePurposeType: "INVOICE" | "NONE" | "RECEIPT";
		B2bTaxInvoiceRegistered: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "REGISTERED";
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 책번호 - 권
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookVolume?: number;
			/**
			 * 책번호 - 호
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks: string[];
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 문자 전송 여부 */
			sendSms: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
		};
		B2bTaxInvoiceRequestCancelled: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "REQUEST_CANCELLED";
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 책번호 - 권
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookVolume?: number;
			/**
			 * 책번호 - 호
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks: string[];
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 문자 전송 여부 */
			sendSms: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
		};
		B2bTaxInvoiceRequestRefused: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "ISSUANCE_REFUSED";
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 책번호 - 권
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookVolume?: number;
			/**
			 * 책번호 - 호
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks: string[];
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 문자 전송 여부 */
			sendSms: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
		};
		B2bTaxInvoiceRequested: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "REQUESTED";
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 책번호 - 권
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookVolume?: number;
			/**
			 * 책번호 - 호
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks: string[];
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 문자 전송 여부 */
			sendSms: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
		};
		B2bTaxInvoiceSending: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "SENDING";
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 책번호 - 권
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookVolume?: number;
			/**
			 * 책번호 - 호
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks: string[];
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 문자 전송 여부 */
			sendSms: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
			/**
			 * 발행 일시
			 * Format: date-time
			 */
			issuedAt: string;
			/**
			 * 국세청 승인번호
			 * @description <p>세금계산서 발행(전자서명) 시점에 자동으로 부여</p>
			 *
			 */
			ntsApproveNumber: string;
			/**
			 * 국세청 전송 일시
			 * Format: date-time
			 */
			ntsSentAt: string;
		};
		B2bTaxInvoiceSendingCompleted: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "SENDING_COMPLETED";
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 책번호 - 권
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookVolume?: number;
			/**
			 * 책번호 - 호
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks: string[];
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 문자 전송 여부 */
			sendSms: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
			/**
			 * 발행 일시
			 * Format: date-time
			 */
			issuedAt: string;
			/**
			 * 국세청 승인번호
			 * @description <p>세금계산서 발행(전자서명) 시점에 자동으로 부여</p>
			 *
			 */
			ntsApproveNumber: string;
			/**
			 * 국세청 전송 일시
			 * Format: date-time
			 */
			ntsSentAt: string;
			/** 국세청 전송 결과 */
			ntsResult?: string;
			/**
			 * 국세청 결과 코드
			 * @description <p>국세청 발급 결과 코드로 영문 3자리 + 숫자 3자리로 구성됨</p>
			 *
			 */
			ntsResultCode?: string;
			/**
			 * 국세청 결과 수신 일시
			 * Format: date-time
			 */
			ntsResultReceivedAt: string;
		};
		B2bTaxInvoiceSendingFailed: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "SENDING_FAILED";
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 책번호 - 권
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookVolume?: number;
			/**
			 * 책번호 - 호
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks: string[];
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 문자 전송 여부 */
			sendSms: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
			/**
			 * 발행 일시
			 * Format: date-time
			 */
			issuedAt: string;
			/**
			 * 국세청 승인번호
			 * @description <p>세금계산서 발행(전자서명) 시점에 자동으로 부여</p>
			 *
			 */
			ntsApproveNumber: string;
			/**
			 * 국세청 전송 일시
			 * Format: date-time
			 */
			ntsSentAt: string;
			/** 국세청 전송 결과 */
			ntsResult?: string;
			/**
			 * 국세청 결과 코드
			 * @description <p>국세청 발급 결과 코드로 영문 3자리 + 숫자 3자리로 구성됨</p>
			 *
			 */
			ntsResultCode?: string;
			/**
			 * 국세청 결과 수신 일시
			 * Format: date-time
			 */
			ntsResultReceivedAt: string;
		};
		/** @enum {string} */
		B2bTaxInvoiceStatus:
			| "BEFORE_SENDING"
			| "ISSUANCE_CANCELLED_BY_SUPPLIER"
			| "ISSUED"
			| "REGISTERED"
			| "REQUESTED"
			| "REQUEST_CANCELLED_BY_RECIPIENT"
			| "REQUEST_REFUSED"
			| "SENDING"
			| "SENDING_COMPLETED"
			| "SENDING_FAILED"
			| "WAITING_SENDING";
		/**
		 * 세금계산서 요약
		 * @description <p>세금계산서 요약</p>
		 *
		 */
		B2bTaxInvoiceSummary: {
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/** 공급자 사업자등록번호 */
			supplierBrn: string;
			/** 공급자 상호 */
			supplierName: string;
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급받는자 사업자등록번호 */
			recipientBrn: string;
			/** 공급받는자 상호 */
			recipientName: string;
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 영업 상태 */
			recipientBusinessStatus?: components["schemas"]["B2bCompanyStateBusinessStatus"];
			/**
			 * 공급받는자 휴폐업일자
			 * @description <p>상태가 CLOSED, SUSPENDED 상태인 경우에만 결과값 반환</p>
			 *
			 */
			recipientClosedSuspendedDate?: string;
			/**
			 * 발행 일시
			 * Format: date-time
			 */
			issuedAt?: string;
			/**
			 * 개봉 일시
			 * Format: date-time
			 */
			openedAt?: string;
			/** 상태 */
			status: components["schemas"]["B2bTaxInvoiceStatus"];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
			/**
			 * 국세청 승인번호
			 * @description <p>세금계산서 발행(전자서명) 시점에 자동으로 부여</p>
			 *
			 */
			ntsApproveNumber?: string;
			/** 국세청 전송 결과 */
			ntsResult?: string;
			/**
			 * 국세청 전송 일시
			 * Format: date-time
			 */
			ntsSentAt?: string;
			/**
			 * 국세청 결과 수신 일시
			 * Format: date-time
			 */
			ntsResultReceivedAt?: string;
			/**
			 * 국세청 결과 코드
			 * @description <p>국세청 발급 결과 코드로 영문 3자리 + 숫자 3자리로 구성됨</p>
			 *
			 */
			ntsResultCode?: string;
		};
		B2bTaxInvoiceWaitingSending: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "WAITING_SENDING";
			/** 과세 유형 */
			taxType: components["schemas"]["B2bTaxType"];
			/** 일련번호 */
			serialNum?: string;
			/**
			 * 책번호 - 권
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookVolume?: number;
			/**
			 * 책번호 - 호
			 * Format: int32
			 * @description <p>입력 범위(4자리) : 0 ~ 9999</p>
			 *
			 */
			bookIssue?: number;
			/**
			 * 작성일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			writeDate: string;
			/** 영수/청구 */
			purposeType: components["schemas"]["B2bTaxInvoicePurposeType"];
			/**
			 * 공급가액 합계
			 * Format: int64
			 */
			supplyCostTotalAmount: number;
			/**
			 * 세액 합계
			 * Format: int64
			 */
			taxTotalAmount: number;
			/**
			 * 합계 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 현금
			 * Format: int64
			 */
			cashAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			checkAmount?: number;
			/**
			 * 외상
			 * Format: int64
			 */
			creditAmount?: number;
			/**
			 * 수표
			 * Format: int64
			 */
			noteAmount?: number;
			/**
			 * 비고
			 * @description <p>최대 3개</p>
			 *
			 */
			remarks: string[];
			/** 공급자 문서번호 */
			supplierDocumentKey?: string;
			/** 공급자 */
			supplier: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 공급받는자 문서번호 */
			recipientDocumentKey?: string;
			/** 공급받는자 */
			recipient: components["schemas"]["B2bTaxInvoiceCompany"];
			/** 문자 전송 여부 */
			sendSms: boolean;
			/** 수정 사유 기재 */
			modification?: components["schemas"]["B2bModification"];
			/**
			 * 품목
			 * @description <p>최대 99개</p>
			 *
			 */
			items: components["schemas"]["B2bTaxInvoiceItem"][];
			/**
			 * 추가 담당자
			 * @description <p>최대 3개</p>
			 *
			 */
			contacts: components["schemas"]["B2bTaxInvoiceAdditionalContact"][];
			/**
			 * 상태 변경 일시
			 * Format: date-time
			 */
			statusUpdatedAt: string;
			/**
			 * 발행 일시
			 * Format: date-time
			 */
			issuedAt: string;
			/**
			 * 국세청 승인번호
			 * @description <p>세금계산서 발행(전자서명) 시점에 자동으로 부여</p>
			 *
			 */
			ntsApproveNumber: string;
		};
		/**
		 * 과세 유형
		 * @description <p>과세 유형</p>
		 *
		 * @enum {string}
		 */
		B2bTaxType: "FREE" | "TAXABLE" | "ZERO_RATED";
		/**
		 * 은행
		 * @description <p>은행</p>
		 *
		 * @enum {string}
		 */
		Bank:
			| "BANK_OF_AMERICA"
			| "BANK_OF_CHINA"
			| "BANK_OF_KOREA"
			| "BNP_PARIBAS"
			| "BOCOM"
			| "BOOKOOK_SECURITIES"
			| "BUSAN"
			| "CAPE_SECURITIES"
			| "CCB"
			| "CITI"
			| "DAEGU"
			| "DAISHIN_SECURITIES"
			| "DAOL_SECURITIES"
			| "DB_SECURITIES"
			| "DEUTSCHE"
			| "EBEST_SECURITIES"
			| "EUGENE_SECURITIES"
			| "HANA"
			| "HANA_SECURITIES"
			| "HANHWA_SECURITIES"
			| "HI_SECURITIES"
			| "HSBC"
			| "HYUNDAI_MOTOR_SECURITIES"
			| "IBK"
			| "ICBC"
			| "JEJU"
			| "JEONBUK"
			| "JPMC"
			| "KAKAO"
			| "KAKAO_PAY_SECURITIES"
			| "KB_SECURITIES"
			| "KCIS"
			| "KDB"
			| "KEXIM"
			| "KFCC"
			| "KIBO"
			| "KIWOOM_SECURITIES"
			| "KODIT"
			| "KOOKMIN"
			| "KOREA_FOSS_SECURITIES"
			| "KOREA_SECURITIES"
			| "KWANGJU"
			| "KYOBO_SECURITIES"
			| "KYONGNAM"
			| "K_BANK"
			| "LOCAL_NONGHYUP"
			| "MERITZ_SECURITIES"
			| "MIRAE_ASSET_SECURITIES"
			| "MISC_FOREIGN"
			| "MIZUHO"
			| "MORGAN_STANLEY"
			| "MUFG"
			| "NFCF"
			| "NH_SECURITIES"
			| "NONGHYUP"
			| "POST"
			| "SAMSUNG_SECURITIES"
			| "SAVINGS_BANK"
			| "SGI"
			| "SHINHAN"
			| "SHINHAN_SECURITIES"
			| "SHINHYUP"
			| "SHINYOUNG_SECURITIES"
			| "SK_SECURITIES"
			| "STANDARD_CHARTERED"
			| "SUHYUP"
			| "TOSS"
			| "TOSS_SECURITIES"
			| "UOB"
			| "WOORI"
			| "YUANTA_SECURITIES";
		/**
		 * 배송 정보 등록 전
		 * @description <p>배송 정보 등록 전</p>
		 *
		 */
		BeforeRegisteredPaymentEscrow: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "BEFORE_REGISTERED";
		};
		/**
		 * 빌링키가 이미 삭제된 경우
		 * @description <p>빌링키가 이미 삭제된 경우</p>
		 *
		 */
		BillingKeyAlreadyDeletedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "BILLING_KEY_ALREADY_DELETED";
			message?: string;
		};
		/**
		 * 발급 실패 상세 정보
		 * @description <p>발급 실패 상세 정보</p>
		 *
		 */
		BillingKeyFailure: {
			/** 실패 사유 */
			message?: string;
			/** PG사 실패 코드 */
			pgCode?: string;
			/** PG사 실패 사유 */
			pgMessage?: string;
			/**
			 * 실패 시점
			 * Format: date-time
			 */
			failedAt: string;
		};
		/**
		 * 빌링키 다건 조회를 위한 입력 정보
		 * @description <p>빌링키 다건 조회를 위한 입력 정보</p>
		 *
		 */
		BillingKeyFilterInput: {
			/**
			 * 상점 아이디
			 * @description <p>Merchant 사용자만 사용가능하며, 지정되지 않은 경우 고객사 전체 빌링키를 조회합니다.</p>
			 *
			 */
			storeId?: string;
			/** 조회 기준 시점 유형 */
			timeRangeField?: components["schemas"]["BillingKeyTimeRangeField"];
			/**
			 * 조회 기준 시점 범위의 시작
			 * Format: date-time
			 * @description <p>값을 입력하지 않으면 end의 90일 전으로 설정됩니다.</p>
			 *
			 */
			from?: string;
			/**
			 * 조회 기준 시점 범위의 끝
			 * Format: date-time
			 * @description <p>값을 입력하지 않으면 현재 시점으로 설정됩니다.</p>
			 *
			 */
			until?: string;
			/**
			 * 빌링키 상태 리스트
			 * @description <p>값을 입력하지 않으면 빌링키 상태 필터링이 적용되지 않습니다.</p>
			 *
			 */
			status?: components["schemas"]["BillingKeyStatus"][];
			/**
			 * 채널 그룹 아이디 리스트
			 * @description <p>값을 입력하지 않으면 스마트 라우팅 그룹 아이디 필터링이 적용되지 않습니다.</p>
			 *
			 */
			channelGroupIds?: string[];
			/** 고객 ID */
			customerId?: string;
			/** 플랫폼 유형 */
			platformType?: components["schemas"]["PaymentClientType"];
			/** 통합 검색 필터 */
			textSearch?: components["schemas"]["BillingKeyTextSearch"];
			/**
			 * PG사 결제 모듈 리스트
			 * @description <p>값을 입력하지 않으면 PG사 결제 모듈 필터링이 적용되지 않습니다.</p>
			 *
			 */
			pgProviders?: components["schemas"]["PgProvider"][];
			/**
			 * PG사 리스트
			 * @description <p>값을 입력하지 않으면 PG사 필터링이 적용되지 않습니다.</p>
			 *
			 */
			pgCompanies?: components["schemas"]["PgCompany"][];
			/**
			 * 결제수단 리스트
			 * @description <p>값을 입력하지 않으면 결제수단 필터링이 적용되지 않습니다.</p>
			 *
			 */
			methods?: components["schemas"]["BillingKeyPaymentMethodType"][];
			/** 포트원 버전 */
			version?: components["schemas"]["PortOneVersion"];
		};
		/**
		 * 빌링키 정보
		 * @description <p>빌링키 정보</p>
		 *
		 */
		BillingKeyInfo:
			| components["schemas"]["DeletedBillingKeyInfo"]
			| components["schemas"]["IssuedBillingKeyInfo"];
		BillingKeyInfoSummary: {
			/** 발급된 빌링키 */
			billingKey: string;
			/** 발급된 채널 */
			channels?: components["schemas"]["SelectedChannel"][];
			/**
			 * 빌링크 발급 완료 시점
			 * Format: date-time
			 */
			issuedAt: string;
		};
		/**
		 * 빌링키가 존재하지 않는 경우
		 * @description <p>빌링키가 존재하지 않는 경우</p>
		 *
		 */
		BillingKeyNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "BILLING_KEY_NOT_FOUND";
			message?: string;
		};
		BillingKeyNotIssuedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "BILLING_KEY_NOT_ISSUED";
			message?: string;
		};
		/**
		 * 빌링키 결제 요청 입력 정보
		 * @description <p>빌링키 결제 요청 입력 정보</p>
		 *
		 */
		BillingKeyPaymentInput: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/** 빌링키 결제에 사용할 빌링키 */
			billingKey: string;
			/**
			 * 채널 키
			 * @description <p>다수 채널에 대해 발급된 빌링키에 대해, 결제 채널을 특정하고 싶을 때 명시</p>
			 *
			 */
			channelKey?: string;
			/** 주문명 */
			orderName: string;
			/** 고객 정보 */
			customer?: components["schemas"]["CustomerInput"];
			/** 사용자 지정 데이터 */
			customData?: string;
			/** 결제 금액 세부 입력 정보 */
			amount: components["schemas"]["PaymentAmountInput"];
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/**
			 * 할부 개월 수
			 * Format: int32
			 */
			installmentMonth?: number;
			/** 무이자 할부 이자를 고객사가 부담할지 여부 */
			useFreeInterestFromMerchant?: boolean;
			/** 카드 포인트 사용 여부 */
			useCardPoint?: boolean;
			/** 현금영수증 정보 */
			cashReceipt?: components["schemas"]["CashReceiptInput"];
			/** 결제 국가 */
			country?: components["schemas"]["Country"];
			/**
			 * 웹훅 주소
			 * @description <p>결제 승인/실패 시 요청을 받을 웹훅 주소입니다.
			 *     상점에 설정되어 있는 값보다 우선적으로 적용됩니다.
			 *     입력된 값이 없을 경우에는 빈 배열로 해석됩니다.</p>
			 *
			 */
			noticeUrls?: string[];
			/**
			 * 상품 정보
			 * @description <p>입력된 값이 없을 경우에는 빈 배열로 해석됩니다.</p>
			 *
			 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 상품 개수
			 * Format: int32
			 */
			productCount?: number;
			/** 상품 유형 */
			productType?: components["schemas"]["PaymentProductType"];
			/** 배송지 주소 */
			shippingAddress?: components["schemas"]["SeparatedAddressInput"];
			/** PG사별 추가 파라미터 ("PG사별 연동 가이드" 참고) */
			bypass?: Record<string, never>;
		};
		/**
		 * 빌링키 발급 수단 정보
		 * @description <p>빌링키 발급 수단 정보</p>
		 *
		 */
		BillingKeyPaymentMethod:
			| components["schemas"]["BillingKeyPaymentMethodCard"]
			| components["schemas"]["BillingKeyPaymentMethodEasyPay"]
			| components["schemas"]["BillingKeyPaymentMethodMobile"]
			| components["schemas"]["BillingKeyPaymentMethodPaypal"]
			| components["schemas"]["BillingKeyPaymentMethodTransfer"];
		/**
		 * 카드 정보
		 * @description <p>카드 정보</p>
		 *
		 */
		BillingKeyPaymentMethodCard: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "BillingKeyPaymentMethodCard";
			/** 카드 상세 정보 */
			card?: components["schemas"]["Card"];
		};
		/**
		 * 간편 결제 정보
		 * @description <p>간편 결제 정보</p>
		 *
		 */
		BillingKeyPaymentMethodEasyPay: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "BillingKeyPaymentMethodEasyPay";
			/** 간편 결제 PG사 */
			provider?: components["schemas"]["EasyPayProvider"];
			/** 간편 결제 수단 */
			method?: components["schemas"]["BillingKeyPaymentMethodEasyPayMethod"];
		};
		/**
		 * 충전식 포인트 결제 정보
		 * @description <p>충전식 포인트 결제 정보</p>
		 *
		 */
		BillingKeyPaymentMethodEasyPayCharge: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "BillingKeyPaymentMethodEasyPayCharge";
		};
		/**
		 * 간편 결제 수단
		 * @description <p>간편 결제 수단</p>
		 *
		 */
		BillingKeyPaymentMethodEasyPayMethod:
			| components["schemas"]["BillingKeyPaymentMethodCard"]
			| components["schemas"]["BillingKeyPaymentMethodEasyPayCharge"]
			| components["schemas"]["BillingKeyPaymentMethodTransfer"];
		/**
		 * 모바일 정보
		 * @description <p>모바일 정보</p>
		 *
		 */
		BillingKeyPaymentMethodMobile: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "BillingKeyPaymentMethodMobile";
			/** 전화번호 */
			phoneNumber?: string;
		};
		/**
		 * 페이팔 정보
		 * @description <p>페이팔 정보</p>
		 *
		 */
		BillingKeyPaymentMethodPaypal: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "BillingKeyPaymentMethodPaypal";
		};
		/**
		 * 계좌이체 정보
		 * @description <p>계좌이체 정보</p>
		 *
		 */
		BillingKeyPaymentMethodTransfer: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "BillingKeyPaymentMethodTransfer";
			/** 표준 은행 코드 */
			bank?: components["schemas"]["Bank"];
			/** 계좌번호 */
			accountNumber?: string;
		};
		/**
		 * 빌링키 결제 수단
		 * @description <p>빌링키 결제 수단</p>
		 *
		 * @enum {string}
		 */
		BillingKeyPaymentMethodType: "CARD" | "EASY_PAY" | "MOBILE" | "TRANSFER";
		/**
		 * 빌링키 결제 완료된 결제 건 요약 정보
		 * @description <p>빌링키 결제 완료된 결제 건 요약 정보</p>
		 *
		 */
		BillingKeyPaymentSummary: {
			/** PG사 결제 아이디 */
			pgTxId: string;
			/**
			 * 결제 완료 시점
			 * Format: date-time
			 */
			paidAt: string;
		};
		/**
		 * 빌링키 정렬 기준
		 * @description <p>빌링키 정렬 기준</p>
		 *
		 * @enum {string}
		 */
		BillingKeySortBy:
			| "DELETED_AT"
			| "ISSUED_AT"
			| "REQUESTED_AT"
			| "STATUS_TIMESTAMP";
		/**
		 * 빌링키 다건 조회 시 정렬 조건
		 * @description <p>빌링키 다건 조회 시 정렬 조건</p>
		 *
		 */
		BillingKeySortInput: {
			/**
			 * 정렬 기준 필드
			 * @description <p>어떤 필드를 기준으로 정렬할 지 결정합니다. 비워서 보낼 경우, REQUESTED_AT이 기본값으로 설정됩니다.</p>
			 *
			 */
			by?: components["schemas"]["BillingKeySortBy"];
			/**
			 * 정렬 순서
			 * @description <p>어떤 순서로 정렬할 지 결정합니다. 비워서 보낼 경우, DESC(내림차순)가 기본값으로 설정됩니다.</p>
			 *
			 */
			order?: components["schemas"]["SortOrder"];
		};
		/**
		 * 빌링키 상태
		 * @description <p>빌링키 상태</p>
		 *
		 * @enum {string}
		 */
		BillingKeyStatus: "DELETED" | "ISSUED";
		/**
		 * 통합검색 입력 정보
		 * @description <p>통합검색 입력 정보</p>
		 *
		 */
		BillingKeyTextSearch: {
			field: components["schemas"]["BillingKeyTextSearchField"];
			value: string;
		};
		/**
		 * 통합검색 항목
		 * @description <p>통합검색 항목</p>
		 *
		 * @enum {string}
		 */
		BillingKeyTextSearchField:
			| "BILLING_KEY"
			| "CARD_BIN"
			| "CARD_NUMBER"
			| "CHANNEL_GROUP_NAME"
			| "CUSTOMER_ADDRESS"
			| "CUSTOMER_EMAIL"
			| "CUSTOMER_NAME"
			| "CUSTOMER_PHONE_NUMBER"
			| "CUSTOMER_ZIPCODE"
			| "PG_MERCHANT_ID"
			| "USER_AGENT";
		/**
		 * 빌링키 다건 조회 시, 시각 범위를 적용할 필드
		 * @description <p>빌링키 다건 조회 시, 시각 범위를 적용할 필드</p>
		 *
		 * @enum {string}
		 */
		BillingKeyTimeRangeField:
			| "DELETED_AT"
			| "ISSUED_AT"
			| "REQUESTED_AT"
			| "STATUS_TIMESTAMP";
		/**
		 * 결제 취소 금액이 취소 가능 금액을 초과한 경우
		 * @description <p>결제 취소 금액이 취소 가능 금액을 초과한 경우</p>
		 *
		 */
		CancelAmountExceedsCancellableAmountError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "CANCEL_AMOUNT_EXCEEDS_CANCELLABLE_AMOUNT";
			message?: string;
		};
		/**
		 * 세금계산서 역발행 취소 정보
		 * @description <p>세금계산서 역발행 취소 정보</p>
		 *
		 */
		CancelB2bTaxInvoiceIssuanceBody: {
			/** 사업자등록번호 */
			brn: string;
			/** 세금계산서 문서 번호 */
			documentKey: string;
			/**
			 * 문서 번호 유형
			 * @description <p>기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
			 *
			 */
			documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
			/** 메모 */
			memo?: string;
		};
		CancelB2bTaxInvoiceIssuanceError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNotIssuedStatusError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 세금계산서 역발행 요청 취소 정보
		 * @description <p>세금계산서 역발행 요청 취소 정보</p>
		 *
		 */
		CancelB2bTaxInvoiceRequestBody: {
			/** 사업자등록번호 */
			brn: string;
			/** 세금계산서 문서 번호 */
			documentKey: string;
			/**
			 * 문서 번호 유형
			 * @description <p>기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
			 *
			 */
			documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
			/** 메모 */
			memo?: string;
		};
		CancelB2bTaxInvoiceRequestError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNoRecipientDocumentKeyError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["B2bTaxInvoiceNotRequestedStatusError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		CancelCashReceiptError:
			| components["schemas"]["CashReceiptNotFoundError"]
			| components["schemas"]["CashReceiptNotIssuedError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 현금 영수증 취소 성공 응답
		 * @description <p>현금 영수증 취소 성공 응답</p>
		 *
		 */
		CancelCashReceiptResponse: {
			/**
			 * 취소 금액
			 * Format: int64
			 */
			cancelledAmount: number;
			/**
			 * 현금 영수증 취소 완료 시점
			 * Format: date-time
			 */
			cancelledAt: string;
		};
		/**
		 * 결제 취소 요청 입력 정보
		 * @description <p>결제 취소 요청 입력 정보</p>
		 *
		 */
		CancelPaymentBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/**
			 * 취소 총 금액
			 * Format: int64
			 * @description <p>값을 입력하지 않으면 전액 취소됩니다.</p>
			 *
			 */
			amount?: number;
			/**
			 * 취소 금액 중 면세 금액
			 * Format: int64
			 * @description <p>값을 입력하지 않으면 전액 과세 취소됩니다.</p>
			 *
			 */
			taxFreeAmount?: number;
			/**
			 * 취소 금액 중 부가세액
			 * Format: int64
			 * @description <p>값을 입력하지 않으면 자동 계산됩니다.</p>
			 *
			 */
			vatAmount?: number;
			/** 취소 사유 */
			reason: string;
			/**
			 * 취소 요청자
			 * @description <p>고객에 의한 취소일 경우 Customer, 관리자에 의한 취소일 경우 Admin으로 입력합니다.</p>
			 *
			 */
			requester?: components["schemas"]["CancelRequester"];
			/**
			 * 결제 건의 취소 가능 잔액
			 * Format: int64
			 * @description <p>본 취소 요청 이전의 취소 가능 잔액으로써, 값을 입력하면 잔액이 일치하는 경우에만 취소가 진행됩니다. 값을 입력하지 않으면 별도의 검증 처리를 수행하지 않습니다.</p>
			 *
			 */
			currentCancellableAmount?: number;
			/**
			 * 환불 계좌
			 * @description <p>계좌 환불일 경우 입력합니다. 계좌 환불이 필요한 경우는 가상계좌 환불, 휴대폰 익월 환불 등이 있습니다.</p>
			 *
			 */
			refundAccount?: components["schemas"]["CancelPaymentBodyRefundAccount"];
		};
		/**
		 * 고객 정보 입력 형식
		 * @description <p>고객 정보 입력 형식</p>
		 *
		 */
		CancelPaymentBodyRefundAccount: {
			/** 은행 */
			bank: components["schemas"]["Bank"];
			/** 계좌번호 */
			number: string;
			/** 예금주 */
			holderName: string;
			/** 예금주 연락처 - 스마트로 가상계좌 결제인 경우에 필요합니다. */
			holderPhoneNumber?: string;
		};
		CancelPaymentError:
			| components["schemas"]["CancelAmountExceedsCancellableAmountError"]
			| components["schemas"]["CancelTaxAmountExceedsCancellableTaxAmountError"]
			| components["schemas"]["CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError"]
			| components["schemas"]["CancellableAmountConsistencyBrokenError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentAlreadyCancelledError"]
			| components["schemas"]["PaymentNotFoundError"]
			| components["schemas"]["PaymentNotPaidError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["SumOfPartsExceedsCancelAmountError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 결제 취소 성공 응답
		 * @description <p>결제 취소 성공 응답</p>
		 *
		 */
		CancelPaymentResponse: {
			/** 결체 취소 내역 */
			cancellation: components["schemas"]["PaymentCancellation"];
		};
		CancelPlatformAdditionalFeePolicyScheduleError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAdditionalFeePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 추가 수수료 정책 예약 업데이트 취소 성공 응답
		 * @description <p>추가 수수료 정책 예약 업데이트 취소 성공 응답</p>
		 *
		 */
		CancelPlatformAdditionalFeePolicyScheduleResponse: Record<string, never>;
		CancelPlatformContractScheduleError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 계약 예약 업데이트 취소 성공 응답
		 * @description <p>계약 예약 업데이트 취소 성공 응답</p>
		 *
		 */
		CancelPlatformContractScheduleResponse: Record<string, never>;
		CancelPlatformDiscountSharePolicyScheduleError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformDiscountSharePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 할인 분담 정책 예약 업데이트 취소 성공 응답
		 * @description <p>할인 분담 정책 예약 업데이트 취소 성공 응답</p>
		 *
		 */
		CancelPlatformDiscountSharePolicyScheduleResponse: Record<string, never>;
		CancelPlatformPartnerScheduleError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 파트너 예약 업데이트 취소 성공 응답
		 * @description <p>파트너 예약 업데이트 취소 성공 응답</p>
		 *
		 */
		CancelPlatformPartnerScheduleResponse: Record<string, never>;
		/** @enum {string} */
		CancelRequester: "ADMIN" | "CUSTOMER";
		/**
		 * 취소 과세 금액이 취소 가능한 과세 금액을 초과한 경우
		 * @description <p>취소 과세 금액이 취소 가능한 과세 금액을 초과한 경우</p>
		 *
		 */
		CancelTaxAmountExceedsCancellableTaxAmountError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "CANCEL_TAX_AMOUNT_EXCEEDS_CANCELLABLE_TAX_AMOUNT";
			message?: string;
		};
		/**
		 * 취소 면세 금액이 취소 가능한 면세 금액을 초과한 경우
		 * @description <p>취소 면세 금액이 취소 가능한 면세 금액을 초과한 경우</p>
		 *
		 */
		CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "CANCEL_TAX_FREE_AMOUNT_EXCEEDS_CANCELLABLE_TAX_FREE_AMOUNT";
			message?: string;
		};
		/**
		 * 취소 가능 잔액 검증에 실패한 경우
		 * @description <p>취소 가능 잔액 검증에 실패한 경우</p>
		 *
		 */
		CancellableAmountConsistencyBrokenError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "CANCELLABLE_AMOUNT_CONSISTENCY_BROKEN";
			message?: string;
		};
		/**
		 * 발급 취소
		 * @description <p>발급 취소</p>
		 *
		 */
		CancelledCashReceipt: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "CANCELLED";
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제 건 아이디 */
			paymentId: string;
			/** 현금영수증 발급에 사용된 채널 */
			channel: components["schemas"]["SelectedChannel"];
			/**
			 * 결제 금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/**
			 * 부가세액
			 * Format: int64
			 */
			vatAmount?: number;
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 주문명 */
			orderName: string;
			/** 수동 발급 여부 */
			isManual: boolean;
			/** 현금영수증 유형 */
			type?: components["schemas"]["CashReceiptType"];
			/** PG사 현금영수증 아이디 */
			pgReceiptId?: string;
			/** 승인번호 */
			issueNumber: string;
			/** 현금영수증 URL */
			url?: string;
			/**
			 * 발급 시점
			 * Format: date-time
			 */
			issuedAt: string;
			/**
			 * 취소 시점
			 * Format: date-time
			 */
			cancelledAt: string;
		};
		/**
		 * 결제 취소 상태 건
		 * @description <p>결제 취소 상태 건</p>
		 *
		 */
		CancelledPayment: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "CANCELLED";
			/** 결제 건 아이디 */
			id: string;
			/**
			 * 결제 건 포트원 채번 아이디
			 * @description <p>V1 결제 건의 경우 imp_uid에 해당합니다.</p>
			 *
			 */
			transactionId: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제수단 정보 */
			method?: components["schemas"]["PaymentMethod"];
			/** 결제 채널 */
			channel: components["schemas"]["SelectedChannel"];
			/** 결제 채널 그룹 정보 */
			channelGroup?: components["schemas"]["ChannelGroupSummary"];
			/** 포트원 버전 */
			version: components["schemas"]["PortOneVersion"];
			/**
			 * 결제 예약 건 아이디
			 * @description <p>결제 예약을 이용한 경우에만 존재</p>
			 *
			 */
			scheduleId?: string;
			/**
			 * 결제 시 사용된 빌링키
			 * @description <p>빌링키 결제인 경우에만 존재</p>
			 *
			 */
			billingKey?: string;
			/** 웹훅 발송 내역 */
			webhooks?: components["schemas"]["PaymentWebhook"][];
			/**
			 * 결제 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
			/**
			 * 업데이트 시점
			 * Format: date-time
			 */
			updatedAt: string;
			/**
			 * 상태 업데이트 시점
			 * Format: date-time
			 */
			statusChangedAt: string;
			/** 주문명 */
			orderName: string;
			/** 결제 금액 관련 세부 정보 */
			amount: components["schemas"]["PaymentAmount"];
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 구매자 정보 */
			customer: components["schemas"]["Customer"];
			/** 프로모션 아이디 */
			promotionId?: string;
			/** 문화비 지출 여부 */
			isCulturalExpense?: boolean;
			/**
			 * 에스크로 결제 정보
			 * @description <p>에스크로 결제인 경우 존재합니다.</p>
			 *
			 */
			escrow?: components["schemas"]["PaymentEscrow"];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 상품 갯수
			 * Format: int32
			 */
			productCount?: number;
			/** 사용자 지정 데이터 */
			customData?: string;
			/** 국가 코드 */
			country?: components["schemas"]["Country"];
			/**
			 * 결제 완료 시점
			 * Format: date-time
			 */
			paidAt?: string;
			/** PG사 거래 아이디 */
			pgTxId?: string;
			/** 현금영수증 */
			cashReceipt?: components["schemas"]["PaymentCashReceipt"];
			/** 거래 영수증 URL */
			receiptUrl?: string;
			/** 결제 취소 내역 */
			cancellations: components["schemas"]["PaymentCancellation"][];
			/**
			 * 결제 취소 시점
			 * Format: date-time
			 */
			cancelledAt: string;
		};
		/**
		 * 취소된 현금영수증
		 * @description <p>취소된 현금영수증</p>
		 *
		 */
		CancelledPaymentCashReceipt: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "CANCELLED";
			/** 현금영수증 유형 */
			type?: components["schemas"]["CashReceiptType"];
			/** PG사 영수증 발급 아이디 */
			pgReceiptId?: string;
			/** 승인 번호 */
			issueNumber: string;
			/**
			 * 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 현금영수증 URL */
			url?: string;
			/**
			 * 발급 시점
			 * Format: date-time
			 */
			issuedAt: string;
			/**
			 * 취소 시점
			 * Format: date-time
			 */
			cancelledAt: string;
		};
		/**
		 * 거래 취소
		 * @description <p>거래 취소</p>
		 *
		 */
		CancelledPaymentEscrow: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "CANCELLED";
			/** 택배사 */
			company: string;
			/** 송장번호 */
			invoiceNumber: string;
			/**
			 * 발송 일시
			 * Format: date-time
			 */
			sentAt?: string;
			/**
			 * 배송등록 처리 일자
			 * Format: date-time
			 */
			appliedAt?: string;
		};
		/**
		 * 카드 상세 정보
		 * @description <p>카드 상세 정보</p>
		 *
		 */
		Card: {
			/** 발행사 코드 */
			publisher?: string;
			/** 발급사 코드 */
			issuer?: string;
			/** 카드 브랜드 */
			brand?: components["schemas"]["CardBrand"];
			/** 카드 유형 */
			type?: components["schemas"]["CardType"];
			/** 카드 소유주 유형 */
			ownerType?: components["schemas"]["CardOwnerType"];
			/** 카드 번호 앞 6자리 또는 8자리의 BIN (Bank Identification Number) */
			bin?: string;
			/** 카드 상품명 */
			name?: string;
			/** 마스킹된 카드 번호 */
			number?: string;
		};
		/**
		 * 카드 브랜드
		 * @description <p>카드 브랜드</p>
		 *
		 * @enum {string}
		 */
		CardBrand:
			| "AMEX"
			| "DINERS"
			| "JCB"
			| "LOCAL"
			| "MASTER"
			| "UNIONPAY"
			| "VISA";
		/**
		 * 카드사
		 * @description <p>카드사</p>
		 *
		 * @enum {string}
		 */
		CardCompany:
			| "BC_CARD"
			| "CITI_CARD"
			| "EPOST"
			| "GWANGJU_CARD"
			| "HANA_CARD"
			| "HYUNDAI_CARD"
			| "JEJU_CARD"
			| "JEONBUK_CARD"
			| "KAKAO_BANK"
			| "KFCC"
			| "KOOKMIN_CARD"
			| "KOREA_DEVELOPMENT_BANK"
			| "K_BANK"
			| "LOTTE_CARD"
			| "NH_CARD"
			| "SAMSUNG_CARD"
			| "SAVINGS_BANK_KOREA"
			| "SHINHAN_CARD"
			| "SHINHYUP"
			| "SUHYUP_CARD"
			| "TOSS_BANK"
			| "UNIDENTIFIED_GLOBAL_CARD"
			| "WOORI_CARD";
		/**
		 * 카드 인증 관련 정보
		 * @description <p>카드 인증 관련 정보</p>
		 *
		 */
		CardCredential: {
			/** 카드 번호 (숫자만) */
			number: string;
			/** 유효 기간 만료 연도 (2자리) */
			expiryYear: string;
			/** 유효 기간 만료 월 (2자리) */
			expiryMonth: string;
			/** 생년월일 (yyMMdd) 또는 사업자 등록 번호 (10자리, 숫자만) */
			birthOrBusinessRegistrationNumber?: string;
			/** 비밀번호 앞 2자리 */
			passwordTwoDigits?: string;
		};
		/**
		 * 카드 소유주 유형
		 * @description <p>카드 소유주 유형</p>
		 *
		 * @enum {string}
		 */
		CardOwnerType: "CORPORATE" | "PERSONAL";
		/**
		 * 카드 유형
		 * @description <p>카드 유형</p>
		 *
		 * @enum {string}
		 */
		CardType: "CREDIT" | "DEBIT" | "GIFT";
		/**
		 * 현금영수증 내역
		 * @description <p>현금영수증 내역</p>
		 *
		 */
		CashReceipt:
			| components["schemas"]["CancelledCashReceipt"]
			| components["schemas"]["IssueFailedCashReceipt"]
			| components["schemas"]["IssuedCashReceipt"];
		/**
		 * 현금영수증이 이미 발급된 경우
		 * @description <p>현금영수증이 이미 발급된 경우</p>
		 *
		 */
		CashReceiptAlreadyIssuedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "CASH_RECEIPT_ALREADY_ISSUED";
			message?: string;
		};
		/**
		 * 현금영수증 입력 정보
		 * @description <p>현금영수증 입력 정보</p>
		 *
		 */
		CashReceiptInput: {
			/** 현금영수증 유형 */
			type: components["schemas"]["CashReceiptInputType"];
			/**
			 * 사용자 식별 번호
			 * @description <p>미발행 유형 선택 시 입력하지 않습니다.</p>
			 *
			 */
			customerIdentityNumber?: string;
		};
		/**
		 * 입력 시 발급 유형
		 * @description <p>입력 시 발급 유형</p>
		 *
		 * @enum {string}
		 */
		CashReceiptInputType: "CORPORATE" | "NO_RECEIPT" | "PERSONAL";
		/**
		 * 현금영수증이 존재하지 않는 경우
		 * @description <p>현금영수증이 존재하지 않는 경우</p>
		 *
		 */
		CashReceiptNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "CASH_RECEIPT_NOT_FOUND";
			message?: string;
		};
		/**
		 * 현금영수증이 발급되지 않은 경우
		 * @description <p>현금영수증이 발급되지 않은 경우</p>
		 *
		 */
		CashReceiptNotIssuedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "CASH_RECEIPT_NOT_ISSUED";
			message?: string;
		};
		/**
		 * 현금영수증 내역
		 * @description <p>현금영수증 내역</p>
		 *
		 */
		CashReceiptSummary: {
			/** 발행 번호 */
			issueNumber: string;
			/** 현금 영수증 URL */
			url: string;
			/** PG사 현금영수증 아이디 */
			pgReceiptId: string;
		};
		/**
		 * 발급 유형
		 * @description <p>발급 유형</p>
		 *
		 * @enum {string}
		 */
		CashReceiptType: "CORPORATE" | "PERSONAL";
		/**
		 * 채널 정보
		 * @description <p>채널 정보</p>
		 *
		 */
		Channel: {
			/** 채널 아이디 */
			id: string;
			/** 채널명 */
			name: string;
			/** PG사 모듈 */
			pgProvider: components["schemas"]["PgProvider"];
			/** PG사 모듈에 해당하는 PG사 */
			pgCompany: components["schemas"]["PgCompany"];
			/** 채널 유형 */
			type: components["schemas"]["ChannelType"];
			/** PG사 상점 아이디 */
			pgMerchantId: string;
			/** 결제용 채널 여부 */
			isForPayment: boolean;
			/** 본인인증용 채널 여부 */
			isForIdentityVerification: boolean;
			/** 채널 키 */
			key: string;
		};
		/**
		 * 채널 그룹 정보
		 * @description <p>채널 그룹 정보</p>
		 *
		 */
		ChannelGroupSummary: {
			/** 채널 그룹 아이디 */
			id: string;
			/** 채널 그룹 이름 */
			name: string;
			/** 테스트 채널 그룹 여부 */
			isForTest: boolean;
		};
		/**
		 * 요청된 채널이 존재하지 않는 경우
		 * @description <p>요청된 채널이 존재하지 않는 경우</p>
		 *
		 */
		ChannelNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "CHANNEL_NOT_FOUND";
			message?: string;
		};
		/**
		 * 여러 채널을 지정한 요청에서, 채널 각각에서 오류가 발생한 경우
		 * @description <p>여러 채널을 지정한 요청에서, 채널 각각에서 오류가 발생한 경우</p>
		 *
		 */
		ChannelSpecificError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "CHANNEL_SPECIFIC";
			message?: string;
			failures: components["schemas"]["ChannelSpecificFailure"][];
			/** (결제, 본인인증 등에) 선택된 채널 정보 */
			succeededChannels: components["schemas"]["SelectedChannel"][];
		};
		ChannelSpecificFailure:
			| components["schemas"]["ChannelSpecificFailureInvalidRequest"]
			| components["schemas"]["ChannelSpecificFailurePgProvider"];
		/**
		 * 요청된 입력 정보가 유효하지 않은 경우
		 * @description <p>요청된 입력 정보가 유효하지 않은 경우</p>
		 *     <p>허가되지 않은 값, 올바르지 않은 형식의 요청 등이 모두 해당됩니다.</p>
		 *
		 */
		ChannelSpecificFailureInvalidRequest: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "INVALID_REQUEST";
			channel: components["schemas"]["SelectedChannel"];
			message?: string;
		};
		/**
		 * PG사에서 오류를 전달한 경우
		 * @description <p>PG사에서 오류를 전달한 경우</p>
		 *
		 */
		ChannelSpecificFailurePgProvider: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PG_PROVIDER";
			channel: components["schemas"]["SelectedChannel"];
			message?: string;
			pgCode: string;
			pgMessage: string;
		};
		/**
		 * 채널 유형
		 * @description <p>채널 유형</p>
		 *
		 * @enum {string}
		 */
		ChannelType: "LIVE" | "MERCHANT_TEST" | "SHARED_TEST";
		CloseVirtualAccountError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentNotFoundError"]
			| components["schemas"]["PaymentNotWaitingForDepositError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 가상계좌 말소 성공 응답
		 * @description <p>가상계좌 말소 성공 응답</p>
		 *
		 */
		CloseVirtualAccountResponse: {
			/**
			 * 가상계좌 말소 시점
			 * Format: date-time
			 */
			closedAt: string;
		};
		/**
		 * 에스크로 구매 확정 입력 정보
		 * @description <p>에스크로 구매 확정 입력 정보</p>
		 *
		 */
		ConfirmEscrowBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/**
			 * 확인 주체가 상점인지 여부
			 * @description <p>구매확정요청 주체가 고객사 관리자인지 구매자인지 구분하기 위한 필드입니다.
			 *     네이버페이 전용 파라미터이며, 구분이 모호한 경우 고객사 관리자(true)로 입력합니다.</p>
			 *
			 */
			fromStore?: boolean;
		};
		ConfirmEscrowError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentNotFoundError"]
			| components["schemas"]["PaymentNotPaidError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 에스크로 구매 확정 성공 응답
		 * @description <p>에스크로 구매 확정 성공 응답</p>
		 *
		 */
		ConfirmEscrowResponse: {
			/**
			 * 에스크로 구매 확정 시점
			 * Format: date-time
			 */
			completedAt: string;
		};
		/**
		 * 본인인증 확인을 위한 입력 정보
		 * @description <p>본인인증 확인을 위한 입력 정보</p>
		 *
		 */
		ConfirmIdentityVerificationBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/**
			 * OTP (One-Time Password)
			 * @description <p>SMS 방식에서만 사용됩니다.</p>
			 *
			 */
			otp?: string;
		};
		ConfirmIdentityVerificationError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["IdentityVerificationAlreadyVerifiedError"]
			| components["schemas"]["IdentityVerificationNotFoundError"]
			| components["schemas"]["IdentityVerificationNotSentError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 본인인증 확인 성공 응답
		 * @description <p>본인인증 확인 성공 응답</p>
		 *
		 */
		ConfirmIdentityVerificationResponse: {
			/** 완료된 본인인증 내역 */
			identityVerification: components["schemas"]["VerifiedIdentityVerification"];
		};
		/**
		 * 구매 확정
		 * @description <p>구매 확정</p>
		 *
		 */
		ConfirmedPaymentEscrow: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "CONFIRMED";
			/** 택배사 */
			company: string;
			/** 송장번호 */
			invoiceNumber: string;
			/**
			 * 발송 일시
			 * Format: date-time
			 */
			sentAt?: string;
			/**
			 * 배송등록 처리 일자
			 * Format: date-time
			 */
			appliedAt?: string;
			/** 자동 구매 확정 처리 여부 */
			isAutomaticallyConfirmed: boolean;
		};
		/**
		 * 국가
		 * @description <p>국가</p>
		 *
		 * @enum {string}
		 */
		Country:
			| "AD"
			| "AE"
			| "AF"
			| "AG"
			| "AI"
			| "AL"
			| "AM"
			| "AO"
			| "AQ"
			| "AR"
			| "AS"
			| "AT"
			| "AU"
			| "AW"
			| "AX"
			| "AZ"
			| "BA"
			| "BB"
			| "BD"
			| "BE"
			| "BF"
			| "BG"
			| "BH"
			| "BI"
			| "BJ"
			| "BL"
			| "BM"
			| "BN"
			| "BO"
			| "BQ"
			| "BR"
			| "BS"
			| "BT"
			| "BV"
			| "BW"
			| "BY"
			| "BZ"
			| "CA"
			| "CC"
			| "CD"
			| "CF"
			| "CG"
			| "CH"
			| "CI"
			| "CK"
			| "CL"
			| "CM"
			| "CN"
			| "CO"
			| "CR"
			| "CU"
			| "CV"
			| "CW"
			| "CX"
			| "CY"
			| "CZ"
			| "DE"
			| "DJ"
			| "DK"
			| "DM"
			| "DO"
			| "DZ"
			| "EC"
			| "EE"
			| "EG"
			| "EH"
			| "ER"
			| "ES"
			| "ET"
			| "FI"
			| "FJ"
			| "FK"
			| "FM"
			| "FO"
			| "FR"
			| "GA"
			| "GB"
			| "GD"
			| "GE"
			| "GF"
			| "GG"
			| "GH"
			| "GI"
			| "GL"
			| "GM"
			| "GN"
			| "GP"
			| "GQ"
			| "GR"
			| "GS"
			| "GT"
			| "GU"
			| "GW"
			| "GY"
			| "HK"
			| "HM"
			| "HN"
			| "HR"
			| "HT"
			| "HU"
			| "ID"
			| "IE"
			| "IL"
			| "IM"
			| "IN"
			| "IO"
			| "IQ"
			| "IR"
			| "IS"
			| "IT"
			| "JE"
			| "JM"
			| "JO"
			| "JP"
			| "KE"
			| "KG"
			| "KH"
			| "KI"
			| "KM"
			| "KN"
			| "KP"
			| "KR"
			| "KW"
			| "KY"
			| "KZ"
			| "LA"
			| "LB"
			| "LC"
			| "LI"
			| "LK"
			| "LR"
			| "LS"
			| "LT"
			| "LU"
			| "LV"
			| "LY"
			| "MA"
			| "MC"
			| "MD"
			| "ME"
			| "MF"
			| "MG"
			| "MH"
			| "MK"
			| "ML"
			| "MM"
			| "MN"
			| "MO"
			| "MP"
			| "MQ"
			| "MR"
			| "MS"
			| "MT"
			| "MU"
			| "MV"
			| "MW"
			| "MX"
			| "MY"
			| "MZ"
			| "NA"
			| "NC"
			| "NE"
			| "NF"
			| "NG"
			| "NI"
			| "NL"
			| "NO"
			| "NP"
			| "NR"
			| "NU"
			| "NZ"
			| "OM"
			| "PA"
			| "PE"
			| "PF"
			| "PG"
			| "PH"
			| "PK"
			| "PL"
			| "PM"
			| "PN"
			| "PR"
			| "PS"
			| "PT"
			| "PW"
			| "PY"
			| "QA"
			| "RE"
			| "RO"
			| "RS"
			| "RU"
			| "RW"
			| "SA"
			| "SB"
			| "SC"
			| "SD"
			| "SE"
			| "SG"
			| "SH"
			| "SI"
			| "SJ"
			| "SK"
			| "SL"
			| "SM"
			| "SN"
			| "SO"
			| "SR"
			| "SS"
			| "ST"
			| "SV"
			| "SX"
			| "SY"
			| "SZ"
			| "TC"
			| "TD"
			| "TF"
			| "TG"
			| "TH"
			| "TJ"
			| "TK"
			| "TL"
			| "TM"
			| "TN"
			| "TO"
			| "TR"
			| "TT"
			| "TV"
			| "TW"
			| "TZ"
			| "UA"
			| "UG"
			| "UM"
			| "US"
			| "UY"
			| "UZ"
			| "VA"
			| "VC"
			| "VE"
			| "VG"
			| "VI"
			| "VN"
			| "VU"
			| "WF"
			| "WS"
			| "YE"
			| "YT"
			| "ZA"
			| "ZM"
			| "ZW";
		/**
		 * 세금계산서 파일 업로드 링크 생성
		 * @description <p>세금계산서 파일 업로드 링크 생성</p>
		 *
		 */
		CreateB2bTaxInvoiceFileUploadLinkBody: {
			/** 파일 이름 */
			fileName: string;
		};
		CreateB2bTaxInvoiceFileUploadLinkCreateError:
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 세금계산서 파일 업로드 링크 생성 성공 응답
		 * @description <p>세금계산서 파일 업로드 링크 생성 성공 응답</p>
		 *
		 */
		CreateB2bTaxInvoiceFileUploadLinkResponse: {
			/** 파일 아이디 */
			fileId: string;
			/** 파일 업로드 링크 */
			url: string;
		};
		CreateManualTransferResponse: {
			transfer: components["schemas"]["PlatformManualTransfer"];
		};
		CreateOrderCancelTransferResponse: {
			transfer: components["schemas"]["PlatformOrderCancelTransfer"];
		};
		CreateOrderTransferResponse: {
			transfer: components["schemas"]["PlatformOrderTransfer"];
		};
		/**
		 * 결제 예약 요청 입력 정보
		 * @description <p>결제 예약 요청 입력 정보</p>
		 *
		 */
		CreatePaymentScheduleBody: {
			/** 빌링키 결제 입력 정보 */
			payment: components["schemas"]["BillingKeyPaymentInput"];
			/**
			 * 결제 예정 시점
			 * Format: date-time
			 */
			timeToPay: string;
		};
		CreatePaymentScheduleError:
			| components["schemas"]["AlreadyPaidOrWaitingError"]
			| components["schemas"]["BillingKeyAlreadyDeletedError"]
			| components["schemas"]["BillingKeyNotFoundError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentScheduleAlreadyExistsError"]
			| components["schemas"]["SumOfPartsExceedsTotalAmountError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 결제 예약 성공 응답
		 * @description <p>결제 예약 성공 응답</p>
		 *
		 */
		CreatePaymentScheduleResponse: {
			/** 결제 예약 건 */
			schedule: components["schemas"]["PaymentScheduleSummary"];
		};
		/**
		 * 추가 수수료 정책 생성을 위한 입력 정보
		 * @description <p>추가 수수료 정책 생성을 위한 입력 정보</p>
		 *
		 */
		CreatePlatformAdditionalFeePolicyBody: {
			/**
			 * 생성할 추가 수수료 정책 아이디
			 * @description <p>명시하지 않으면 id 가 임의로 생성됩니다.</p>
			 *
			 */
			id?: string;
			/** 이름 */
			name: string;
			/** 수수료 정보 */
			fee: components["schemas"]["PlatformFeeInput"];
			/** 메모 */
			memo?: string;
			/** 부가세 부담 주체 */
			vatPayer: components["schemas"]["PlatformPayer"];
		};
		CreatePlatformAdditionalFeePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAdditionalFeePolicyAlreadyExistsError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 플랫폼 생성 성공 응답 정보
		 * @description <p>플랫폼 생성 성공 응답 정보</p>
		 *
		 */
		CreatePlatformAdditionalFeePolicyResponse: {
			/** 생성된 추가 수수료 정책 */
			additionalFeePolicy: components["schemas"]["PlatformAdditionalFeePolicy"];
		};
		/**
		 * 계약 객체 생성을 위한 입력 정보
		 * @description <p>계약 객체 생성을 위한 입력 정보</p>
		 *
		 */
		CreatePlatformContractBody: {
			/**
			 * 계약에 부여할 고유 아이디
			 * @description <p>명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.</p>
			 *
			 */
			id?: string;
			/** 계약 이름 */
			name: string;
			/** 계약 내부 표기를 위한 메모 */
			memo?: string;
			/** 중개수수료 */
			platformFee: components["schemas"]["PlatformFeeInput"];
			/** 정산 주기 */
			settlementCycle: components["schemas"]["PlatformSettlementCycleInput"];
			/** 중개수수료에 대한 부가세 부담 주체 */
			platformFeeVatPayer: components["schemas"]["PlatformPayer"];
			/** 정산 시 결제금액 부가세 감액 여부 */
			subtractPaymentVatAmount: boolean;
		};
		CreatePlatformContractError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformContractAlreadyExistsError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 계약 객체 생성 성공 응답
		 * @description <p>계약 객체 생성 성공 응답</p>
		 *
		 */
		CreatePlatformContractResponse: {
			/** 생성된 계약 객체 */
			contract: components["schemas"]["PlatformContract"];
		};
		/**
		 * 할인 분담 정책 생성을 위한 입력 정보
		 * @description <p>할인 분담 정책 생성을 위한 입력 정보</p>
		 *
		 */
		CreatePlatformDiscountSharePolicyBody: {
			/**
			 * 할인 분담에 부여할 고유 아이디
			 * @description <p>명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.</p>
			 *
			 */
			id?: string;
			/** 할인 분담에 부여할 이름 */
			name: string;
			/**
			 * 파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 `할인금액 * partnerShareRate * 10^5` 로 책정합니다.
			 * Format: int32
			 */
			partnerShareRate: number;
			/** 해당 할인 분담에 대한 메모 ex) 파트너 브랜드 쿠폰 */
			memo?: string;
		};
		CreatePlatformDiscountSharePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformDiscountSharePolicyAlreadyExistsError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 할인 분담 정책 생성 성공 응답
		 * @description <p>할인 분담 정책 생성 성공 응답</p>
		 *
		 */
		CreatePlatformDiscountSharePolicyResponse: {
			/** 생성된 할인 분담 정책 */
			discountSharePolicy: components["schemas"]["PlatformDiscountSharePolicy"];
		};
		/**
		 * 수기 정산건 생성을 위한 입력 정보
		 * @description <p>수기 정산건 생성을 위한 입력 정보</p>
		 *
		 */
		CreatePlatformManualTransferBody: {
			/** 파트너 아이디 */
			partnerId: string;
			/** 메모 */
			memo?: string;
			/**
			 * 정산 금액
			 * Format: int64
			 */
			settlementAmount: number;
			/**
			 * 정산 일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			settlementDate: string;
			/**
			 * 테스트 모드 여부
			 * @description <p>기본값은 false 입니다.</p>
			 *
			 */
			isForTest?: boolean;
		};
		CreatePlatformManualTransferError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["PlatformUnavailableSettlementDateError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 주문 취소 정산 등록을 위한 입력 정보
		 * @description <p>주문 취소 정산 등록을 위한 입력 정보</p>
		 *     <p>하나의 payment에 하나의 정산 건만 존재하는 경우에는 (partnerId, paymentId)로 취소 정산을 등록하실 수 있습니다.
		 *     하나의 payment에 여러 개의 정산 건이 존재하는 경우에는 transferId를 필수로 입력해야 합니다.
		 *     transferId를 입력한 경우 (partnerId, paymentId)는 생략 가능합니다.</p>
		 *
		 */
		CreatePlatformOrderCancelTransferBody: {
			/** 파트너 아이디 */
			partnerId?: string;
			/** 결제 아이디 */
			paymentId?: string;
			/** 정산건 아이디 */
			transferId?: string;
			/** 취소 내역 아이디 */
			cancellationId: string;
			/** 메모 */
			memo?: string;
			/** 주문 취소 정보 */
			orderDetail?: components["schemas"]["CreatePlatformOrderCancelTransferBodyOrderDetail"];
			/**
			 * 주문 취소 면세 금액
			 * Format: int64
			 * @description <p>주문 취소 항목과 취소 면세 금액을 같이 전달하시면 최종 취소 면세 금액은 주문 취소 항목의 면세 금액이 아닌 전달해주신 취소 면세 금액으로 적용됩니다.</p>
			 *
			 */
			taxFreeAmount?: number;
			/** 할인 정보 */
			discounts: components["schemas"]["CreatePlatformOrderCancelTransferBodyDiscount"][];
			/**
			 * 정산 시작일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			settlementStartDate?: string;
			/**
			 * 외부 결제 상세 정보
			 * @description <p>해당 정보가 존재하는 경우 외부 결제 취소 정산건으로 등록되고, 존재하지않은 경우 포트원 결제 취소 정산건으로 등록됩니다.</p>
			 *
			 */
			externalCancellationDetail?: components["schemas"]["CreatePlatformOrderCancelTransferBodyExternalCancellationDetail"];
			/**
			 * 테스트 모드 여부
			 * @description <p>기본값은 false 입니다.</p>
			 *
			 */
			isForTest?: boolean;
			/** 정산 파라미터 (실험기능) */
			parameters?: components["schemas"]["TransferParameters"];
		};
		/**
		 * 할인 정보
		 * @description <p>할인 정보</p>
		 *
		 */
		CreatePlatformOrderCancelTransferBodyDiscount: {
			/** 할인 분담 정책 아이디 */
			sharePolicyId: string;
			/**
			 * 할인 금액
			 * Format: int64
			 */
			amount: number;
		};
		/**
		 * 외부 결제 상세 정보
		 * @description <p>외부 결제 상세 정보</p>
		 *
		 */
		CreatePlatformOrderCancelTransferBodyExternalCancellationDetail: {
			/**
			 * 취소 일시
			 * Format: date-time
			 */
			cancelledAt?: string;
		};
		/**
		 * 주문 취소 정보
		 * @description <p>주문 취소 정보</p>
		 *     <p>orderAmount, orderLines, all 중에서 하나만 입력하여야 합니다.</p>
		 *
		 */
		CreatePlatformOrderCancelTransferBodyOrderDetail: {
			/**
			 * 주문 취소 금액
			 * Format: int64
			 */
			orderAmount?: number;
			/** 주문 취소 항목 리스트 */
			orderLines?: components["schemas"]["CreatePlatformOrderCancelTransferBodyOrderLine"][];
			/** 전체 금액 취소 */
			all?: components["schemas"]["CreatePlatformOrderCancelTransferBodyOrderDetailAll"];
		};
		/**
		 * 전체 금액 취소
		 * @description <p>전체 금액 취소</p>
		 *
		 */
		CreatePlatformOrderCancelTransferBodyOrderDetailAll: Record<string, never>;
		/**
		 * 주문 취소 항목 리스트
		 * @description <p>주문 취소 항목 리스트</p>
		 *
		 */
		CreatePlatformOrderCancelTransferBodyOrderLine: {
			/** 상품 아이디 */
			productId: string;
			/**
			 * 상품 수량
			 * Format: int32
			 */
			quantity: number;
			/** 상품 할인 정보 */
			discounts: components["schemas"]["CreatePlatformOrderCancelTransferBodyDiscount"][];
		};
		CreatePlatformOrderCancelTransferError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformCancellableAmountExceededError"]
			| components["schemas"]["PlatformCancellableDiscountAmountExceededError"]
			| components["schemas"]["PlatformCancellableProductQuantityExceededError"]
			| components["schemas"]["PlatformCancellationAndPaymentTypeMismatchedError"]
			| components["schemas"]["PlatformCancellationNotFoundError"]
			| components["schemas"]["PlatformCannotSpecifyTransferError"]
			| components["schemas"]["PlatformDiscountCancelExceededOrderCancelAmountError"]
			| components["schemas"]["PlatformDiscountSharePolicyIdDuplicatedError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformOrderDetailMismatchedError"]
			| components["schemas"]["PlatformOrderTransferAlreadyCancelledError"]
			| components["schemas"]["PlatformPaymentNotFoundError"]
			| components["schemas"]["PlatformProductIdDuplicatedError"]
			| components["schemas"]["PlatformProductIdNotFoundError"]
			| components["schemas"]["PlatformSettlementCancelAmountExceededPortOneCancelError"]
			| components["schemas"]["PlatformTaxFreeAmountOverFlowError"]
			| components["schemas"]["PlatformTransferAlreadyExistsError"]
			| components["schemas"]["PlatformTransferDiscountSharePolicyNotFoundError"]
			| components["schemas"]["PlatformTransferNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 주문 정산건 생성을 위한 입력 정보
		 * @description <p>주문 정산건 생성을 위한 입력 정보</p>
		 *
		 */
		CreatePlatformOrderTransferBody: {
			/** 파트너 아이디 */
			partnerId: string;
			/**
			 * 계약 아이디
			 * @description <p>기본값은 파트너의 기본 계약 아이디 입니다.</p>
			 *
			 */
			contractId?: string;
			/** 메모 */
			memo?: string;
			/** 결제 아이디 */
			paymentId: string;
			/** 주문 정보 */
			orderDetail: components["schemas"]["CreatePlatformOrderTransferBodyOrderDetail"];
			/**
			 * 주문 면세 금액
			 * Format: int64
			 * @description <p>주문 항목과 면세 금액을 같이 전달하시면 최종 면세 금액은 주문 항목의 면세 금액이 아닌 전달해주신 면세 금액으로 적용됩니다.</p>
			 *
			 */
			taxFreeAmount?: number;
			/**
			 * 정산 시작일
			 * @description <p>기본값은 결제 일시 입니다.</p>
			 *
			 */
			settlementStartDate?: string;
			/** 할인 정보 */
			discounts: components["schemas"]["CreatePlatformOrderTransferBodyDiscount"][];
			/** 추가 수수료 정보 */
			additionalFees: components["schemas"]["CreatePlatformOrderTransferBodyAdditionalFee"][];
			/**
			 * 외부 결제 상세 정보
			 * @description <p>해당 정보가 존재하는 경우 외부 결제 정산건 으로 등록되고, 존재하지않은 경우 포트원 결제 정산건으로 등록됩니다.</p>
			 *
			 */
			externalPaymentDetail?: components["schemas"]["CreatePlatformOrderTransferBodyExternalPaymentDetail"];
			/**
			 * 테스트 모드 여부
			 * @description <p>기본값은 false 입니다.</p>
			 *
			 */
			isForTest?: boolean;
			/** 정산 파라미터 (실험기능) */
			parameters?: components["schemas"]["TransferParameters"];
		};
		/**
		 * 추가 수수료 정보
		 * @description <p>추가 수수료 정보</p>
		 *
		 */
		CreatePlatformOrderTransferBodyAdditionalFee: {
			/** 추가 수수료 정책 아이디 */
			policyId: string;
		};
		/**
		 * 할인 정보
		 * @description <p>할인 정보</p>
		 *
		 */
		CreatePlatformOrderTransferBodyDiscount: {
			/** 할인 분담 정책 아이디 */
			sharePolicyId: string;
			/**
			 * 할인 금액
			 * Format: int64
			 */
			amount: number;
		};
		/**
		 * 외부 결제 상세 정보
		 * @description <p>외부 결제 상세 정보</p>
		 *
		 */
		CreatePlatformOrderTransferBodyExternalPaymentDetail: {
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 주문 명 */
			orderName?: string;
			/**
			 * 결제 일시
			 * Format: date-time
			 */
			paidAt?: string;
			/** 결제 수단 */
			method?: components["schemas"]["PlatformPaymentMethodInput"];
		};
		/**
		 * 주문 정보
		 * @description <p>주문 정보</p>
		 *     <p>주문 금액 또는 주문 항목 하나만 입력 가능합니다.</p>
		 *
		 */
		CreatePlatformOrderTransferBodyOrderDetail: {
			/**
			 * 주문 금액
			 * Format: int64
			 */
			orderAmount?: number;
			/** 주문 항목 리스트 */
			orderLines?: components["schemas"]["CreatePlatformOrderTransferBodyOrderLine"][];
		};
		/**
		 * 주문 항목
		 * @description <p>주문 항목</p>
		 *
		 */
		CreatePlatformOrderTransferBodyOrderLine: {
			/** 상품 */
			product: components["schemas"]["CreatePlatformOrderTransferBodyProduct"];
			/**
			 * 상품 수량
			 * Format: int32
			 */
			quantity: number;
			/** 상품 할인 정보 */
			discounts: components["schemas"]["CreatePlatformOrderTransferBodyDiscount"][];
			/** 상품 추가 수수료 정보 */
			additionalFees: components["schemas"]["CreatePlatformOrderTransferBodyAdditionalFee"][];
		};
		/**
		 * 상품
		 * @description <p>상품</p>
		 *
		 */
		CreatePlatformOrderTransferBodyProduct: {
			/** 상품 아이디 */
			id: string;
			/** 상품 이름 */
			name: string;
			/**
			 * 상품 금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 상품 면세 금액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/** 태그 */
			tag?: string;
		};
		CreatePlatformOrderTransferError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAdditionalFeePoliciesNotFoundError"]
			| components["schemas"]["PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError"]
			| components["schemas"]["PlatformCurrencyNotSupportedError"]
			| components["schemas"]["PlatformDiscountExceededOrderAmountError"]
			| components["schemas"]["PlatformDiscountSharePoliciesNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["PlatformPaymentNotFoundError"]
			| components["schemas"]["PlatformProductIdDuplicatedError"]
			| components["schemas"]["PlatformSettlementPaymentAmountExceededPortOnePaymentError"]
			| components["schemas"]["PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError"]
			| components["schemas"]["PlatformSettlementTaxFreeAmountExceededPortOnePaymentError"]
			| components["schemas"]["PlatformTaxFreeAmountOverFlowError"]
			| components["schemas"]["PlatformTransferAlreadyExistsError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 파트너 생성을 위한 입력 정보
		 * @description <p>파트너 생성을 위한 입력 정보</p>
		 *
		 */
		CreatePlatformPartnerBody: {
			/**
			 * 파트너에 부여할 고유 아이디
			 * @description <p>고객사 서버에 등록된 파트너 지칭 아이디와 동일하게 설정하는 것을 권장합니다. 명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.</p>
			 *
			 */
			id?: string;
			/** 파트너 법인명 혹은 이름 */
			name: string;
			/** 파트너 담당자 연락 정보 */
			contact: components["schemas"]["CreatePlatformPartnerBodyContact"];
			/**
			 * 정산 계좌
			 * @description <p>파트너의 사업자등록번호가 존재하는 경우 명시합니다. 별도로 검증하지는 않으며, 번호와 기호 모두 입력 가능합니다.</p>
			 *
			 */
			account: components["schemas"]["CreatePlatformPartnerBodyAccount"];
			/**
			 * 기본 계약 아이디
			 * @description <p>이미 존재하는 계약 아이디를 등록해야 합니다.</p>
			 *
			 */
			defaultContractId: string;
			/**
			 * 파트너에 대한 메모
			 * @description <p>총 256자까지 입력할 수 있습니다.</p>
			 *
			 */
			memo?: string;
			/**
			 * 파트너에 부여할 태그 리스트
			 * @description <p>최대 10개까지 입력할 수 있습니다.</p>
			 *
			 */
			tags: string[];
			/**
			 * 파트너 유형별 추가 정보
			 * @description <p>사업자/원천징수대상자 중 추가할 파트너의 유형에 따른 정보를 입력해야 합니다.</p>
			 *
			 */
			type: components["schemas"]["CreatePlatformPartnerBodyType"];
		};
		/**
		 * 파트너 계좌 등록을 위한 정보
		 * @description <p>파트너 계좌 등록을 위한 정보</p>
		 *
		 */
		CreatePlatformPartnerBodyAccount: {
			/** 은행 */
			bank: components["schemas"]["Bank"];
			/** 정산에 사용할 통화 */
			currency: components["schemas"]["Currency"];
			/** 계좌번호 */
			number: string;
			/** 예금주명 */
			holder: string;
			/** 계좌 검증 아이디 */
			accountVerificationId?: string;
		};
		/**
		 * 파트너 담당자 정보
		 * @description <p>파트너 담당자 정보</p>
		 *
		 */
		CreatePlatformPartnerBodyContact: {
			/** 담당자 이름 */
			name: string;
			/** 담당자 휴대폰 번호 */
			phoneNumber?: string;
			/** 담당자 이메일 */
			email: string;
		};
		/**
		 * 파트너 생성을 위한 유형별 추가 정보
		 * @description <p>파트너 생성을 위한 유형별 추가 정보</p>
		 *
		 */
		CreatePlatformPartnerBodyType: {
			/** 사업자 추가 정보 */
			business?: components["schemas"]["CreatePlatformPartnerBodyTypeBusiness"];
			/** 원천징수대상자 추가 정보 */
			whtPayer?: components["schemas"]["CreatePlatformPartnerBodyTypeWhtPayer"];
		};
		CreatePlatformPartnerBodyTypeBusiness: {
			/** 상호명 */
			companyName: string;
			/**
			 * 사업자 유형
			 * @description <p>값을 입력하지 않으면 일반 과세로 설정됩니다.</p>
			 *
			 */
			taxationType?: components["schemas"]["PlatformPartnerTaxationType"];
			/** 사업자등록번호 */
			businessRegistrationNumber: string;
			/** 대표자 이름 */
			representativeName: string;
			/** 사업장 주소 */
			companyAddress?: string;
			/** 업태 */
			businessType?: string;
			/** 업종 */
			businessClass?: string;
		};
		CreatePlatformPartnerBodyTypeWhtPayer: {
			/** 생년월일 */
			birthdate?: string;
		};
		CreatePlatformPartnerError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAccountVerificationAlreadyUsedError"]
			| components["schemas"]["PlatformAccountVerificationFailedError"]
			| components["schemas"]["PlatformAccountVerificationNotFoundError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformCurrencyNotSupportedError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerIdAlreadyExistsError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 파트너 생성 성공 응답
		 * @description <p>파트너 생성 성공 응답</p>
		 *
		 */
		CreatePlatformPartnerResponse: {
			/** 생성된 파트너 */
			partner: components["schemas"]["PlatformPartner"];
		};
		/**
		 * 파트너 다건 생성을 위한 입력 정보
		 * @description <p>파트너 다건 생성을 위한 입력 정보</p>
		 *
		 */
		CreatePlatformPartnersBody: {
			/** 생성할 파트너 리스트 정보 */
			partners: components["schemas"]["CreatePlatformPartnerBody"][];
		};
		CreatePlatformPartnersError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformContractsNotFoundError"]
			| components["schemas"]["PlatformCurrencyNotSupportedError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerIdsAlreadyExistError"]
			| components["schemas"]["PlatformPartnerIdsDuplicatedError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 파트너 다건 생성 성공 응답
		 * @description <p>파트너 다건 생성 성공 응답</p>
		 *
		 */
		CreatePlatformPartnersResponse: {
			/** 생성된 파트너 리스트 */
			partners: components["schemas"]["PlatformPartner"][];
		};
		/**
		 * 통화 단위
		 * @description <p>통화 단위</p>
		 *
		 * @enum {string}
		 */
		Currency:
			| "AED"
			| "AFN"
			| "ALL"
			| "AMD"
			| "ANG"
			| "AOA"
			| "ARS"
			| "AUD"
			| "AWG"
			| "AZN"
			| "BAM"
			| "BBD"
			| "BDT"
			| "BGN"
			| "BHD"
			| "BIF"
			| "BMD"
			| "BND"
			| "BOB"
			| "BOV"
			| "BRL"
			| "BSD"
			| "BTN"
			| "BWP"
			| "BYN"
			| "BZD"
			| "CAD"
			| "CDF"
			| "CHE"
			| "CHF"
			| "CHW"
			| "CLF"
			| "CLP"
			| "CNY"
			| "COP"
			| "COU"
			| "CRC"
			| "CUC"
			| "CUP"
			| "CVE"
			| "CZK"
			| "DJF"
			| "DKK"
			| "DOP"
			| "DZD"
			| "EGP"
			| "ERN"
			| "ETB"
			| "EUR"
			| "FJD"
			| "FKP"
			| "GBP"
			| "GEL"
			| "GHS"
			| "GIP"
			| "GMD"
			| "GNF"
			| "GTQ"
			| "GYD"
			| "HKD"
			| "HNL"
			| "HRK"
			| "HTG"
			| "HUF"
			| "IDR"
			| "ILS"
			| "INR"
			| "IQD"
			| "IRR"
			| "ISK"
			| "JMD"
			| "JOD"
			| "JPY"
			| "KES"
			| "KGS"
			| "KHR"
			| "KMF"
			| "KPW"
			| "KRW"
			| "KWD"
			| "KYD"
			| "KZT"
			| "LAK"
			| "LBP"
			| "LKR"
			| "LRD"
			| "LSL"
			| "LYD"
			| "MAD"
			| "MDL"
			| "MGA"
			| "MKD"
			| "MMK"
			| "MNT"
			| "MOP"
			| "MRU"
			| "MUR"
			| "MVR"
			| "MWK"
			| "MXN"
			| "MXV"
			| "MYR"
			| "MZN"
			| "NAD"
			| "NGN"
			| "NIO"
			| "NOK"
			| "NPR"
			| "NZD"
			| "OMR"
			| "PAB"
			| "PEN"
			| "PGK"
			| "PHP"
			| "PKR"
			| "PLN"
			| "PYG"
			| "QAR"
			| "RON"
			| "RSD"
			| "RUB"
			| "RWF"
			| "SAR"
			| "SBD"
			| "SCR"
			| "SDG"
			| "SEK"
			| "SGD"
			| "SHP"
			| "SLE"
			| "SLL"
			| "SOS"
			| "SRD"
			| "SSP"
			| "STN"
			| "SVC"
			| "SYP"
			| "SZL"
			| "THB"
			| "TJS"
			| "TMT"
			| "TND"
			| "TOP"
			| "TRY"
			| "TTD"
			| "TWD"
			| "TZS"
			| "UAH"
			| "UGX"
			| "USD"
			| "USN"
			| "UYI"
			| "UYU"
			| "UYW"
			| "UZS"
			| "VED"
			| "VES"
			| "VND"
			| "VUV"
			| "WST"
			| "XAF"
			| "XAG"
			| "XAU"
			| "XBA"
			| "XBB"
			| "XBC"
			| "XBD"
			| "XCD"
			| "XDR"
			| "XOF"
			| "XPD"
			| "XPF"
			| "XPT"
			| "XSU"
			| "XTS"
			| "XUA"
			| "XXX"
			| "YER"
			| "ZAR"
			| "ZMW"
			| "ZWL";
		/**
		 * 고객 정보
		 * @description <p>고객 정보</p>
		 *
		 */
		Customer: {
			/**
			 * 고객 아이디
			 * @description <p>고객사가 지정한 고객의 고유 식별자입니다.</p>
			 *
			 */
			id?: string;
			/** 이름 */
			name?: string;
			/** 출생 연도 */
			birthYear?: string;
			/** 성별 */
			gender?: components["schemas"]["Gender"];
			/** 이메일 */
			email?: string;
			/** 전화번호 */
			phoneNumber?: string;
			/** 주소 */
			address?: components["schemas"]["Address"];
			/** 우편번호 */
			zipcode?: string;
		};
		/**
		 * 고객 정보 입력 정보
		 * @description <p>고객 정보 입력 정보</p>
		 *
		 */
		CustomerInput: {
			/**
			 * 고객 아이디
			 * @description <p>고객사가 지정한 고객의 고유 식별자입니다.</p>
			 *
			 */
			id?: string;
			/** 이름 */
			name?: components["schemas"]["CustomerNameInput"];
			/** 출생 연도 */
			birthYear?: string;
			/** 출생월 */
			birthMonth?: string;
			/** 출생일 */
			birthDay?: string;
			/** 국가 */
			country?: components["schemas"]["Country"];
			/** 성별 */
			gender?: components["schemas"]["Gender"];
			/** 이메일 */
			email?: string;
			/** 전화번호 */
			phoneNumber?: string;
			/** 주소 */
			address?: components["schemas"]["SeparatedAddressInput"];
			/** 우편번호 */
			zipcode?: string;
			/** 사업자 등록 번호 */
			businessRegistrationNumber?: string;
		};
		/**
		 * 고객 이름 입력 정보
		 * @description <p>고객 이름 입력 정보</p>
		 *     <p>두 개의 이름 형식 중 한 가지만 선택하여 입력해주세요.</p>
		 *
		 */
		CustomerNameInput: {
			/** 한 줄 이름 형식 */
			full?: string;
			/** 분리형 이름 형식 */
			separated?: components["schemas"]["CustomerSeparatedName"];
		};
		/**
		 * 고객 분리형 이름
		 * @description <p>고객 분리형 이름</p>
		 *
		 */
		CustomerSeparatedName: {
			/** 이름 */
			first: string;
			/** 성 */
			last: string;
		};
		DateRange: {
			/** @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *      */
			from: string;
			/** @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *      */
			until: string;
		};
		/**
		 * 시간 범위
		 * @description <p>시간 범위</p>
		 *
		 */
		DateTimeRange: {
			/** Format: date-time */
			from: string;
			/** Format: date-time */
			until: string;
		};
		/**
		 * 요일
		 * @description <p>요일</p>
		 *
		 * @enum {string}
		 */
		DayOfWeek: "FRI" | "MON" | "SAT" | "SUN" | "THU" | "TUE" | "WED";
		DeleteB2bTaxInvoiceAttachmentError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceAttachmentNotFoundError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["B2bTaxInvoiceNotRegisteredStatusError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		DeleteB2bTaxInvoiceError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNonDeletableStatusError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		DeleteBillingKeyError:
			| components["schemas"]["BillingKeyAlreadyDeletedError"]
			| components["schemas"]["BillingKeyNotFoundError"]
			| components["schemas"]["BillingKeyNotIssuedError"]
			| components["schemas"]["ChannelSpecificError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentScheduleAlreadyExistsError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 빌링키 삭제 성공 응답
		 * @description <p>빌링키 삭제 성공 응답</p>
		 *
		 */
		DeleteBillingKeyResponse: {
			/**
			 * 빌링키 삭제 완료 시점
			 * Format: date-time
			 */
			deletedAt: string;
		};
		DeletePlatformTransferError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformCancelOrderTransfersExistsError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformTransferNonDeletableStatusError"]
			| components["schemas"]["PlatformTransferNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		DeletePlatformTransferResponse: Record<string, never>;
		/**
		 * 빌링키 삭제 완료 상태 건
		 * @description <p>빌링키 삭제 완료 상태 건</p>
		 *
		 */
		DeletedBillingKeyInfo: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "DELETED";
			/** 빌링키 */
			billingKey: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/**
			 * 빌링키 결제수단 상세 정보
			 * @description <p>추후 슈퍼빌링키 기능 제공 시 여러 결제수단 정보가 담길 수 있습니다.</p>
			 *
			 */
			methods?: components["schemas"]["BillingKeyPaymentMethod"][];
			/**
			 * 빌링키 발급 시 사용된 채널
			 * @description <p>추후 슈퍼빌링키 기능 제공 시 여러 채널 정보가 담길 수 있습니다.</p>
			 *
			 */
			channels: components["schemas"]["SelectedChannel"][];
			/** 고객 정보 */
			customer: components["schemas"]["Customer"];
			/** 사용자 지정 데이터 */
			customData?: string;
			/** 고객사가 채번하는 빌링키 발급 건 고유 아이디 */
			issueId?: string;
			/** 빌링키 발급 건 이름 */
			issueName?: string;
			/**
			 * 발급 요청 시점
			 * Format: date-time
			 */
			requestedAt?: string;
			/**
			 * 발급 시점
			 * Format: date-time
			 */
			issuedAt: string;
			/** 채널 그룹 */
			channelGroup?: components["schemas"]["ChannelGroupSummary"];
			/**
			 * 채널 별 빌링키 발급 응답
			 * @description <p>슈퍼빌링키의 경우, 빌링키 발급이 성공하더라도 일부 채널에 대한 발급은 실패할 수 있습니다.</p>
			 *
			 */
			pgBillingKeyIssueResponses?: components["schemas"]["PgBillingKeyIssueResponse"][];
			/**
			 * 발급 삭제 시점
			 * Format: date-time
			 */
			deletedAt: string;
		};
		/**
		 * 배송 완료
		 * @description <p>배송 완료</p>
		 *
		 */
		DeliveredPaymentEscrow: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "DELIVERED";
			/** 택배사 */
			company: string;
			/** 송장번호 */
			invoiceNumber: string;
			/**
			 * 발송 일시
			 * Format: date-time
			 */
			sentAt?: string;
			/**
			 * 배송등록 처리 일자
			 * Format: date-time
			 */
			appliedAt?: string;
		};
		DownloadPlatformBulkPayoutsSheetBody: {
			filter?: components["schemas"]["PlatformBulkPayoutFilterInput"];
			/** 다운로드 할 시트 컬럼 */
			fields?: components["schemas"]["PlatformBulkPayoutsSheetField"][];
			isForTest?: boolean;
		};
		DownloadPlatformBulkPayoutsSheetError:
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		DownloadPlatformPartnerSettlementSheetBody: {
			filter?: components["schemas"]["PlatformPartnerSettlementFilterInput"];
			/** 다운로드 할 시트 컬럼 */
			fields?: components["schemas"]["PlatformPartnerSettlementSheetField"][];
			isForTest?: boolean;
		};
		DownloadPlatformPartnerSettlementSheetError:
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		DownloadPlatformPayoutsSheetBody: {
			filter?: components["schemas"]["PlatformPayoutFilterInput"];
			/** 다운로드 할 시트 컬럼 */
			fields?: components["schemas"]["PlatformPayoutsSheetField"][];
			isForTest?: boolean;
		};
		DownloadPlatformPayoutsSheetError:
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		DownloadPlatformTransferSheetBody: {
			filter?: components["schemas"]["PlatformTransferFilterInput"];
			/** 다운로드 할 시트 컬럼 */
			fields?: components["schemas"]["PlatformTransferSheetField"][];
		};
		DownloadPlatformTransferSheetError:
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 간편 결제 수단
		 * @description <p>간편 결제 수단</p>
		 *
		 * @enum {string}
		 */
		EasyPayMethodType: "CARD" | "CHARGE" | "TRANSFER";
		/**
		 * 간편 결제사
		 * @description <p>간편 결제사</p>
		 *
		 * @enum {string}
		 */
		EasyPayProvider:
			| "ALIPAY"
			| "APPLEPAY"
			| "CHAI"
			| "HYPHEN"
			| "KAKAOPAY"
			| "KB_APP"
			| "KPAY"
			| "LGPAY"
			| "LPAY"
			| "NAVERPAY"
			| "PAYCO"
			| "PINPAY"
			| "SAMSUNGPAY"
			| "SKPAY"
			| "SSGPAY"
			| "TOSSPAY"
			| "TOSS_BRANDPAY";
		/**
		 * 실패한 본인인증 내역
		 * @description <p>실패한 본인인증 내역</p>
		 *
		 */
		FailedIdentityVerification: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "FAILED";
			/** 본인인증 내역 아이디 */
			id: string;
			/** 사용된 본인인증 채널 */
			channel?: components["schemas"]["SelectedChannel"];
			/** 요청 시 고객 정보 */
			requestedCustomer: components["schemas"]["IdentityVerificationRequestedCustomer"];
			/** 사용자 지정 데이터 */
			customData?: string;
			/**
			 * 본인인증 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
			/**
			 * 업데이트 시점
			 * Format: date-time
			 */
			updatedAt: string;
			/**
			 * 상태 업데이트 시점
			 * Format: date-time
			 */
			statusChangedAt: string;
		};
		/**
		 * 결제 실패 상태 건
		 * @description <p>결제 실패 상태 건</p>
		 *
		 */
		FailedPayment: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "FAILED";
			/** 결제 건 아이디 */
			id: string;
			/**
			 * 결제 건 포트원 채번 아이디
			 * @description <p>V1 결제 건의 경우 imp_uid에 해당합니다.</p>
			 *
			 */
			transactionId: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제수단 정보 */
			method?: components["schemas"]["PaymentMethod"];
			/** 결제 채널 */
			channel?: components["schemas"]["SelectedChannel"];
			/** 결제 채널 그룹 정보 */
			channelGroup?: components["schemas"]["ChannelGroupSummary"];
			/** 포트원 버전 */
			version: components["schemas"]["PortOneVersion"];
			/**
			 * 결제 예약 건 아이디
			 * @description <p>결제 예약을 이용한 경우에만 존재</p>
			 *
			 */
			scheduleId?: string;
			/**
			 * 결제 시 사용된 빌링키
			 * @description <p>빌링키 결제인 경우에만 존재</p>
			 *
			 */
			billingKey?: string;
			/** 웹훅 발송 내역 */
			webhooks?: components["schemas"]["PaymentWebhook"][];
			/**
			 * 결제 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
			/**
			 * 업데이트 시점
			 * Format: date-time
			 */
			updatedAt: string;
			/**
			 * 상태 업데이트 시점
			 * Format: date-time
			 */
			statusChangedAt: string;
			/** 주문명 */
			orderName: string;
			/** 결제 금액 관련 세부 정보 */
			amount: components["schemas"]["PaymentAmount"];
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 구매자 정보 */
			customer: components["schemas"]["Customer"];
			/** 프로모션 아이디 */
			promotionId?: string;
			/** 문화비 지출 여부 */
			isCulturalExpense?: boolean;
			/**
			 * 에스크로 결제 정보
			 * @description <p>에스크로 결제인 경우 존재합니다.</p>
			 *
			 */
			escrow?: components["schemas"]["PaymentEscrow"];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 상품 갯수
			 * Format: int32
			 */
			productCount?: number;
			/** 사용자 지정 데이터 */
			customData?: string;
			/** 국가 코드 */
			country?: components["schemas"]["Country"];
			/**
			 * 결제 실패 시점
			 * Format: date-time
			 */
			failedAt: string;
		};
		/**
		 * 취소 실패 상태
		 * @description <p>취소 실패 상태</p>
		 *
		 */
		FailedPaymentCancellation: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "FAILED";
			/** 취소 내역 아이디 */
			id: string;
			/** PG사 결제 취소 내역 아이디 */
			pgCancellationId?: string;
			/**
			 * 취소 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 취소 금액 중 면세 금액
			 * Format: int64
			 */
			taxFreeAmount: number;
			/**
			 * 취소 금액 중 부가세액
			 * Format: int64
			 */
			vatAmount: number;
			/**
			 * 적립형 포인트의 환불 금액
			 * Format: int64
			 */
			easyPayDiscountAmount?: number;
			/** 취소 사유 */
			reason: string;
			/**
			 * 취소 시점
			 * Format: date-time
			 */
			cancelledAt?: string;
			/**
			 * 취소 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
		};
		/**
		 * 결제 실패 상태
		 * @description <p>결제 실패 상태</p>
		 *
		 */
		FailedPaymentSchedule: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "FAILED";
			/** 결제 예약 건 아이디 */
			id: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제 건 아이디 */
			paymentId: string;
			/** 빌링키 */
			billingKey: string;
			/** 주문명 */
			orderName: string;
			/** 문화비 지출 여부 */
			isCulturalExpense: boolean;
			/** 에스크로 결제 여부 */
			isEscrow: boolean;
			/** 고객 정보 */
			customer: components["schemas"]["Customer"];
			/** 사용자 지정 데이터 */
			customData: string;
			/**
			 * 결제 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/**
			 * 부가세
			 * Format: int64
			 */
			vatAmount?: number;
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/**
			 * 할부 개월 수
			 * Format: int32
			 */
			installmentMonth?: number;
			/** 웹훅 주소 */
			noticeUrls?: string[];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 결제 예약 등록 시점
			 * Format: date-time
			 */
			createdAt: string;
			/**
			 * 결제 예정 시점
			 * Format: date-time
			 */
			timeToPay: string;
			/**
			 * 결제 시작 시점
			 * Format: date-time
			 */
			startedAt: string;
			/**
			 * 결제 완료 시점
			 * Format: date-time
			 */
			completedAt: string;
		};
		/**
		 * 빌링키 발급 실패 채널 응답
		 * @description <p>빌링키 발급 실패 채널 응답</p>
		 *
		 */
		FailedPgBillingKeyIssueResponse: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "FAILED";
			/**
			 * 채널
			 * @description <p>빌링키 발급을 시도한 채널입니다.</p>
			 *
			 */
			channel: components["schemas"]["SelectedChannel"];
			/** 발급 실패 상세 정보 */
			failure: components["schemas"]["BillingKeyFailure"];
		};
		/**
		 * 요청이 거절된 경우
		 * @description <p>요청이 거절된 경우</p>
		 *
		 */
		ForbiddenError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "FORBIDDEN";
			message?: string;
		};
		/**
		 * 성별
		 * @description <p>성별</p>
		 *
		 * @enum {string}
		 */
		Gender: "FEMALE" | "MALE" | "OTHER";
		/** @description <p>결제 건 커서 기반 대용량 다건 조회를 위한 입력 정보</p>
		 *      */
		GetAllPaymentsByCursorBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/**
			 * 결제 건 생성시점 범위 조건의 시작
			 * Format: date-time
			 * @description <p>값을 입력하지 않으면 end의 90일 전으로 설정됩니다.</p>
			 *
			 */
			from?: string;
			/**
			 * 결제 건 생성시점 범위 조건의 끝
			 * Format: date-time
			 * @description <p>값을 입력하지 않으면 현재 시점으로 설정됩니다.</p>
			 *
			 */
			until?: string;
			/**
			 * 커서
			 * @description <p>결제 건 리스트 중 어디서부터 읽어야 할지 가리키는 값입니다. 최초 요청일 경우 값을 입력하지 마시되, 두번째 요청 부터는 이전 요청 응답값의 cursor를 입력해주시면 됩니다.</p>
			 *
			 */
			cursor?: string;
			/**
			 * 페이지 크기
			 * Format: int32
			 * @description <p>미입력 시 기본값은 10 이며 최대 1000까지 허용</p>
			 *
			 */
			size?: number;
		};
		/**
		 * 결제 건 커서 기반 대용량 다건 조회 성공 응답 정보
		 * @description <p>결제 건 커서 기반 대용량 다건 조회 성공 응답 정보</p>
		 *
		 */
		GetAllPaymentsByCursorResponse: {
			/** 조회된 결제 건 및 커서 정보 리스트 */
			items: components["schemas"]["PaymentWithCursor"][];
		};
		GetAllPaymentsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 고객사의 평균 거래액 현황 조회를 위한 입력 정보
		 * @description <p>고객사의 평균 거래액 현황 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsAverageAmountChartBody: {
			/**
			 * 조회할 평균 거래액 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 평균 거래액 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제취소건 제외 여부
			 * @description <p>true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.</p>
			 *
			 */
			excludeCancelled: boolean;
			/**
			 * 평균 거래액 현황 조회 단위
			 * @description <p>시간별, 월별 단위만 지원됩니다.</p>
			 *
			 */
			timeGranularity: components["schemas"]["AnalyticsTimeGranularity"];
		};
		/**
		 * 고객사의 환불율 조회를 위한 입력 정보
		 * @description <p>고객사의 환불율 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsCancellationRateBody: {
			/**
			 * 환불율 조회 기간의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 환불율 조회 기간의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
		};
		GetAnalyticsCancellationRateError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 고객사의 카드결제 현황 조회를 위한 입력 정보
		 * @description <p>고객사의 카드결제 현황 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsCardChartBody: {
			/**
			 * 조회할 카드결제 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 카드결제 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제취소건 제외 여부
			 * @description <p>true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.</p>
			 *
			 */
			excludeCancelled: boolean;
			/**
			 * 카드결제 현황 조회 단위
			 * @description <p>시간별, 월별 단위만 지원됩니다.</p>
			 *
			 */
			timeGranularity: components["schemas"]["AnalyticsTimeGranularity"];
		};
		GetAnalyticsCardChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 고객사의 카드사별 결제 현황 조회를 위한 입력 정보
		 * @description <p>고객사의 카드사별 결제 현황 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsCardCompanyChartBody: {
			/**
			 * 조회할 카드사별 결제 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 카드사별 결제 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제취소건 제외 여부
			 * @description <p>true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.</p>
			 *
			 */
			excludeCancelled: boolean;
			/**
			 * 카드사별 결제 현황 조회 단위
			 * @description <p>시간별, 월별 단위만 지원됩니다.</p>
			 *
			 */
			timeGranularity: components["schemas"]["AnalyticsTimeGranularity"];
			/** 조회할 카드사 */
			cardCompanies: components["schemas"]["CardCompany"][];
			/** 나머지 집계에 포함되지 않을 카드사 */
			excludesFromRemainders: components["schemas"]["CardCompany"][];
		};
		GetAnalyticsCardCompanyChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 고객사의 간편결제 현황 조회를 위한 입력 정보
		 * @description <p>고객사의 간편결제 현황 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsEasyPayChartBody: {
			/**
			 * 조회할 간편결제 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 간편결제 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제취소건 제외 여부
			 * @description <p>true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.</p>
			 *
			 */
			excludeCancelled: boolean;
			/**
			 * 간편결제 현황 조회 단위
			 * @description <p>시간별, 월별 단위만 지원됩니다.</p>
			 *
			 */
			timeGranularity: components["schemas"]["AnalyticsTimeGranularity"];
		};
		GetAnalyticsEasyPayChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 고객사의 간편결제사별 결제 현황 조회를 위한 입력 정보
		 * @description <p>고객사의 간편결제사별 결제 현황 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsEasyPayProviderChartBody: {
			/**
			 * 조회할 간편결제사별 결제 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 간편결제사별 결제 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제취소건 제외 여부
			 * @description <p>true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.</p>
			 *
			 */
			excludeCancelled: boolean;
			/**
			 * 간편결제사별 결제 현황 조회 단위
			 * @description <p>시간별, 월별 단위만 지원됩니다.</p>
			 *
			 */
			timeGranularity: components["schemas"]["AnalyticsTimeGranularity"];
			/** 조회할 간편결제사 */
			easyPayProviders: components["schemas"]["EasyPayProvider"][];
			/** 나머지 집계에 포함되지 않을 간편결제사 */
			excludesFromRemainders: components["schemas"]["EasyPayProvider"][];
		};
		GetAnalyticsEasyPayProviderChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetAnalyticsOverseasPaymentUsageError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 고객사의 결제 현황 조회를 위한 입력 정보
		 * @description <p>고객사의 결제 현황 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsPaymentChartBody: {
			/**
			 * 조회할 결제 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 결제 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제취소건 제외 여부
			 * @description <p>true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.</p>
			 *
			 */
			excludeCancelled?: boolean;
			/**
			 * 결제 현황 조회 단위
			 * @description <p>시간별, 월별 단위만 지원됩니다.</p>
			 *
			 */
			timeGranularity: components["schemas"]["AnalyticsTimeGranularity"];
		};
		GetAnalyticsPaymentChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 고객사의 결제 현황 인사이트 조회를 위한 입력 정보
		 * @description <p>고객사의 결제 현황 인사이트 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsPaymentChartInsightBody: {
			/**
			 * 조회할 결제 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 결제 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제취소건 제외 여부
			 * @description <p>true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.</p>
			 *
			 */
			excludeCancelled?: boolean;
			/**
			 * 타임존 시간 오프셋
			 * Format: int32
			 * @description <p>입력된 시간 오프셋 기준으로 일, 주, 월이 집계 됩니다.</p>
			 *
			 */
			timezoneHourOffset: number;
		};
		GetAnalyticsPaymentChartInsightError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 고객사의 결제수단 현황 조회를 위한 입력 정보
		 * @description <p>고객사의 결제수단 현황 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsPaymentMethodChartBody: {
			/**
			 * 조회할 결제수단 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 결제수단 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제취소건 제외 여부
			 * @description <p>true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.</p>
			 *
			 */
			excludeCancelled: boolean;
		};
		/**
		 * 고객사의 결제수단 트렌드 조회를 위한 입력 정보
		 * @description <p>고객사의 결제수단 트렌드 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsPaymentMethodTrendChartBody: {
			/**
			 * 조회할 결제수단 트렌드의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 결제수단 트렌드의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제취소건 제외 여부
			 * @description <p>true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.</p>
			 *
			 */
			excludeCancelled: boolean;
			/**
			 * 결제 결제수단 트렌드 조회 단위
			 * @description <p>시간별, 월별 단위만 지원됩니다.</p>
			 *
			 */
			timeGranularity: components["schemas"]["AnalyticsTimeGranularity"];
		};
		/**
		 * 고객사의 결제환경별 결제전환율 조회를 위한 입력 정보
		 * @description <p>고객사의 결제환경별 결제전환율 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsPaymentStatusByPaymentClientChartBody: {
			/**
			 * 조회할 결제 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 결제 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
		};
		/**
		 * 고객사의 결제수단별 결제전환율 조회를 위한 입력 정보
		 * @description <p>고객사의 결제수단별 결제전환율 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsPaymentStatusByPaymentMethodChartBody: {
			/**
			 * 조회할 결제 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 결제 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
		};
		/**
		 * 고객사의 PG사별 결제전환율 조회를 위한 입력 정보
		 * @description <p>고객사의 PG사별 결제전환율 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsPaymentStatusByPgCompanyChartBody: {
			/**
			 * 조회할 결제 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 결제 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
		};
		/**
		 * 고객사의 결제상태 이력 집계 조회를 위한 입력 정보
		 * @description <p>고객사의 결제상태 이력 집계 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsPaymentStatusChartBody: {
			/**
			 * 조회할 결제 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 결제 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
		};
		/**
		 * 고객사의 결제대행사 현황 조회를 위한 입력 정보
		 * @description <p>고객사의 결제대행사 현황 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsPgCompanyChartBody: {
			/**
			 * 조회할 결제대행사 현황의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 결제대행사 현황의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제취소건 제외 여부
			 * @description <p>true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.</p>
			 *
			 */
			excludeCancelled: boolean;
		};
		/**
		 * 고객사의 결제대행사별 거래 추이 조회를 위한 입력 정보
		 * @description <p>고객사의 결제대행사별 거래 추이 조회를 위한 입력 정보</p>
		 *
		 */
		GetAnalyticsPgCompanyTrendChartBody: {
			/**
			 * 조회할 결제대행사별 거래 추이의 시작 시간
			 * Format: date-time
			 */
			from: string;
			/**
			 * 조회할 결제대행사별 거래 추이의 끝 시간
			 * Format: date-time
			 */
			until: string;
			/**
			 * 조회할 결제 통화
			 * @description <p>입력된 통화로 발생한 결제내역만 응답에 포함됩니다.</p>
			 *
			 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제취소건 제외 여부
			 * @description <p>true 이면 결제취소내역은 응답에 포함 및 반영되지 않습니다. false 또는 값을 명시하지 않은 경우 결제취소내역이 응답에 반영됩니다.</p>
			 *
			 */
			excludeCancelled: boolean;
			/**
			 * 결제 결제대행사별 거래 추이 조회 단위
			 * @description <p>시간별, 월별 단위만 지원됩니다.</p>
			 *
			 */
			timeGranularity: components["schemas"]["AnalyticsTimeGranularity"];
			/** 조회할 결제대행사 */
			pgCompanies: components["schemas"]["PgCompany"][];
		};
		GetAverageAmountChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetB2bAccountHolderError:
			| components["schemas"]["B2bBankAccountNotFoundError"]
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bFinancialSystemCommunicationError"]
			| components["schemas"]["B2bFinancialSystemFailureError"]
			| components["schemas"]["B2bFinancialSystemUnderMaintenanceError"]
			| components["schemas"]["B2bForeignExchangeAccountError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bRegularMaintenanceTimeError"]
			| components["schemas"]["B2bSuspendedAccountError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 예금주 조회 응답 정보
		 * @description <p>예금주 조회 응답 정보</p>
		 *
		 */
		GetB2bBankAccountHolderResponse: {
			/** 예금주 */
			accountHolder: string;
		};
		GetB2bCertificateError:
			| components["schemas"]["B2bCertificateUnregisteredError"]
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bMemberCompanyNotFoundError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetB2bCertificateRegistrationUrlError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bMemberCompanyNotFoundError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 인증서 등록 URL 조회 응답 정보
		 * @description <p>인증서 등록 URL 조회 응답 정보</p>
		 *
		 */
		GetB2bCertificateRegistrationUrlResponse: {
			/** 인증서 등록 URL */
			url: string;
		};
		GetB2bCompanyStateError:
			| components["schemas"]["B2bCompanyNotFoundError"]
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bHometaxUnderMaintenanceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 담당자 ID 존재 여부 응답 정보
		 * @description <p>담당자 ID 존재 여부 응답 정보</p>
		 *
		 */
		GetB2bContactIdExistenceResponse: {
			/** 존재 여부 */
			exists: boolean;
		};
		GetB2bMemberCompanyContactError:
			| components["schemas"]["B2bContactNotFoundError"]
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bMemberCompanyNotFoundError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetB2bMemberCompanyError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bMemberCompanyNotFoundError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetB2bTaxInvoiceAttachmentsError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 세금계산서 첨부파일 목록 조회 성공 응답
		 * @description <p>세금계산서 첨부파일 목록 조회 성공 응답</p>
		 *
		 */
		GetB2bTaxInvoiceAttachmentsResponse: {
			/** 첨부파일 목록 */
			attachments: components["schemas"]["B2bTaxInvoiceAttachment"][];
		};
		GetB2bTaxInvoiceError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetB2bTaxInvoicePdfDownloadUrlError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 세금계산서 PDF 다운로드 URL 성공 응답
		 * @description <p>세금계산서 PDF 다운로드 URL 성공 응답</p>
		 *
		 */
		GetB2bTaxInvoicePdfDownloadUrlResponse: {
			/** 세금계산서 PDF 다운로드 URL */
			url: string;
		};
		GetB2bTaxInvoicePopupUrlError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 세금계산서 팝업 URL 성공 응답
		 * @description <p>세금계산서 팝업 URL 성공 응답</p>
		 *
		 */
		GetB2bTaxInvoicePopupUrlResponse: {
			/** 세금계산서 팝업 URL */
			url: string;
		};
		GetB2bTaxInvoicePrintUrlError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 세금계산서 프린트 URL 성공 응답
		 * @description <p>세금계산서 프린트 URL 성공 응답</p>
		 *
		 */
		GetB2bTaxInvoicePrintUrlResponse: {
			/** 세금계산서 프린트 URL */
			url: string;
		};
		GetB2bTaxInvoicesError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 세금계산서 다건 조회 성공 응답
		 * @description <p>세금계산서 다건 조회 성공 응답</p>
		 *
		 */
		GetB2bTaxInvoicesResponse: {
			/** 조회된 세금계산서 목록 */
			items: components["schemas"]["B2bTaxInvoiceSummary"][];
			/** 조회된 페이지 정보 */
			page: components["schemas"]["PageInfo"];
		};
		GetBillingKeyInfoError:
			| components["schemas"]["BillingKeyNotFoundError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/** @description <p>빌링키 다건 조회를 위한 입력 정보</p>
		 *      */
		GetBillingKeyInfosBody: {
			/**
			 * 요청할 페이지 정보
			 * @description <p>미 입력 시 number: 0, size: 10 으로 기본값이 적용됩니다.</p>
			 *
			 */
			page?: components["schemas"]["PageInput"];
			/**
			 * 정렬 조건
			 * @description <p>미 입력 시 sortBy: TIME_TO_PAY, sortOrder: DESC 으로 기본값이 적용됩니다.</p>
			 *
			 */
			sort?: components["schemas"]["BillingKeySortInput"];
			/**
			 * 조회할 빌링키 조건 필터
			 * @description <p>V1 빌링키 건의 경우 일부 필드에 대해 필터가 적용되지 않을 수 있습니다.</p>
			 *
			 */
			filter?: components["schemas"]["BillingKeyFilterInput"];
		};
		GetBillingKeyInfosError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 빌링키 다건 조회 성공 응답 정보
		 * @description <p>빌링키 다건 조회 성공 응답 정보</p>
		 *
		 */
		GetBillingKeyInfosResponse: {
			/** 조회된 빌링키 리스트 */
			items: components["schemas"]["BillingKeyInfo"][];
			/** 조회된 페이지 정보 */
			page: components["schemas"]["PageInfo"];
		};
		GetCashReceiptError:
			| components["schemas"]["CashReceiptNotFoundError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetIdentityVerificationError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["IdentityVerificationNotFoundError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetKakaopayPaymentOrderError:
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 카카오페이 주문 조회 응답
		 * @description <p>카카오페이 주문 조회 응답</p>
		 *
		 */
		GetKakaopayPaymentOrderResponse: {
			/**
			 * HTTP 상태 코드
			 * Format: int32
			 */
			statusCode: number;
			/** HTTP 응답 본문 (JSON) */
			body: string;
		};
		GetMerchantError: components["schemas"]["UnauthorizedError"];
		GetPaymentError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		GetPaymentMethodChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetPaymentMethodTrendChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetPaymentScheduleError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentScheduleNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 결제 예약 다건 조회를 위한 입력 정보
		 * @description <p>결제 예약 다건 조회를 위한 입력 정보</p>
		 *     <p>조회 결과는 결제 예정 시점(timeToPay) 기준 최신 순으로 정렬됩니다.</p>
		 *
		 */
		GetPaymentSchedulesBody: {
			/**
			 * 요청할 페이지 정보
			 * @description <p>미 입력 시 number: 0, size: 10 으로 기본값이 적용됩니다.</p>
			 *
			 */
			page?: components["schemas"]["PageInput"];
			/**
			 * 정렬 조건
			 * @description <p>미 입력 시 sortBy: TIME_TO_PAY, sortOrder: DESC 으로 기본값이 적용됩니다.</p>
			 *
			 */
			sort?: components["schemas"]["PaymentScheduleSortInput"];
			/** 조회할 결제 예약 건의 조건 필터 */
			filter?: components["schemas"]["PaymentScheduleFilterInput"];
		};
		GetPaymentSchedulesError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 결제 예약 다건 조회 성공 응답 정보
		 * @description <p>결제 예약 다건 조회 성공 응답 정보</p>
		 *
		 */
		GetPaymentSchedulesResponse: {
			/** 조회된 결제 예약 건 리스트 */
			items: components["schemas"]["PaymentSchedule"][];
			/** 조회된 페이지 정보 */
			page: components["schemas"]["PageInfo"];
		};
		GetPaymentStatusByPaymentClientChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetPaymentStatusByPaymentMethodChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetPaymentStatusByPgCompanyChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetPaymentStatusChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/** @description <p>결제 건 다건 조회를 위한 입력 정보</p>
		 *      */
		GetPaymentsBody: {
			/**
			 * 요청할 페이지 정보
			 * @description <p>미 입력 시 number: 0, size: 10 으로 기본값이 적용됩니다.</p>
			 *
			 */
			page?: components["schemas"]["PageInput"];
			/**
			 * 조회할 결제 건 조건 필터
			 * @description <p>V1 결제 건의 경우 일부 필드에 대해 필터가 적용되지 않을 수 있습니다.</p>
			 *
			 */
			filter?: components["schemas"]["PaymentFilterInput"];
		};
		GetPaymentsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 결제 건 다건 조회 성공 응답 정보
		 * @description <p>결제 건 다건 조회 성공 응답 정보</p>
		 *
		 */
		GetPaymentsResponse: {
			/** 조회된 결제 건 리스트 */
			items: components["schemas"]["Payment"][];
			/** 조회된 페이지 정보 */
			page: components["schemas"]["PageInfo"];
		};
		GetPgCompanyChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetPgCompanyTrendChartError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformAccountHolderError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformExternalApiFailedError"]
			| components["schemas"]["PlatformExternalApiTemporarilyFailedError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformNotSupportedBankError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 추가 수수료 정책 다건 조회를 위한 입력 정보
		 * @description <p>추가 수수료 정책 다건 조회를 위한 입력 정보</p>
		 *
		 */
		GetPlatformAdditionalFeePoliciesBody: {
			/** 요청할 페이지 정보 */
			page?: components["schemas"]["PageInput"];
			/** 조회할 추가 수수료 정책 조건 필터 */
			filter?: components["schemas"]["PlatformAdditionalFeePolicyFilterInput"];
		};
		GetPlatformAdditionalFeePoliciesError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 추가 수수료 정책 다건 조회 성공 응답 정보
		 * @description <p>추가 수수료 정책 다건 조회 성공 응답 정보</p>
		 *
		 */
		GetPlatformAdditionalFeePoliciesResponse: {
			/** 조회된 추가 수수료 정책 리스트 */
			items: components["schemas"]["PlatformAdditionalFeePolicy"][];
			/** 조회된 페이지 정보 */
			page: components["schemas"]["PageInfo"];
		};
		GetPlatformAdditionalFeePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAdditionalFeePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformAdditionalFeePolicyScheduleError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAdditionalFeePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformBulkPayoutError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformBulkPayoutNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformBulkPayoutPartnerSettlementsBody: {
			filter?: components["schemas"]["PlatformBulkPayoutPartnerSettlementsFilterInput"];
			page?: components["schemas"]["PageInput"];
			isForTest?: boolean;
		};
		GetPlatformBulkPayoutPartnerSettlementsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformBulkPayoutNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformBulkPayoutPartnerSettlementsResponse: {
			items: components["schemas"]["PlatformBulkPayoutPartnerSettlement"][];
			page: components["schemas"]["PageInfo"];
			counts: components["schemas"]["PlatformPartnerSettlementStatusStats"];
		};
		GetPlatformBulkPayoutsBody: {
			isForTest?: boolean;
			page?: components["schemas"]["PageInput"];
			filter?: components["schemas"]["PlatformBulkPayoutFilterInput"];
		};
		GetPlatformBulkPayoutsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformBulkPayoutsResponse: {
			items: components["schemas"]["PlatformBulkPayout"][];
			page: components["schemas"]["PageInfo"];
			counts: components["schemas"]["PlatformBulkPayoutStatusStats"];
		};
		GetPlatformContractError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformContractScheduleError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 계약 다건 조회를 위한 입력 정보
		 * @description <p>계약 다건 조회를 위한 입력 정보</p>
		 *
		 */
		GetPlatformContractsBody: {
			/** 요청할 페이지 정보 */
			page?: components["schemas"]["PageInput"];
			/** 조회할 계약 조건 필터 */
			filter?: components["schemas"]["PlatformContractFilterInput"];
		};
		GetPlatformContractsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 계약 다건 조회 성공 응답
		 * @description <p>계약 다건 조회 성공 응답</p>
		 *
		 */
		GetPlatformContractsResponse: {
			/** 조회된 계약 리스트 */
			items: components["schemas"]["PlatformContract"][];
			/** 조회된 페이지 정보 */
			page: components["schemas"]["PageInfo"];
		};
		/**
		 * 할인 분담 정책 다건 조회를 위한 입력 정보
		 * @description <p>할인 분담 정책 다건 조회를 위한 입력 정보</p>
		 *
		 */
		GetPlatformDiscountSharePoliciesBody: {
			/** 요청할 페이지 정보 */
			page?: components["schemas"]["PageInput"];
			/** 조회할 할인 분담 정책 조건 필터 */
			filter?: components["schemas"]["PlatformDiscountSharePolicyFilterInput"];
		};
		GetPlatformDiscountSharePoliciesError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 할인 분담 정책 다건 조회 성공 응답 정보
		 * @description <p>할인 분담 정책 다건 조회 성공 응답 정보</p>
		 *
		 */
		GetPlatformDiscountSharePoliciesResponse: {
			/** 조회된 할인 분담 정책 리스트 */
			items: components["schemas"]["PlatformDiscountSharePolicy"][];
			/** 조회된 페이지 정보 */
			page: components["schemas"]["PageInfo"];
		};
		GetPlatformDiscountSharePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformDiscountSharePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformDiscountSharePolicyFilterOptionsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformDiscountSharePolicyScheduleError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformDiscountSharePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformError:
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformHolidaysError: components["schemas"]["UnauthorizedError"];
		/**
		 * 공휴일 조회
		 * @description <p>공휴일 조회</p>
		 *
		 */
		GetPlatformHolidaysResponse: {
			/** 공휴일 리스트 */
			holidays: components["schemas"]["PlatformHoliday"][];
		};
		/**
		 * 파트너 현황 조회를 위한 입력 정보
		 * @description <p>파트너 현황 조회를 위한 입력 정보</p>
		 *
		 */
		GetPlatformPartnerDashboardBody: {
			/**
			 * 테스트 조회 여부
			 * @description <p>true 이면 isForTest 가 true 인 파트너들을 조회하고, false 이면 isForTest 가 false 인 파트너들을 조회합니다. 기본값은 false 입니다.</p>
			 *
			 */
			isForTest?: boolean;
		};
		GetPlatformPartnerDashboardError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformPartnerError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformPartnerFilterOptionsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformPartnerScheduleError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformPartnerSettlementCurrenciesBody: {
			isForTest: boolean;
		};
		GetPlatformPartnerSettlementCurrenciesError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 정산내역 통화 조회 결과
		 * @description <p>정산내역 통화 조회 결과</p>
		 *
		 */
		GetPlatformPartnerSettlementCurrenciesResponse: {
			/** 통화 단위 */
			settlementCurrencies: components["schemas"]["Currency"][];
		};
		GetPlatformPartnerSettlementDashboardBody: {
			filter: components["schemas"]["PlatformPartnerSettlementFilterInput"];
			isForTest: boolean;
		};
		GetPlatformPartnerSettlementDashboardError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformPartnerSettlementDatesBody: {
			isForTest: boolean;
		};
		GetPlatformPartnerSettlementDatesError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 정산일 리스트 조회 결과
		 * @description <p>정산일 리스트 조회 결과</p>
		 *
		 */
		GetPlatformPartnerSettlementDatesResponse: {
			settlementDates: string[];
		};
		/**
		 * 정산내역 다건 조회를 위한 입력 정보
		 * @description <p>정산내역 다건 조회를 위한 입력 정보</p>
		 *
		 */
		GetPlatformPartnerSettlementsBody: {
			/** 요청할 페이지 정보 */
			page?: components["schemas"]["PageInput"];
			/** 조회할 정산내역 조건 필터 */
			filter: components["schemas"]["PlatformPartnerSettlementFilterInput"];
			isForTest: boolean;
		};
		GetPlatformPartnerSettlementsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 정산내역 다건 조회 성공 응답 정보
		 * @description <p>정산내역 다건 조회 성공 응답 정보</p>
		 *
		 */
		GetPlatformPartnerSettlementsResponse: {
			/** 조회된 정산내역 리스트 */
			items: components["schemas"]["PlatformPartnerSettlement"][];
			/** 조회된 페이지 정보 */
			page: components["schemas"]["PageInfo"];
			/** 정산내역 상태 별 갯수 */
			counts: components["schemas"]["PlatformPartnerSettlementStatusStats"];
		};
		/**
		 * 파트너 다건 조회를 위한 입력 정보
		 * @description <p>파트너 다건 조회를 위한 입력 정보</p>
		 *
		 */
		GetPlatformPartnersBody: {
			/** 요청할 페이지 정보 */
			page?: components["schemas"]["PageInput"];
			/** 조회할 파트너 조건 필터 */
			filter?: components["schemas"]["PlatformPartnerFilterInput"];
		};
		GetPlatformPartnersError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 파트너 다건 조회 성공 응답 정보
		 * @description <p>파트너 다건 조회 성공 응답 정보</p>
		 *
		 */
		GetPlatformPartnersResponse: {
			/** 조회된 파트너 리스트 */
			items: components["schemas"]["PlatformPartner"][];
			/** 조회된 페이지 정보 */
			page: components["schemas"]["PageInfo"];
		};
		GetPlatformPayableSettlementDatesError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 지급 가능한 정산일 리스트 조회 성공 응답 정보
		 * @description <p>지급 가능한 정산일 리스트 조회 성공 응답 정보</p>
		 *
		 */
		GetPlatformPayableSettlementDatesResponse: {
			/** IN_PROCESS, SETTLED 상태의 Transfer가 등록되어 있는 정산일 리스트 */
			settlementDates: string[];
		};
		GetPlatformPayoutError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPayoutNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformPayoutsBody: {
			isForTest?: boolean;
			page?: components["schemas"]["PageInput"];
			filter?: components["schemas"]["PlatformPayoutFilterInput"];
		};
		GetPlatformPayoutsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformPayoutsResponse: {
			items: components["schemas"]["PlatformPayout"][];
			page: components["schemas"]["PageInfo"];
			counts: components["schemas"]["PlatformPayoutStatusStats"];
		};
		GetPlatformTransferDashboardBody: {
			/** @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *      */
			settlementDate: string;
			isForTest?: boolean;
		};
		GetPlatformTransferDashboardError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformTransferError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformTransferNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformTransferFilterOptionsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 정산건 요약 다건 조회를 위한 입력 정보
		 * @description <p>정산건 요약 다건 조회를 위한 입력 정보</p>
		 *
		 */
		GetPlatformTransferSummariesBody: {
			/** 요청할 페이지 정보 */
			page?: components["schemas"]["PageInput"];
			/** 조회할 정산건 조건 필터 */
			filter?: components["schemas"]["PlatformTransferFilterInput"];
		};
		GetPlatformTransferSummariesError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		GetPlatformTransferSummariesResponse: {
			transferSummaries: components["schemas"]["PlatformTransferSummary"][];
			page: components["schemas"]["PageInfo"];
		};
		GetV2SupportedChannelsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 채널 다건 조회 성공 응답 정보
		 * @description <p>채널 다건 조회 성공 응답 정보</p>
		 *
		 */
		GetV2SupportedChannelsResponse: {
			/** 조회된 채널 리스트 */
			items: components["schemas"]["Channel"][];
		};
		/**
		 * 본인인증 내역
		 * @description <p>본인인증 내역</p>
		 *
		 */
		IdentityVerification:
			| components["schemas"]["FailedIdentityVerification"]
			| components["schemas"]["ReadyIdentityVerification"]
			| components["schemas"]["VerifiedIdentityVerification"];
		/**
		 * 본인인증 건이 이미 API로 요청된 상태인 경우
		 * @description <p>본인인증 건이 이미 API로 요청된 상태인 경우</p>
		 *
		 */
		IdentityVerificationAlreadySentError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "IDENTITY_VERIFICATION_ALREADY_SENT";
			message?: string;
		};
		/**
		 * 본인인증 건이 이미 인증 완료된 상태인 경우
		 * @description <p>본인인증 건이 이미 인증 완료된 상태인 경우</p>
		 *
		 */
		IdentityVerificationAlreadyVerifiedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "IDENTITY_VERIFICATION_ALREADY_VERIFIED";
			message?: string;
		};
		/**
		 * 본인인증 방식
		 * @description <p>본인인증 방식</p>
		 *
		 * @enum {string}
		 */
		IdentityVerificationMethod: "APP" | "SMS";
		/**
		 * 요청된 본인인증 건이 존재하지 않는 경우
		 * @description <p>요청된 본인인증 건이 존재하지 않는 경우</p>
		 *
		 */
		IdentityVerificationNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "IDENTITY_VERIFICATION_NOT_FOUND";
			message?: string;
		};
		/**
		 * 본인인증 건이 API로 요청된 상태가 아닌 경우
		 * @description <p>본인인증 건이 API로 요청된 상태가 아닌 경우</p>
		 *
		 */
		IdentityVerificationNotSentError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "IDENTITY_VERIFICATION_NOT_SENT";
			message?: string;
		};
		/**
		 * 본인인증 통신사
		 * @description <p>본인인증 통신사</p>
		 *
		 * @enum {string}
		 */
		IdentityVerificationOperator:
			| "KT"
			| "KT_MVNO"
			| "LGU"
			| "LGU_MVNO"
			| "SKT"
			| "SKT_MVNO";
		/**
		 * 요청 시 고객 정보
		 * @description <p>요청 시 고객 정보</p>
		 *
		 */
		IdentityVerificationRequestedCustomer: {
			/** 식별 아이디 */
			id?: string;
			/** 이름 */
			name?: string;
			/**
			 * 전화번호
			 * @description <p>특수 문자(-) 없이 숫자로만 이루어진 번호 형식입니다.</p>
			 *
			 */
			phoneNumber?: string;
		};
		/**
		 * 인증된 고객 정보
		 * @description <p>인증된 고객 정보</p>
		 *
		 */
		IdentityVerificationVerifiedCustomer: {
			/** 식별 아이디 */
			id?: string;
			/** 이름 */
			name: string;
			/** 통신사 */
			operator?: components["schemas"]["IdentityVerificationOperator"];
			/**
			 * 전화번호
			 * @description <p>특수 문자(-) 없이 숫자로만 이루어진 번호 형식입니다.</p>
			 *
			 */
			phoneNumber?: string;
			/**
			 * 생년월일 (yyyy-MM-dd)
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			birthDate: string;
			/** 성별 */
			gender: components["schemas"]["Gender"];
			/** 외국인 여부 */
			isForeigner?: boolean;
			/** CI (개인 고유 식별키) */
			ci: string;
			/** DI (사이트별 개인 고유 식별키) */
			di: string;
		};
		/**
		 * 빌링키 발급 시 결제 수단 입력 양식
		 * @description <p>빌링키 발급 시 결제 수단 입력 양식</p>
		 *
		 */
		InstantBillingKeyPaymentMethodInput: {
			card?: components["schemas"]["InstantBillingKeyPaymentMethodInputCard"];
		};
		/**
		 * 카드 수단 정보 입력 양식
		 * @description <p>카드 수단 정보 입력 양식</p>
		 *
		 */
		InstantBillingKeyPaymentMethodInputCard: {
			credential: components["schemas"]["CardCredential"];
		};
		/**
		 * 수기 결제 요청 정보
		 * @description <p>수기 결제 요청 정보</p>
		 *
		 */
		InstantPaymentInput: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/**
			 * 채널 키
			 * @description <p>채널 키 또는 채널 그룹 ID 필수</p>
			 *
			 */
			channelKey?: string;
			/**
			 * 채널 그룹 ID
			 * @description <p>채널 키 또는 채널 그룹 ID 필수</p>
			 *
			 */
			channelGroupId?: string;
			/** 결제수단 정보 */
			method: components["schemas"]["InstantPaymentMethodInput"];
			/** 주문명 */
			orderName: string;
			/**
			 * 문화비 지출 여부
			 * @description <p>기본값은 false 입니다.</p>
			 *
			 */
			isCulturalExpense?: boolean;
			/**
			 * 에스크로 결제 여부
			 * @description <p>기본값은 false 입니다.</p>
			 *
			 */
			isEscrow?: boolean;
			/** 고객 정보 */
			customer?: components["schemas"]["CustomerInput"];
			/** 사용자 지정 데이터 */
			customData?: string;
			/** 결제 금액 세부 입력 정보 */
			amount: components["schemas"]["PaymentAmountInput"];
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 결제 국가 */
			country?: components["schemas"]["Country"];
			/**
			 * 웹훅 주소
			 * @description <p>결제 승인/실패 시 요청을 받을 웹훅 주소입니다.
			 *     상점에 설정되어 있는 값보다 우선적으로 적용됩니다.
			 *     입력된 값이 없을 경우에는 빈 배열로 해석됩니다.</p>
			 *
			 */
			noticeUrls?: string[];
			/**
			 * 상품 정보
			 * @description <p>입력된 값이 없을 경우에는 빈 배열로 해석됩니다.</p>
			 *
			 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 상품 개수
			 * Format: int32
			 */
			productCount?: number;
			/** 상품 유형 */
			productType?: components["schemas"]["PaymentProductType"];
			/** 배송지 주소 */
			shippingAddress?: components["schemas"]["SeparatedAddressInput"];
		};
		/**
		 * 수기 결제 수단 입력 정보
		 * @description <p>수기 결제 수단 입력 정보</p>
		 *     <p>하나의 필드만 입력합니다.</p>
		 *
		 */
		InstantPaymentMethodInput: {
			/** 카드 */
			card?: components["schemas"]["InstantPaymentMethodInputCard"];
			/** 가상계좌 */
			virtualAccount?: components["schemas"]["InstantPaymentMethodInputVirtualAccount"];
		};
		/**
		 * 카드 수단 정보 입력 정보
		 * @description <p>카드 수단 정보 입력 정보</p>
		 *
		 */
		InstantPaymentMethodInputCard: {
			/** 카드 인증 관련 정보 */
			credential: components["schemas"]["CardCredential"];
			/**
			 * 카드 할부 개월 수
			 * Format: int32
			 */
			installmentMonth?: number;
			/** 무이자 할부 적용 여부 */
			useFreeInstallmentPlan?: boolean;
			/** 무이자 할부 이자를 고객사가 부담할지 여부 */
			useFreeInterestFromMerchant?: boolean;
			/** 카드 포인트 사용 여부 */
			useCardPoint?: boolean;
		};
		/**
		 * 가상계좌 수단 정보 입력 정보
		 * @description <p>가상계좌 수단 정보 입력 정보</p>
		 *
		 */
		InstantPaymentMethodInputVirtualAccount: {
			/** 은행 */
			bank: components["schemas"]["Bank"];
			/** 입금 만료 기한 */
			expiry: components["schemas"]["InstantPaymentMethodInputVirtualAccountExpiry"];
			/** 가상계좌 유형 */
			option: components["schemas"]["InstantPaymentMethodInputVirtualAccountOption"];
			/** 현금영수증 정보 */
			cashReceipt: components["schemas"]["InstantPaymentMethodInputVirtualAccountCashReceiptInfo"];
			/** 예금주명 */
			remitteeName?: string;
		};
		/**
		 * 가상계좌 결제 시 현금영수증 정보
		 * @description <p>가상계좌 결제 시 현금영수증 정보</p>
		 *
		 */
		InstantPaymentMethodInputVirtualAccountCashReceiptInfo: {
			/** 현금영수증 유형 */
			type: components["schemas"]["CashReceiptInputType"];
			/** 사용자 식별 번호 */
			customerIdentityNumber: string;
		};
		/**
		 * 입금 만료 기한
		 * @description <p>입금 만료 기한</p>
		 *     <p>validHours와 dueDate 둘 중 하나의 필드만 입력합니다.</p>
		 *
		 */
		InstantPaymentMethodInputVirtualAccountExpiry: {
			/**
			 * 유효 시간
			 * Format: int32
			 * @description <p>시간 단위로 입력합니다.</p>
			 *
			 */
			validHours?: number;
			/**
			 * 만료 시점
			 * Format: date-time
			 */
			dueDate?: string;
		};
		/**
		 * 가상계좌 발급 방식
		 * @description <p>가상계좌 발급 방식</p>
		 *
		 */
		InstantPaymentMethodInputVirtualAccountOption: {
			/** 발급 유형 */
			type: components["schemas"]["InstantPaymentMethodInputVirtualAccountOptionType"];
			/**
			 * 고정식 가상계좌 발급 방식
			 * @description <p>발급 유형을 FIXED 로 선택했을 시에만 입력합니다.</p>
			 *
			 */
			fixed?: components["schemas"]["InstantPaymentMethodInputVirtualAccountOptionFixed"];
		};
		/**
		 * 고정식 가상계좌 발급 유형
		 * @description <p>고정식 가상계좌 발급 유형</p>
		 *     <p>pgAccountId, accountNumber 유형 중 한 개의 필드만 입력합니다.</p>
		 *
		 */
		InstantPaymentMethodInputVirtualAccountOptionFixed: {
			/**
			 * Account ID 고정식 가상계좌
			 * @description <p>고객사가 가상계좌번호를 직접 관리하지 않고 PG사가 pgAccountId에 매핑되는 가상계좌번호를 내려주는 방식입니다.
			 *     동일한 pgAccountId로 가상계좌 발급 요청시에는 항상 같은 가상계좌번호가 내려옵니다.</p>
			 *
			 */
			pgAccountId?: string;
			/**
			 * Account Number 고정식 가상계좌
			 * @description <p>PG사가 일정 개수만큼의 가상계좌번호를 발급하여 고객사에게 미리 전달하고 고객사가 그 중 하나를 선택하여 사용하는 방식입니다.</p>
			 *
			 */
			accountNumber?: string;
		};
		/**
		 * 가상계좌 발급 유형
		 * @description <p>가상계좌 발급 유형</p>
		 *
		 * @enum {string}
		 */
		InstantPaymentMethodInputVirtualAccountOptionType: "FIXED" | "NORMAL";
		/**
		 * 수기 결제가 완료된 결제 건 요약 정보
		 * @description <p>수기 결제가 완료된 결제 건 요약 정보</p>
		 *
		 */
		InstantPaymentSummary: {
			/** PG사 결제 아이디 */
			pgTxId: string;
			/**
			 * 결제 완료 시점
			 * Format: date-time
			 */
			paidAt: string;
		};
		/**
		 * 요청된 입력 정보가 유효하지 않은 경우
		 * @description <p>요청된 입력 정보가 유효하지 않은 경우</p>
		 *     <p>허가되지 않은 값, 올바르지 않은 형식의 요청 등이 모두 해당됩니다.</p>
		 *
		 */
		InvalidRequestError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "INVALID_REQUEST";
			message?: string;
		};
		IssueB2bTaxInvoiceError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["B2bTaxInvoiceNotRequestedStatusError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 세금계산서 발행 정보
		 * @description <p>세금계산서 발행 정보</p>
		 *
		 */
		IssueB2bTaxInvoiceRequestBody: {
			/** 사업자등록번호 */
			brn: string;
			/** 세금계산서 문서 번호 */
			documentKey: string;
			/**
			 * 문서 번호 유형
			 * @description <p>기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
			 *
			 */
			documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
			/** 메모 */
			memo?: string;
			/** 이메일 제목 */
			emailSubject?: string;
		};
		/**
		 * 빌링키 발급 요청 양식
		 * @description <p>빌링키 발급 요청 양식</p>
		 *
		 */
		IssueBillingKeyBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/** 빌링키 결제 수단 정보 */
			method: components["schemas"]["InstantBillingKeyPaymentMethodInput"];
			/**
			 * 채널 키
			 * @description <p>채널 키 또는 채널 그룹 ID 필수</p>
			 *
			 */
			channelKey?: string;
			/**
			 * 채널 그룹 ID
			 * @description <p>채널 키 또는 채널 그룹 ID 필수</p>
			 *
			 */
			channelGroupId?: string;
			/** 고객 정보 */
			customer?: components["schemas"]["CustomerInput"];
			/** 사용자 지정 데이터 */
			customData?: string;
			/** PG사별 추가 파라미터 ("PG사별 연동 가이드" 참고) */
			bypass?: Record<string, never>;
			/**
			 * 웹훅 주소
			 * @description <p>빌링키 발급 시 요청을 받을 웹훅 주소입니다.
			 *     상점에 설정되어 있는 값보다 우선적으로 적용됩니다.
			 *     입력된 값이 없을 경우에는 빈 배열로 해석됩니다.</p>
			 *
			 */
			noticeUrls?: string[];
		};
		IssueBillingKeyError:
			| components["schemas"]["ChannelNotFoundError"]
			| components["schemas"]["ChannelSpecificError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 빌링키 발급 성공 응답
		 * @description <p>빌링키 발급 성공 응답</p>
		 *
		 */
		IssueBillingKeyResponse: {
			/** 빌링키 정보 */
			billingKeyInfo: components["schemas"]["BillingKeyInfoSummary"];
			/** 발급에 실패한 채널이 있을시 실패 정보 */
			channelSpecificFailures?: components["schemas"]["ChannelSpecificFailure"][];
		};
		/**
		 * 현금영수증 발급 요청 양식
		 * @description <p>현금영수증 발급 요청 양식</p>
		 *
		 */
		IssueCashReceiptBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/**
			 * 결제 건 아이디
			 * @description <p>외부 결제 건에 대한 수동 발급의 경우, 아이디를 직접 채번하여 입력합니다.</p>
			 *
			 */
			paymentId: string;
			/** 채널 키 */
			channelKey: string;
			/** 현금 영수증 유형 */
			type: components["schemas"]["CashReceiptType"];
			/** 주문명 */
			orderName: string;
			/** 화폐 */
			currency: components["schemas"]["Currency"];
			/** 금액 세부 입력 정보 */
			amount: components["schemas"]["PaymentAmountInput"];
			/** 상품 유형 */
			productType?: components["schemas"]["PaymentProductType"];
			/** 고객 정보 */
			customer: components["schemas"]["IssueCashReceiptCustomerInput"];
			/**
			 * 결제 일자
			 * Format: date-time
			 */
			paidAt?: string;
		};
		/**
		 * 현금영수증 발급 시 고객 관련 입력 정보
		 * @description <p>현금영수증 발급 시 고객 관련 입력 정보</p>
		 *
		 */
		IssueCashReceiptCustomerInput: {
			/** 고객 식별값 */
			identityNumber: string;
			/** 이름 */
			name?: string;
			/** 이메일 */
			email?: string;
			/** 전화번호 */
			phoneNumber?: string;
		};
		IssueCashReceiptError:
			| components["schemas"]["CashReceiptAlreadyIssuedError"]
			| components["schemas"]["ChannelNotFoundError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 현금 영수증 발급 성공 응답
		 * @description <p>현금 영수증 발급 성공 응답</p>
		 *
		 */
		IssueCashReceiptResponse: {
			cashReceipt: components["schemas"]["CashReceiptSummary"];
		};
		/**
		 * 발급 실패
		 * @description <p>발급 실패</p>
		 *
		 */
		IssueFailedCashReceipt: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "ISSUE_FAILED";
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제 건 아이디 */
			paymentId: string;
			/** 현금영수증 발급에 사용된 채널 */
			channel?: components["schemas"]["SelectedChannel"];
			/** 주문명 */
			orderName: string;
			/** 수동 발급 여부 */
			isManual: boolean;
		};
		/**
		 * 빌링키 발급 완료 상태 건
		 * @description <p>빌링키 발급 완료 상태 건</p>
		 *
		 */
		IssuedBillingKeyInfo: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "ISSUED";
			/** 빌링키 */
			billingKey: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/**
			 * 빌링키 결제수단 상세 정보
			 * @description <p>추후 슈퍼빌링키 기능 제공 시 여러 결제수단 정보가 담길 수 있습니다.</p>
			 *
			 */
			methods?: components["schemas"]["BillingKeyPaymentMethod"][];
			/**
			 * 빌링키 발급 시 사용된 채널
			 * @description <p>추후 슈퍼빌링키 기능 제공 시 여러 채널 정보가 담길 수 있습니다.</p>
			 *
			 */
			channels: components["schemas"]["SelectedChannel"][];
			/** 고객 정보 */
			customer: components["schemas"]["Customer"];
			/** 사용자 지정 데이터 */
			customData?: string;
			/** 고객사가 채번하는 빌링키 발급 건 고유 아이디 */
			issueId?: string;
			/** 빌링키 발급 건 이름 */
			issueName?: string;
			/**
			 * 발급 요청 시점
			 * Format: date-time
			 */
			requestedAt?: string;
			/**
			 * 발급 시점
			 * Format: date-time
			 */
			issuedAt: string;
			/** 채널 그룹 */
			channelGroup?: components["schemas"]["ChannelGroupSummary"];
			/**
			 * 채널 별 빌링키 발급 응답
			 * @description <p>슈퍼빌링키의 경우, 빌링키 발급이 성공하더라도 일부 채널에 대한 빌링키 발급은 실패할 수 있습니다.</p>
			 *
			 */
			pgBillingKeyIssueResponses?: components["schemas"]["PgBillingKeyIssueResponse"][];
		};
		/**
		 * 발급 완료
		 * @description <p>발급 완료</p>
		 *
		 */
		IssuedCashReceipt: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "ISSUED";
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제 건 아이디 */
			paymentId: string;
			/** 현금영수증 발급에 사용된 채널 */
			channel: components["schemas"]["SelectedChannel"];
			/**
			 * 결제 금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/**
			 * 부가세액
			 * Format: int64
			 */
			vatAmount?: number;
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 주문명 */
			orderName: string;
			/** 수동 발급 여부 */
			isManual: boolean;
			/** 현금영수증 유형 */
			type?: components["schemas"]["CashReceiptType"];
			/** PG사 현금영수증 아이디 */
			pgReceiptId?: string;
			/** 승인 번호 */
			issueNumber: string;
			/** 현금영수증 URL */
			url?: string;
			/**
			 * 발급 시점
			 * Format: date-time
			 */
			issuedAt: string;
		};
		/**
		 * 발급 완료된 현금영수증
		 * @description <p>발급 완료된 현금영수증</p>
		 *
		 */
		IssuedPaymentCashReceipt: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "ISSUED";
			/** 현금영수증 유형 */
			type?: components["schemas"]["CashReceiptType"];
			/** PG사 영수증 발급 아이디 */
			pgReceiptId?: string;
			/** 승인 번호 */
			issueNumber: string;
			/**
			 * 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 현금영수증 URL */
			url?: string;
			/**
			 * 발급 시점
			 * Format: date-time
			 */
			issuedAt: string;
		};
		/**
		 * 빌링키 발급 성공 채널 응답
		 * @description <p>빌링키 발급 성공 채널 응답</p>
		 *
		 */
		IssuedPgBillingKeyIssueResponse: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "ISSUED";
			/**
			 * 채널
			 * @description <p>빌링키 발급을 시도한 채널입니다.</p>
			 *
			 */
			channel: components["schemas"]["SelectedChannel"];
			/** PG사 거래 아이디 */
			pgTxId?: string;
			/**
			 * 빌링키 결제수단 상세 정보
			 * @description <p>채널에 대응되는 PG사에서 응답한 빌링키 발급 수단 정보입니다.</p>
			 *
			 */
			method?: components["schemas"]["BillingKeyPaymentMethod"];
		};
		/**
		 * API key 로그인을 위한 입력 정보
		 * @description <p>API key 로그인을 위한 입력 정보</p>
		 *
		 */
		LoginViaApiKeyBody: {
			/** 발급받은 API key */
			apiKey: string;
		};
		LoginViaApiKeyError:
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * API key 로그인 성공 응답
		 * @description <p>API key 로그인 성공 응답</p>
		 *
		 */
		LoginViaApiKeyResponse: {
			/**
			 * 인증에 사용하는 엑세스 토큰
			 * @description <p>하루의 유효기간을 가지고 있습니다.</p>
			 *
			 */
			accessToken: string;
			/**
			 * 토큰 재발급 및 유효기간 연장을 위해 사용하는 리프레시 토큰
			 * @description <p>일주일의 유효기간을 가지고 있으며, 리프레시 토큰을 통해 유효기간이 연장된 새로운 엑세스 토큰을 발급받을 수 있습니다.</p>
			 *
			 */
			refreshToken: string;
		};
		/**
		 * API Secret 로그인을 위한 입력 정보
		 * @description <p>API Secret 로그인을 위한 입력 정보</p>
		 *
		 */
		LoginViaApiSecretBody: {
			/** 발급받은 API secret */
			apiSecret: string;
		};
		LoginViaApiSecretError:
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * API key 로그인 성공 응답
		 * @description <p>API key 로그인 성공 응답</p>
		 *
		 */
		LoginViaApiSecretResponse: {
			/**
			 * 인증에 사용하는 엑세스 토큰
			 * @description <p>하루의 유효기간을 가지고 있습니다.</p>
			 *
			 */
			accessToken: string;
			/**
			 * 토큰 재발급 및 유효기간 연장을 위해 사용하는 리프레시 토큰
			 * @description <p>일주일의 유효기간을 가지고 있으며, 리프레시 토큰을 통해 유효기간이 연장된 새로운 엑세스 토큰을 발급받을 수 있습니다.</p>
			 *
			 */
			refreshToken: string;
		};
		/**
		 * 고객사 정보
		 * @description <p>고객사 정보</p>
		 *
		 */
		Merchant: {
			/** 고객사 아이디 */
			id: string;
			graphqlId: string;
			/** 리포트 정보 */
			analytics: components["schemas"]["Analytics"];
		};
		/**
		 * 에스크로 배송 정보 수정 입력 정보
		 * @description <p>에스크로 배송 정보 수정 입력 정보</p>
		 *
		 */
		ModifyEscrowLogisticsBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/** 에스크로 발송자 정보 */
			sender?: components["schemas"]["PaymentEscrowSenderInput"];
			/** 에스크로 수취인 정보 */
			receiver?: components["schemas"]["PaymentEscrowReceiverInput"];
			/** 에스크로 물류 정보 */
			logistics: components["schemas"]["PaymentLogistics"];
			/**
			 * 이메일 알림 전송 여부
			 * @description <p>에스크로 구매 확정 시 이메일로 알림을 보낼지 여부입니다.</p>
			 *
			 */
			sendEmail?: boolean;
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
		};
		ModifyEscrowLogisticsError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentNotFoundError"]
			| components["schemas"]["PaymentNotPaidError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 에스크로 배송 정보 수정 성공 응답
		 * @description <p>에스크로 배송 정보 수정 성공 응답</p>
		 *
		 */
		ModifyEscrowLogisticsResponse: {
			/** 송장 번호 */
			invoiceNumber: string;
			/**
			 * 발송 시점
			 * Format: date-time
			 */
			sentAt: string;
			/**
			 * 에스크로 정보 수정 시점
			 * Format: date-time
			 */
			modifiedAt: string;
		};
		/**
		 * 월 및 일자 정보
		 * @description <p>월 및 일자 정보</p>
		 *
		 */
		MonthDay: {
			/** Format: int32 */
			month: number;
			/** Format: int32 */
			day: number;
		};
		/**
		 * 한 줄 형식 주소
		 * @description <p>한 줄 형식 주소</p>
		 *     <p>한 줄 형식 주소만 존재합니다.</p>
		 *
		 */
		OneLineAddress: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "ONE_LINE";
			/** 주소 (한 줄) */
			oneLine: string;
		};
		/**
		 * 반환된 페이지 결과 정보
		 * @description <p>반환된 페이지 결과 정보</p>
		 *
		 */
		PageInfo: {
			/**
			 * 요청된 페이지 번호
			 * Format: int32
			 */
			number: number;
			/**
			 * 요청된 페이지 당 객체 수
			 * Format: int32
			 */
			size: number;
			/**
			 * 실제 반환된 객체 수
			 * Format: int32
			 */
			totalCount: number;
		};
		/**
		 * 다건 조회 API 에 사용되는 페이지 입력 정보
		 * @description <p>다건 조회 API 에 사용되는 페이지 입력 정보</p>
		 *
		 */
		PageInput: {
			/**
			 * 0부터 시작하는 페이지 번호
			 * Format: int32
			 */
			number?: number;
			/**
			 * 각 페이지 당 포함할 객체 수
			 * Format: int32
			 */
			size?: number;
		};
		/**
		 * 결제 완료 상태 건
		 * @description <p>결제 완료 상태 건</p>
		 *
		 */
		PaidPayment: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "PAID";
			/** 결제 건 아이디 */
			id: string;
			/**
			 * 결제 건 포트원 채번 아이디
			 * @description <p>V1 결제 건의 경우 imp_uid에 해당합니다.</p>
			 *
			 */
			transactionId: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제수단 정보 */
			method?: components["schemas"]["PaymentMethod"];
			/** 결제 채널 */
			channel: components["schemas"]["SelectedChannel"];
			/** 결제 채널 그룹 정보 */
			channelGroup?: components["schemas"]["ChannelGroupSummary"];
			/** 포트원 버전 */
			version: components["schemas"]["PortOneVersion"];
			/**
			 * 결제 예약 건 아이디
			 * @description <p>결제 예약을 이용한 경우에만 존재</p>
			 *
			 */
			scheduleId?: string;
			/**
			 * 결제 시 사용된 빌링키
			 * @description <p>빌링키 결제인 경우에만 존재</p>
			 *
			 */
			billingKey?: string;
			/** 웹훅 발송 내역 */
			webhooks?: components["schemas"]["PaymentWebhook"][];
			/**
			 * 결제 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
			/**
			 * 업데이트 시점
			 * Format: date-time
			 */
			updatedAt: string;
			/**
			 * 상태 업데이트 시점
			 * Format: date-time
			 */
			statusChangedAt: string;
			/** 주문명 */
			orderName: string;
			/** 결제 금액 관련 세부 정보 */
			amount: components["schemas"]["PaymentAmount"];
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 구매자 정보 */
			customer: components["schemas"]["Customer"];
			/** 프로모션 아이디 */
			promotionId?: string;
			/** 문화비 지출 여부 */
			isCulturalExpense?: boolean;
			/**
			 * 에스크로 결제 정보
			 * @description <p>에스크로 결제인 경우 존재합니다.</p>
			 *
			 */
			escrow?: components["schemas"]["PaymentEscrow"];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 상품 갯수
			 * Format: int32
			 */
			productCount?: number;
			/** 사용자 지정 데이터 */
			customData?: string;
			/** 국가 코드 */
			country?: components["schemas"]["Country"];
			/**
			 * 결제 완료 시점
			 * Format: date-time
			 */
			paidAt: string;
			/** PG사 거래 아이디 */
			pgTxId?: string;
			/** PG사 거래 응답 본문 */
			pgResponse?: string;
			/** 현금영수증 */
			cashReceipt?: components["schemas"]["PaymentCashReceipt"];
			/** 거래 영수증 URL */
			receiptUrl?: string;
		};
		/**
		 * 결제 부분 취소 상태 건
		 * @description <p>결제 부분 취소 상태 건</p>
		 *
		 */
		PartialCancelledPayment: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "PARTIAL_CANCELLED";
			/** 결제 건 아이디 */
			id: string;
			/**
			 * 결제 건 포트원 채번 아이디
			 * @description <p>V1 결제 건의 경우 imp_uid에 해당합니다.</p>
			 *
			 */
			transactionId: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제수단 정보 */
			method?: components["schemas"]["PaymentMethod"];
			/** 결제 채널 */
			channel: components["schemas"]["SelectedChannel"];
			/** 결제 채널 그룹 정보 */
			channelGroup?: components["schemas"]["ChannelGroupSummary"];
			/** 포트원 버전 */
			version: components["schemas"]["PortOneVersion"];
			/**
			 * 결제 예약 건 아이디
			 * @description <p>결제 예약을 이용한 경우에만 존재</p>
			 *
			 */
			scheduleId?: string;
			/**
			 * 결제 시 사용된 빌링키
			 * @description <p>빌링키 결제인 경우에만 존재</p>
			 *
			 */
			billingKey?: string;
			/** 웹훅 발송 내역 */
			webhooks?: components["schemas"]["PaymentWebhook"][];
			/**
			 * 결제 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
			/**
			 * 업데이트 시점
			 * Format: date-time
			 */
			updatedAt: string;
			/**
			 * 상태 업데이트 시점
			 * Format: date-time
			 */
			statusChangedAt: string;
			/** 주문명 */
			orderName: string;
			/** 결제 금액 관련 세부 정보 */
			amount: components["schemas"]["PaymentAmount"];
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 구매자 정보 */
			customer: components["schemas"]["Customer"];
			/** 프로모션 아이디 */
			promotionId?: string;
			/** 문화비 지출 여부 */
			isCulturalExpense?: boolean;
			/**
			 * 에스크로 결제 정보
			 * @description <p>에스크로 결제인 경우 존재합니다.</p>
			 *
			 */
			escrow?: components["schemas"]["PaymentEscrow"];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 상품 갯수
			 * Format: int32
			 */
			productCount?: number;
			/** 사용자 지정 데이터 */
			customData?: string;
			/** 국가 코드 */
			country?: components["schemas"]["Country"];
			/**
			 * 결제 완료 시점
			 * Format: date-time
			 */
			paidAt?: string;
			/** PG사 거래 아이디 */
			pgTxId?: string;
			/** 현금영수증 */
			cashReceipt?: components["schemas"]["PaymentCashReceipt"];
			/** 거래 영수증 URL */
			receiptUrl?: string;
			/** 결제 취소 내역 */
			cancellations: components["schemas"]["PaymentCancellation"][];
			/**
			 * 결제 취소 시점
			 * Format: date-time
			 */
			cancelledAt: string;
		};
		PayInstantlyError:
			| components["schemas"]["AlreadyPaidError"]
			| components["schemas"]["ChannelNotFoundError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["SumOfPartsExceedsTotalAmountError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 수기 결제 성공 응답
		 * @description <p>수기 결제 성공 응답</p>
		 *
		 */
		PayInstantlyResponse: {
			/** 결제 건 요약 정보 */
			payment: components["schemas"]["InstantPaymentSummary"];
		};
		/**
		 * 결제 완료 대기 상태 건
		 * @description <p>결제 완료 대기 상태 건</p>
		 *
		 */
		PayPendingPayment: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "PAY_PENDING";
			/** 결제 건 아이디 */
			id: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제수단 정보 */
			method?: components["schemas"]["PaymentMethod"];
			/** 결제 채널 */
			channel: components["schemas"]["SelectedChannel"];
			/** 결제 채널 그룹 정보 */
			channelGroup?: components["schemas"]["ChannelGroupSummary"];
			/** 포트원 버전 */
			version: components["schemas"]["PortOneVersion"];
			/**
			 * 결제 예약 건 아이디
			 * @description <p>결제 예약을 이용한 경우에만 존재</p>
			 *
			 */
			scheduleId?: string;
			/**
			 * 결제 시 사용된 빌링키
			 * @description <p>빌링키 결제인 경우에만 존재</p>
			 *
			 */
			billingKey?: string;
			/** 웹훅 발송 내역 */
			webhooks?: components["schemas"]["PaymentWebhook"][];
			/**
			 * 결제 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
			/**
			 * 업데이트 시점
			 * Format: date-time
			 */
			updatedAt: string;
			/**
			 * 상태 업데이트 시점
			 * Format: date-time
			 */
			statusChangedAt: string;
			/** 주문명 */
			orderName: string;
			/** 결제 금액 관련 세부 정보 */
			amount: components["schemas"]["PaymentAmount"];
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 구매자 정보 */
			customer: components["schemas"]["Customer"];
			/** 프로모션 아이디 */
			promotionId?: string;
			/** 문화비 지출 여부 */
			isCulturalExpense?: boolean;
			/**
			 * 에스크로 결제 정보
			 * @description <p>에스크로 결제인 경우 존재합니다.</p>
			 *
			 */
			escrow?: components["schemas"]["PaymentEscrow"];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 상품 갯수
			 * Format: int32
			 */
			productCount?: number;
			/** 사용자 지정 데이터 */
			customData?: string;
			/** 국가 코드 */
			country?: components["schemas"]["Country"];
			/** PG사 거래 아이디 */
			pgTxId?: string;
		};
		PayWithBillingKeyError:
			| components["schemas"]["AlreadyPaidError"]
			| components["schemas"]["BillingKeyAlreadyDeletedError"]
			| components["schemas"]["BillingKeyNotFoundError"]
			| components["schemas"]["ChannelNotFoundError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["SumOfPartsExceedsTotalAmountError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 빌링키 결제 성공 응답
		 * @description <p>빌링키 결제 성공 응답</p>
		 *
		 */
		PayWithBillingKeyResponse: {
			/** 결제 건 요약 정보 */
			payment: components["schemas"]["BillingKeyPaymentSummary"];
		};
		/**
		 * 결제 건
		 * @description <p>결제 건</p>
		 *
		 */
		Payment:
			| components["schemas"]["CancelledPayment"]
			| components["schemas"]["FailedPayment"]
			| components["schemas"]["PaidPayment"]
			| components["schemas"]["PartialCancelledPayment"]
			| components["schemas"]["PayPendingPayment"]
			| components["schemas"]["ReadyPayment"]
			| components["schemas"]["VirtualAccountIssuedPayment"];
		/**
		 * 결제가 이미 취소된 경우
		 * @description <p>결제가 이미 취소된 경우</p>
		 *
		 */
		PaymentAlreadyCancelledError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PAYMENT_ALREADY_CANCELLED";
			message?: string;
		};
		/**
		 * 결제 금액 세부 정보
		 * @description <p>결제 금액 세부 정보</p>
		 *
		 */
		PaymentAmount: {
			/**
			 * 총 결제금액
			 * Format: int64
			 */
			total: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFree: number;
			/**
			 * 부가세액
			 * Format: int64
			 */
			vat?: number;
			/**
			 * 공급가액
			 * Format: int64
			 */
			supply?: number;
			/**
			 * 할인금액
			 * Format: int64
			 * @description <p>카드사 프로모션, 포트원 프로모션, 적립형 포인트 결제, 쿠폰 할인 등을 포함합니다.</p>
			 *
			 */
			discount: number;
			/**
			 * 실제 결제금액
			 * Format: int64
			 */
			paid: number;
			/**
			 * 취소금액
			 * Format: int64
			 */
			cancelled: number;
			/**
			 * 취소금액 중 면세액
			 * Format: int64
			 */
			cancelledTaxFree: number;
		};
		/**
		 * 금액 세부 입력 정보
		 * @description <p>금액 세부 입력 정보</p>
		 *
		 */
		PaymentAmountInput: {
			/**
			 * 총 금액
			 * Format: int64
			 */
			total: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFree?: number;
			/**
			 * 부가세액
			 * Format: int64
			 * @description <p>고객사에서 직접 계산이 필요한 경우 입력합니다.
			 *     입력하지 않으면 면세 금액을 제외한 금액의 1/11 로 자동 계산됩니다.</p>
			 *
			 */
			vat?: number;
		};
		/**
		 * 결제 취소 내역
		 * @description <p>결제 취소 내역</p>
		 *
		 */
		PaymentCancellation:
			| components["schemas"]["FailedPaymentCancellation"]
			| components["schemas"]["RequestedPaymentCancellation"]
			| components["schemas"]["SucceededPaymentCancellation"];
		/**
		 * 결제 건 내 현금영수증 정보
		 * @description <p>결제 건 내 현금영수증 정보</p>
		 *
		 */
		PaymentCashReceipt:
			| components["schemas"]["CancelledPaymentCashReceipt"]
			| components["schemas"]["IssuedPaymentCashReceipt"];
		/**
		 * 결제건 내 현금영수증 상태
		 * @description <p>결제건 내 현금영수증 상태</p>
		 *
		 * @enum {string}
		 */
		PaymentCashReceiptStatus: "CANCELLED" | "ISSUED";
		/**
		 * 결제가 발생한 클라이언트 환경
		 * @description <p>결제가 발생한 클라이언트 환경</p>
		 *
		 * @enum {string}
		 */
		PaymentClientType: "API" | "SDK_MOBILE" | "SDK_PC";
		/**
		 * 에스크로 정보
		 * @description <p>에스크로 정보</p>
		 *     <p>V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.</p>
		 *
		 */
		PaymentEscrow:
			| components["schemas"]["BeforeRegisteredPaymentEscrow"]
			| components["schemas"]["CancelledPaymentEscrow"]
			| components["schemas"]["ConfirmedPaymentEscrow"]
			| components["schemas"]["DeliveredPaymentEscrow"]
			| components["schemas"]["RegisteredPaymentEscrow"]
			| components["schemas"]["RejectConfirmedPaymentEscrow"]
			| components["schemas"]["RejectedPaymentEscrow"];
		/**
		 * 에스크로 수취인 정보
		 * @description <p>에스크로 수취인 정보</p>
		 *
		 */
		PaymentEscrowReceiverInput: {
			/** 이름 */
			name?: string;
			/** 전화번호 */
			phoneNumber?: string;
			/** 우편번호 */
			zipcode?: string;
			/** 주소 */
			address?: components["schemas"]["SeparatedAddressInput"];
		};
		/**
		 * 에스크로 발송자 정보
		 * @description <p>에스크로 발송자 정보</p>
		 *
		 */
		PaymentEscrowSenderInput: {
			/** 이름 */
			name?: string;
			/** 전화번호 */
			phoneNumber?: string;
			/** 우편번호 */
			zipcode?: string;
			/** 수취인과의 관계 */
			relationship?: string;
			/** 주소 */
			address?: components["schemas"]["SeparatedAddressInput"];
		};
		/**
		 * 결제 건 다건 조회를 위한 입력 정보
		 * @description <p>결제 건 다건 조회를 위한 입력 정보</p>
		 *
		 */
		PaymentFilterInput: {
			/** 고객사 아이디 */
			merchantId?: string;
			/**
			 * 상점 아이디
			 * @description <p>Merchant 사용자만 사용가능하며, 지정되지 않은 경우 고객사 전체 결제 건을 조회합니다.</p>
			 *
			 */
			storeId?: string;
			/** 조회 기준 시점 유형 */
			timestampType?: components["schemas"]["PaymentTimestampType"];
			/**
			 * 결제 요청/상태 승인 시점 범위의 시작
			 * Format: date-time
			 * @description <p>값을 입력하지 않으면 end의 90일 전으로 설정됩니다.</p>
			 *
			 */
			from?: string;
			/**
			 * 결제 요청/상태 승인 시점 범위의 끝
			 * Format: date-time
			 * @description <p>값을 입력하지 않으면 현재 시점으로 설정됩니다.</p>
			 *
			 */
			until?: string;
			/**
			 * 결제 상태 리스트
			 * @description <p>값을 입력하지 않으면 결제상태 필터링이 적용되지 않습니다.</p>
			 *
			 */
			status?: components["schemas"]["PaymentStatus"][];
			/**
			 * 결제수단 리스트
			 * @description <p>값을 입력하지 않으면 결제수단 필터링이 적용되지 않습니다.</p>
			 *
			 */
			methods?: components["schemas"]["PaymentMethodType"][];
			/**
			 * PG사 리스트
			 * @description <p>값을 입력하지 않으면 결제대행사 필터링이 적용되지 않습니다.</p>
			 *
			 */
			pgProvider?: components["schemas"]["PgProvider"][];
			/** 테스트 결제 필터링 */
			isTest?: boolean;
			/** 결제 예약 건 필터링 */
			isScheduled?: boolean;
			/** 결제 건 정렬 기준 */
			sortBy?: components["schemas"]["PaymentSortBy"];
			/** 결제 건 정렬 방식 */
			sortOrder?: components["schemas"]["SortOrder"];
			/** 포트원 버전 */
			version?: components["schemas"]["PortOneVersion"];
			/** 웹훅 상태 */
			webhookStatus?: components["schemas"]["PaymentWebhookStatus"];
			/** 플랫폼 유형 */
			platformType?: components["schemas"]["PaymentClientType"];
			/** 통화 */
			currency?: components["schemas"]["Currency"];
			/** 에스크로 결제 여부 */
			isEscrow?: boolean;
			/** 에스크로 결제의 배송 정보 상태 */
			escrowStatus?: components["schemas"]["PaymentFilterInputEscrowStatus"];
			/** 카드 브랜드 */
			cardBrand?: components["schemas"]["CardBrand"];
			/** 카드 유형 */
			cardType?: components["schemas"]["CardType"];
			/** 카드 소유주 유형 */
			cardOwnerType?: components["schemas"]["CardOwnerType"];
			/** 상품권 종류 */
			giftCertificateType?: components["schemas"]["PaymentMethodGiftCertificateType"];
			/** 현금영수증 유형 */
			cashReceiptType?: components["schemas"]["CashReceiptInputType"];
			/** 현금영수증 상태 */
			cashReceiptStatus?: components["schemas"]["PaymentCashReceiptStatus"];
			/** 현금영수증 발급 시간 범위 */
			cashReceiptIssuedAtRange?: components["schemas"]["DateTimeRange"];
			/** 현금영수증 취소 시간 범위 */
			cashReceiptCancelledAtRange?: components["schemas"]["DateTimeRange"];
			/** 통합 검색 리스트 필터 */
			textSearch?: components["schemas"]["PaymentTextSearch"][];
		};
		/**
		 * 에스크로 상태
		 * @description <p>에스크로 상태</p>
		 *
		 * @enum {string}
		 */
		PaymentFilterInputEscrowStatus:
			| "CANCELLED"
			| "CONFIRMED"
			| "DELIVERED"
			| "REGISTERED"
			| "REJECTED"
			| "REJECT_CONFIRMED";
		/**
		 * 할부 정보
		 * @description <p>할부 정보</p>
		 *
		 */
		PaymentInstallment: {
			/**
			 * 할부 개월 수
			 * Format: int32
			 */
			month: number;
			/** 무이자할부 여부 */
			isInterestFree: boolean;
		};
		/**
		 * 배송정보
		 * @description <p>배송정보</p>
		 *
		 */
		PaymentLogistics: {
			/** 물류회사 */
			company: components["schemas"]["PaymentLogisticsCompany"];
			/** 송장번호 */
			invoiceNumber: string;
			/**
			 * 발송시점
			 * Format: date-time
			 */
			sentAt: string;
			/**
			 * 수령시점
			 * Format: date-time
			 */
			receivedAt?: string;
			/** 주소 */
			address?: components["schemas"]["SeparatedAddressInput"];
		};
		/**
		 * 물류 회사
		 * @description <p>물류 회사</p>
		 *
		 * @enum {string}
		 */
		PaymentLogisticsCompany:
			| "ACI"
			| "CHUNIL"
			| "CJ"
			| "CJ_INTL"
			| "DAESIN"
			| "DHL"
			| "DONGWON"
			| "EMS"
			| "ETC"
			| "FEDEX"
			| "GOODSTOLUCK"
			| "GS"
			| "GSM_NTON"
			| "HANJIN"
			| "HAPDONG"
			| "ILYANG"
			| "KGL"
			| "KUNYOUNG"
			| "KYUNGDONG"
			| "LOGEN"
			| "LOTTE"
			| "LX_PANTOS"
			| "POST"
			| "POST_REGISTERED"
			| "SF"
			| "SLX"
			| "SUNGWON"
			| "UPS"
			| "USPS"
			| "WOORI";
		/**
		 * 결제수단 정보
		 * @description <p>결제수단 정보</p>
		 *
		 */
		PaymentMethod:
			| components["schemas"]["PaymentMethodCard"]
			| components["schemas"]["PaymentMethodEasyPay"]
			| components["schemas"]["PaymentMethodGiftCertificate"]
			| components["schemas"]["PaymentMethodMobile"]
			| components["schemas"]["PaymentMethodTransfer"]
			| components["schemas"]["PaymentMethodVirtualAccount"];
		/**
		 * 결제수단 카드 정보
		 * @description <p>결제수단 카드 정보</p>
		 *
		 */
		PaymentMethodCard: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PaymentMethodCard";
			/** 카드 상세 정보 */
			card?: components["schemas"]["Card"];
			/** 승인 번호 */
			approvalNumber?: string;
			/** 할부 정보 */
			installment?: components["schemas"]["PaymentInstallment"];
			/** 카드 포인트 사용여부 */
			pointUsed?: boolean;
		};
		/**
		 * 간편 결제 상세 정보
		 * @description <p>간편 결제 상세 정보</p>
		 *
		 */
		PaymentMethodEasyPay: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PaymentMethodEasyPay";
			/** 간편 결제 PG사 */
			provider?: components["schemas"]["EasyPayProvider"];
			/** 간편 결제 수단 */
			easyPayMethod?: components["schemas"]["PaymentMethodEasyPayMethod"];
		};
		/**
		 * 간편 결제 수단
		 * @description <p>간편 결제 수단</p>
		 *
		 */
		PaymentMethodEasyPayMethod:
			| components["schemas"]["PaymentMethodCard"]
			| components["schemas"]["PaymentMethodEasyPayMethodCharge"]
			| components["schemas"]["PaymentMethodTransfer"];
		/**
		 * 충전식 포인트 결제 정보
		 * @description <p>충전식 포인트 결제 정보</p>
		 *
		 */
		PaymentMethodEasyPayMethodCharge: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PaymentMethodEasyPayMethodCharge";
			/** 표준 은행 코드 */
			bank?: components["schemas"]["Bank"];
		};
		/**
		 * 상품권 상세 정보
		 * @description <p>상품권 상세 정보</p>
		 *
		 */
		PaymentMethodGiftCertificate: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PaymentMethodGiftCertificate";
			/** 상품권 종류 */
			giftCertificateType?: components["schemas"]["PaymentMethodGiftCertificateType"];
			/** 상품권 승인 번호 */
			approvalNumber: string;
		};
		/**
		 * 상품권 종류
		 * @description <p>상품권 종류</p>
		 *
		 * @enum {string}
		 */
		PaymentMethodGiftCertificateType:
			| "BOOKNLIFE"
			| "CULTUREGIFT"
			| "CULTURELAND"
			| "HAPPYMONEY"
			| "SMART_MUNSANG";
		/**
		 * 모바일 상세 정보
		 * @description <p>모바일 상세 정보</p>
		 *
		 */
		PaymentMethodMobile: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PaymentMethodMobile";
			/** 전화번호 */
			phoneNumber?: string;
		};
		/**
		 * 계좌 이체 상세 정보
		 * @description <p>계좌 이체 상세 정보</p>
		 *
		 */
		PaymentMethodTransfer: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PaymentMethodTransfer";
			/** 표준 은행 코드 */
			bank?: components["schemas"]["Bank"];
		};
		/** @enum {string} */
		PaymentMethodType:
			| "CARD"
			| "EASY_PAY"
			| "GIFT_CERTIFICATE"
			| "MOBILE"
			| "TRANSFER"
			| "VIRTUAL_ACCOUNT";
		/**
		 * 가상계좌 상세 정보
		 * @description <p>가상계좌 상세 정보</p>
		 *
		 */
		PaymentMethodVirtualAccount: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PaymentMethodVirtualAccount";
			/** 표준 은행 코드 */
			bank?: components["schemas"]["Bank"];
			/** 계좌번호 */
			accountNumber: string;
			/** 계좌 유형 */
			accountType?: components["schemas"]["PaymentMethodVirtualAccountType"];
			/** 계좌주 */
			remitteeName?: string;
			/** 송금인(입금자) */
			remitterName?: string;
			/**
			 * 입금만료시점
			 * Format: date-time
			 */
			expiredAt?: string;
			/**
			 * 계좌발급시점
			 * Format: date-time
			 */
			issuedAt?: string;
			/** 가상계좌 결제가 환불 단계일 때의 환불 상태 */
			refundStatus?: components["schemas"]["PaymentMethodVirtualAccountRefundStatus"];
		};
		/**
		 * 가상계좌 환불 상태
		 * @description <p>가상계좌 환불 상태</p>
		 *
		 * @enum {string}
		 */
		PaymentMethodVirtualAccountRefundStatus:
			| "COMPLETED"
			| "FAILED"
			| "PARTIAL_REFUND_FAILED"
			| "PENDING";
		/**
		 * 가상계좌 유형
		 * @description <p>가상계좌 유형</p>
		 *
		 * @enum {string}
		 */
		PaymentMethodVirtualAccountType: "FIXED" | "NORMAL";
		/**
		 * 결제 건이 존재하지 않는 경우
		 * @description <p>결제 건이 존재하지 않는 경우</p>
		 *
		 */
		PaymentNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PAYMENT_NOT_FOUND";
			message?: string;
		};
		/**
		 * 결제가 완료되지 않은 경우
		 * @description <p>결제가 완료되지 않은 경우</p>
		 *
		 */
		PaymentNotPaidError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PAYMENT_NOT_PAID";
			message?: string;
		};
		/**
		 * 결제 건이 입금 대기 상태가 아닌 경우
		 * @description <p>결제 건이 입금 대기 상태가 아닌 경우</p>
		 *
		 */
		PaymentNotWaitingForDepositError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PAYMENT_NOT_WAITING_FOR_DEPOSIT";
			message?: string;
		};
		/**
		 * 상품 정보
		 * @description <p>상품 정보</p>
		 *
		 */
		PaymentProduct: {
			/**
			 * 상품 고유 식별자
			 * @description <p>고객사가 직접 부여한 식별자입니다.</p>
			 *
			 */
			id: string;
			/** 상품명 */
			name: string;
			/**
			 * 상품 태그
			 * @description <p>카테고리 등으로 활용될 수 있습니다.</p>
			 *
			 */
			tag?: string;
			/** 상품 코드 */
			code?: string;
			/**
			 * 상품 단위가격
			 * Format: int64
			 */
			amount: number;
			/**
			 * 주문 수량
			 * Format: int32
			 */
			quantity: number;
		};
		/**
		 * 상품 유형
		 * @description <p>상품 유형</p>
		 *
		 * @enum {string}
		 */
		PaymentProductType: "DIGITAL" | "PHYSICAL";
		/**
		 * 결제 예약 건
		 * @description <p>결제 예약 건</p>
		 *
		 */
		PaymentSchedule:
			| components["schemas"]["FailedPaymentSchedule"]
			| components["schemas"]["PendingPaymentSchedule"]
			| components["schemas"]["RevokedPaymentSchedule"]
			| components["schemas"]["ScheduledPaymentSchedule"]
			| components["schemas"]["StartedPaymentSchedule"]
			| components["schemas"]["SucceededPaymentSchedule"];
		/**
		 * 결제 예약건이 이미 존재하는 경우
		 * @description <p>결제 예약건이 이미 존재하는 경우</p>
		 *
		 */
		PaymentScheduleAlreadyExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PAYMENT_SCHEDULE_ALREADY_EXISTS";
			message?: string;
		};
		/**
		 * 결제 예약건이 이미 처리된 경우
		 * @description <p>결제 예약건이 이미 처리된 경우</p>
		 *
		 */
		PaymentScheduleAlreadyProcessedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PAYMENT_SCHEDULE_ALREADY_PROCESSED";
			message?: string;
		};
		/**
		 * 결제 예약건이 이미 취소된 경우
		 * @description <p>결제 예약건이 이미 취소된 경우</p>
		 *
		 */
		PaymentScheduleAlreadyRevokedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PAYMENT_SCHEDULE_ALREADY_REVOKED";
			message?: string;
		};
		/**
		 * 결제 예약 건 다건 조회를 위한 입력 정보
		 * @description <p>결제 예약 건 다건 조회를 위한 입력 정보</p>
		 *
		 */
		PaymentScheduleFilterInput: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/** 빌링키 */
			billingKey?: string;
			/**
			 * 결제 예정 시점 조건 범위의 시작
			 * Format: date-time
			 * @description <p>값을 입력하지 않으면 파라미터 end의 90일 전으로 설정됩니다.</p>
			 *
			 */
			from?: string;
			/**
			 * 결제 예정 시점 조건 범위의 끝
			 * Format: date-time
			 * @description <p>값을 입력하지 않으면 현재 시점으로 설정됩니다.</p>
			 *
			 */
			until?: string;
			/**
			 * 결제 예약 건 상태 리스트
			 * @description <p>값을 입력하지 않으면 상태 필터링이 적용되지 않습니다.</p>
			 *
			 */
			status?: components["schemas"]["PaymentScheduleStatus"][];
		};
		/**
		 * 결제 예약건이 존재하지 않는 경우
		 * @description <p>결제 예약건이 존재하지 않는 경우</p>
		 *
		 */
		PaymentScheduleNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PAYMENT_SCHEDULE_NOT_FOUND";
			message?: string;
		};
		/**
		 * 결제 예약 건 정렬 기준
		 * @description <p>결제 예약 건 정렬 기준</p>
		 *
		 * @enum {string}
		 */
		PaymentScheduleSortBy: "COMPLETED_AT" | "CREATED_AT" | "TIME_TO_PAY";
		/**
		 * 결제 예약 건 다건 조회 시 정렬 조건
		 * @description <p>결제 예약 건 다건 조회 시 정렬 조건</p>
		 *
		 */
		PaymentScheduleSortInput: {
			/**
			 * 정렬 기준 필드
			 * @description <p>어떤 필드를 기준으로 정렬할 지 결정합니다. 비워서 보낼 경우, TIME_TO_PAY가 기본값으로 설정됩니다.</p>
			 *
			 */
			by?: components["schemas"]["PaymentScheduleSortBy"];
			/**
			 * 정렬 순서
			 * @description <p>어떤 순서로 정렬할 지 결정합니다. 비워서 보낼 경우, DESC(내림차순)가 기본값으로 설정됩니다.</p>
			 *
			 */
			order?: components["schemas"]["SortOrder"];
		};
		/**
		 * 결제 예약 건 상태
		 * @description <p>결제 예약 건 상태</p>
		 *
		 * @enum {string}
		 */
		PaymentScheduleStatus:
			| "FAILED"
			| "PENDING"
			| "REVOKED"
			| "SCHEDULED"
			| "STARTED"
			| "SUCCEEDED";
		/**
		 * 결제 예약 건
		 * @description <p>결제 예약 건</p>
		 *
		 */
		PaymentScheduleSummary: {
			/** 결제 예약 건 아이디 */
			id: string;
		};
		/**
		 * 결제 건 정렬 기준
		 * @description <p>결제 건 정렬 기준</p>
		 *
		 * @enum {string}
		 */
		PaymentSortBy: "REQUESTED_AT" | "STATUS_CHANGED_AT";
		/**
		 * 결제 건 상태
		 * @description <p>결제 건 상태</p>
		 *
		 * @enum {string}
		 */
		PaymentStatus:
			| "CANCELLED"
			| "FAILED"
			| "PAID"
			| "PARTIAL_CANCELLED"
			| "PENDING"
			| "READY"
			| "VIRTUAL_ACCOUNT_ISSUED";
		/**
		 * 통합검색 입력 정보
		 * @description <p>통합검색 입력 정보</p>
		 *
		 */
		PaymentTextSearch: {
			field: components["schemas"]["PaymentTextSearchField"];
			value: string;
		};
		/**
		 * 통합검색 항목
		 * @description <p>통합검색 항목</p>
		 *
		 * @enum {string}
		 */
		PaymentTextSearchField:
			| "ALL"
			| "BILLING_KEY"
			| "CANCEL_REASON"
			| "CARD_ACQUIRER"
			| "CARD_APPROVAL_NUMBER"
			| "CARD_BIN"
			| "CARD_INSTALLMENT"
			| "CARD_ISSUER"
			| "CARD_NUMBER"
			| "CARD_RECEIPT_NAME"
			| "CUSTOMER_ADDRESS"
			| "CUSTOMER_EMAIL"
			| "CUSTOMER_NAME"
			| "CUSTOMER_PHONE_NUMBER"
			| "CUSTOMER_ZIPCODE"
			| "FAIL_REASON"
			| "GIFT_CERTIFICATION_APPROVAL_NUMBER"
			| "ORDER_NAME"
			| "PAYMENT_ID"
			| "PG_CANCELLATION_ID"
			| "PG_MERCHANT_ID"
			| "PG_RECEIPT_ID"
			| "PG_TX_ID"
			| "PROMOTION_ID"
			| "RECEIPT_APPROVAL_NUMBER"
			| "SCHEDULE_ID"
			| "TRANS_BANK"
			| "TX_ID"
			| "USER_AGENT"
			| "VIRTUAL_ACCOUNT_BANK"
			| "VIRTUAL_ACCOUNT_HOLDER_NAME"
			| "VIRTUAL_ACCOUNT_NUMBER";
		/**
		 * 조회 시점 기준
		 * @description <p>조회 시점 기준</p>
		 *     <p>어떤 시점을 기준으로 조회를 할 것인지 선택합니다.
		 *     CREATED_AT: 결제 건 생성 시점을 기준으로 조회합니다.
		 *     STATUS_CHANGED_AT: 상태 승인 시점을 기준으로 조회합니다. 결제 건의 최종 상태에 따라 검색 기준이 다르게 적용됩니다.
		 *     ready -&gt; 결제 요청 시점 기준
		 *     paid -&gt; 결제 완료 시점 기준
		 *     cancelled -&gt; 결제 취소 시점 기준
		 *     failed -&gt; 결제 실패 시점 기준
		 *     값을 입력하지 않으면 STATUS_CHANGED_AT 으로 자동 적용됩니다.</p>
		 *
		 * @enum {string}
		 */
		PaymentTimestampType: "CREATED_AT" | "STATUS_CHANGED_AT";
		/**
		 * 성공 웹훅 내역
		 * @description <p>성공 웹훅 내역</p>
		 *
		 */
		PaymentWebhook: {
			/**
			 * 웹훅 발송 시 결제 건 상태
			 * @description <p>V1 결제 건인 경우, 값이 존재하지 않습니다.</p>
			 *
			 */
			paymentStatus?: components["schemas"]["PaymentWebhookPaymentStatus"];
			/** 웹훅 아이디 */
			id: string;
			/** 웹훅 상태 */
			status?: components["schemas"]["PaymentWebhookStatus"];
			/**
			 * 웹훅이 발송된 url
			 * @description <p>V1 결제 건인 경우, 값이 존재하지 않습니다.</p>
			 *
			 */
			url: string;
			/**
			 * 비동기 웹훅 여부
			 * @description <p>V1 결제 건인 경우, 값이 존재하지 않습니다.</p>
			 *
			 */
			isAsync?: boolean;
			/**
			 * 현재 발송 횟수
			 * Format: int32
			 */
			currentExecutionCount?: number;
			/**
			 * 최대 발송 횟수
			 * Format: int32
			 */
			maxExecutionCount?: number;
			/** 웹훅 실행 맥락 */
			trigger?: components["schemas"]["PaymentWebhookTrigger"];
			/** 웹훅 요청 정보 */
			request?: components["schemas"]["PaymentWebhookRequest"];
			/** 웹훅 응답 정보 */
			response?: components["schemas"]["PaymentWebhookResponse"];
			/**
			 * 웹훅 처리 시작 시점
			 * Format: date-time
			 */
			triggeredAt?: string;
		};
		/**
		 * 웹훅 발송 시 결제 건 상태
		 * @description <p>웹훅 발송 시 결제 건 상태</p>
		 *
		 * @enum {string}
		 */
		PaymentWebhookPaymentStatus:
			| "CANCELLED"
			| "FAILED"
			| "PAID"
			| "PARTIAL_CANCELLED"
			| "PAY_PENDING"
			| "READY"
			| "VIRTUAL_ACCOUNT_ISSUED";
		/**
		 * 웹훅 요청 정보
		 * @description <p>웹훅 요청 정보</p>
		 *
		 */
		PaymentWebhookRequest: {
			/** 요청 헤더 */
			header?: string;
			/** 요청 본문 */
			body: string;
			/**
			 * 요청 시점
			 * Format: date-time
			 */
			requestedAt?: string;
		};
		/**
		 * 웹훅 응답 정보
		 * @description <p>웹훅 응답 정보</p>
		 *
		 */
		PaymentWebhookResponse: {
			/** 응답 HTTP 코드 */
			code: string;
			/** 응답 헤더 */
			header: string;
			/** 응답 본문 */
			body: string;
			/**
			 * 응답 시점
			 * Format: date-time
			 */
			respondedAt: string;
		};
		/**
		 * 웹훅 전송 상태
		 * @description <p>웹훅 전송 상태</p>
		 *
		 * @enum {string}
		 */
		PaymentWebhookStatus:
			| "FAILED_NOT_OK_RESPONSE"
			| "FAILED_UNEXPECTED_ERROR"
			| "SUCCEEDED";
		/**
		 * 웹훅 실행 트리거
		 * @description <p>웹훅 실행 트리거</p>
		 *     <p>수동 웹훅 재발송, 가상계좌 입금, 비동기 취소 승인 시 발생한 웹훅일 때 필드의 값이 존재합니다.</p>
		 *
		 * @enum {string}
		 */
		PaymentWebhookTrigger:
			| "ASYNC_CANCEL_APPROVED"
			| "ASYNC_CANCEL_FAILED"
			| "ASYNC_PAY_APPROVED"
			| "ASYNC_PAY_FAILED"
			| "MANUAL"
			| "VIRTUAL_ACCOUNT_DEPOSIT";
		/**
		 * 결제 건 및 커서 정보
		 * @description <p>결제 건 및 커서 정보</p>
		 *
		 */
		PaymentWithCursor: {
			/** 결제 건 정보 */
			payment: components["schemas"]["Payment"];
			/** 해당 결제 건의 커서 정보 */
			cursor: string;
		};
		/**
		 * 결제 대기 상태
		 * @description <p>결제 대기 상태</p>
		 *
		 */
		PendingPaymentSchedule: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "PENDING";
			/** 결제 예약 건 아이디 */
			id: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제 건 아이디 */
			paymentId: string;
			/** 빌링키 */
			billingKey: string;
			/** 주문명 */
			orderName: string;
			/** 문화비 지출 여부 */
			isCulturalExpense: boolean;
			/** 에스크로 결제 여부 */
			isEscrow: boolean;
			/** 고객 정보 */
			customer: components["schemas"]["Customer"];
			/** 사용자 지정 데이터 */
			customData: string;
			/**
			 * 결제 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/**
			 * 부가세
			 * Format: int64
			 */
			vatAmount?: number;
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/**
			 * 할부 개월 수
			 * Format: int32
			 */
			installmentMonth?: number;
			/** 웹훅 주소 */
			noticeUrls?: string[];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 결제 예약 등록 시점
			 * Format: date-time
			 */
			createdAt: string;
			/**
			 * 결제 예정 시점
			 * Format: date-time
			 */
			timeToPay: string;
			/**
			 * 결제 시작 시점
			 * Format: date-time
			 */
			startedAt: string;
			/**
			 * 결제 완료 시점
			 * Format: date-time
			 */
			completedAt: string;
		};
		/**
		 * 채널 별 빌링키 발급 응답
		 * @description <p>채널 별 빌링키 발급 응답</p>
		 *
		 */
		PgBillingKeyIssueResponse:
			| components["schemas"]["FailedPgBillingKeyIssueResponse"]
			| components["schemas"]["IssuedPgBillingKeyIssueResponse"];
		/**
		 * PG사
		 * @description <p>PG사</p>
		 *
		 * @enum {string}
		 */
		PgCompany:
			| "ALIPAY"
			| "BLUEWALNUT"
			| "CHAI"
			| "DANAL"
			| "DAOU"
			| "EXIMBAY"
			| "GALAXIA"
			| "HYPHEN"
			| "INICIS"
			| "JTNET"
			| "KAKAO"
			| "KAKAOPAY"
			| "KCP"
			| "KICC"
			| "KPN"
			| "KSNET"
			| "MOBILIANS"
			| "NAVERPAY"
			| "NICE"
			| "PAYCO"
			| "PAYMENTWALL"
			| "PAYPAL"
			| "PAYPLE"
			| "SETTLE"
			| "SMARTRO"
			| "SMILEPAY"
			| "SYRUP"
			| "TOSSPAY"
			| "TOSSPAYMENTS"
			| "WELCOME";
		/**
		 * PG사 결제 모듈
		 * @description <p>PG사 결제 모듈</p>
		 *
		 * @enum {string}
		 */
		PgProvider:
			| "ALIPAY"
			| "BLUEWALNUT"
			| "CHAI"
			| "DANAL"
			| "DANAL_TPAY"
			| "DAOU"
			| "EXIMBAY"
			| "GALAXIA"
			| "HTML5_INICIS"
			| "HYPHEN"
			| "INICIS"
			| "INICIS_UNIFIED"
			| "INICIS_V2"
			| "JTNET"
			| "KAKAO"
			| "KAKAOPAY"
			| "KCP"
			| "KCP_BILLING"
			| "KCP_DIRECT"
			| "KCP_QUICK"
			| "KCP_V2"
			| "KICC"
			| "KPN"
			| "KSNET"
			| "MOBILIANS"
			| "NAVERCO"
			| "NAVERPAY"
			| "NICE"
			| "NICE_V2"
			| "PAYCO"
			| "PAYMENTWALL"
			| "PAYPAL"
			| "PAYPAL_V2"
			| "PAYPLE"
			| "PINPAY"
			| "SETTLE"
			| "SETTLE_ACC"
			| "SETTLE_FIRM"
			| "SMARTRO"
			| "SMARTRO_V2"
			| "SMILEPAY"
			| "SYRUP"
			| "TOSSPAY"
			| "TOSSPAYMENTS"
			| "TOSSPAY_V2"
			| "TOSS_BRANDPAY"
			| "UPLUS"
			| "WELCOME";
		/**
		 * PG사에서 오류를 전달한 경우
		 * @description <p>PG사에서 오류를 전달한 경우</p>
		 *
		 */
		PgProviderError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PG_PROVIDER";
			message?: string;
			pgCode: string;
			pgMessage: string;
		};
		/**
		 * 고객사의 플랫폼 기능 관련 정보
		 * @description <p>고객사의 플랫폼 기능 관련 정보</p>
		 *
		 */
		Platform: {
			/** 해당 플랫폼의 고객사 아이디 */
			merchantId: string;
			graphqlId: string;
			/** 파트너 정산금액의 소수점 처리 방식 */
			roundType: components["schemas"]["PlatformRoundType"];
			/** 수수료 및 할인 분담 정책 관련 계산식 */
			settlementFormula: components["schemas"]["PlatformSettlementFormula"];
			/** 정산 규칙 */
			settlementRule: components["schemas"]["PlatformSettlementRule"];
		};
		/**
		 * 플랫폼 정산 계좌
		 * @description <p>플랫폼 정산 계좌</p>
		 *     <p><code>currency</code> 가 KRW 일 경우 예금주 조회 API 를 통해 올바른 계좌인지 검증합니다. 그 외의 화폐일 경우 따로 검증하지는 않습니다.</p>
		 *
		 */
		PlatformAccount: {
			/** 은행 */
			bank: components["schemas"]["Bank"];
			/** 정산에 사용할 통화 */
			currency: components["schemas"]["Currency"];
			/** 계좌번호 */
			number: string;
			/** 예금주명 */
			holder: string;
			/** 계좌 상태 */
			status: components["schemas"]["PlatformAccountStatus"];
		};
		/**
		 * 예금주 조회 성공 응답 정보
		 * @description <p>예금주 조회 성공 응답 정보</p>
		 *
		 */
		PlatformAccountHolder: {
			/** 계좌 예금주 이름 */
			holderName: string;
			/** 계좌 검증 아이디 */
			accountVerificationId: string;
		};
		/**
		 * 플랫폼 계좌 상태
		 * @description <p>플랫폼 계좌 상태</p>
		 *
		 * @enum {string}
		 */
		PlatformAccountStatus:
			| "EXPIRED"
			| "NOT_VERIFIED"
			| "UNKNOWN"
			| "VERIFIED"
			| "VERIFYING"
			| "VERIFY_FAILED";
		/**
		 * 파트너 계좌 검증 아이디를 이미 사용한 경우
		 * @description <p>파트너 계좌 검증 아이디를 이미 사용한 경우</p>
		 *
		 */
		PlatformAccountVerificationAlreadyUsedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED";
			message?: string;
		};
		/**
		 * 파트너 계좌 인증이 실패한 경우
		 * @description <p>파트너 계좌 인증이 실패한 경우</p>
		 *
		 */
		PlatformAccountVerificationFailedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ACCOUNT_VERIFICATION_FAILED";
			message?: string;
		};
		/**
		 * 파트너 계좌 검증 아이디를 찾을 수 없는 경우
		 * @description <p>파트너 계좌 검증 아이디를 찾을 수 없는 경우</p>
		 *
		 */
		PlatformAccountVerificationNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND";
			message?: string;
		};
		PlatformAdditionalFeePoliciesNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ADDITIONAL_FEE_POLICIES_NOT_FOUND";
			ids: string[];
			graphqlIds: string[];
			message?: string;
		};
		/**
		 * 추가 수수료 정책
		 * @description <p>추가 수수료 정책</p>
		 *     <p>추가 수수료 정책는 고객사의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.</p>
		 *
		 */
		PlatformAdditionalFeePolicy: {
			/** 추가 수수료 정책 고유 아이디 */
			id: string;
			graphqlId: string;
			/** 추가 수수료 정책 이름 */
			name: string;
			/** 책정 수수료 */
			fee: components["schemas"]["PlatformFee"];
			/** 해당 추가 수수료 정책에 대한 메모 */
			memo?: string;
			/** 부가세를 부담할 주체 */
			vatPayer: components["schemas"]["PlatformPayer"];
			/** 보관 여부 */
			isArchived: boolean;
			/**
			 * 변경 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		PlatformAdditionalFeePolicyAlreadyExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ADDITIONAL_FEE_POLICY_ALREADY_EXISTS";
			message?: string;
		};
		/**
		 * 추가 수수료 정책 다건 조회를 위한 필터 조건
		 * @description <p>추가 수수료 정책 다건 조회를 위한 필터 조건</p>
		 *
		 */
		PlatformAdditionalFeePolicyFilterInput: {
			/**
			 * 보관 조회 여부
			 * @description <p>true 이면 보관된 추가 수수료 정책의 필터 옵션을 조회하고, false 이면 보관되지 않은 추가 수수료 정책의 필터 옵션을 조회합니다. 기본값은 false 입니다.</p>
			 *
			 */
			isArchived?: boolean;
			/**
			 * 금액 부담 주체
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 부가세 부담 주체에 해당하는 추가 수수료 정책만 조회합니다.</p>
			 *
			 */
			vatPayers?: components["schemas"]["PlatformPayer"][];
			/** 검색 키워드 */
			keyword?: components["schemas"]["PlatformAdditionalFeePolicyFilterInputKeyword"];
		};
		/**
		 * 검색 키워드 입력 정보
		 * @description <p>검색 키워드 입력 정보</p>
		 *     <p>검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 추가 수수료 정책만 조회합니다. 하위 필드는 명시된 값 중 한 가지만 적용됩니다.</p>
		 *
		 */
		PlatformAdditionalFeePolicyFilterInputKeyword: {
			/** @description <p>해당 값이 포함된 name 을 가진 추가 수수료 정책만 조회합니다.</p>
			 *      */
			name?: string;
			/** @description <p>해당 값이 포함된 id 를 가진 추가 수수료 정책만 조회합니다.</p>
			 *      */
			id?: string;
			/** @description <p>해당 값과 같은 수수료 를 가진 추가 수수료 정책만 조회합니다.</p>
			 *      */
			fee?: string;
		};
		PlatformAdditionalFeePolicyNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND";
			message?: string;
		};
		PlatformAdditionalFeePolicyScheduleAlreadyExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ADDITIONAL_FEE_POLICY_SCHEDULE_ALREADY_EXISTS";
			message?: string;
		};
		PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ADDITIONAL_FIXED_AMOUNT_FEE_CURRENCY_AND_SETTLEMENT_CURRENCY_MISMATCHED";
			id: string;
			graphqlId: string;
			feeCurrency: components["schemas"]["Currency"];
			settlementCurrency: components["schemas"]["Currency"];
			message?: string;
		};
		/**
		 * 보관된 추가 수수료 정책을 업데이트하려고 하는 경우
		 * @description <p>보관된 추가 수수료 정책을 업데이트하려고 하는 경우</p>
		 *
		 */
		PlatformArchivedAdditionalFeePolicyError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ARCHIVED_ADDITIONAL_FEE_POLICY";
			message?: string;
		};
		/**
		 * 보관된 계약을 업데이트하려고 하는 경우
		 * @description <p>보관된 계약을 업데이트하려고 하는 경우</p>
		 *
		 */
		PlatformArchivedContractError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ARCHIVED_CONTRACT";
			message?: string;
		};
		/**
		 * 보관된 할인 분담 정책을 업데이트하려고 하는 경우
		 * @description <p>보관된 할인 분담 정책을 업데이트하려고 하는 경우</p>
		 *
		 */
		PlatformArchivedDiscountSharePolicyError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ARCHIVED_DISCOUNT_SHARE_POLICY";
			message?: string;
		};
		/**
		 * 보관된 파트너를 업데이트하려고 하는 경우
		 * @description <p>보관된 파트너를 업데이트하려고 하는 경우</p>
		 *
		 */
		PlatformArchivedPartnerError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ARCHIVED_PARTNER";
			message?: string;
		};
		/**
		 * 보관된 파트너들을 예약 업데이트하려고 하는 경우
		 * @description <p>보관된 파트너들을 예약 업데이트하려고 하는 경우</p>
		 *
		 */
		PlatformArchivedPartnersCannotBeScheduledError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ARCHIVED_PARTNERS_CANNOT_BE_SCHEDULED";
			message?: string;
		};
		PlatformBulkPayout: {
			/** 일괄 지급 고유 아이디 */
			id: string;
			graphqlId: string;
			name: string;
			creatorId: string;
			method: components["schemas"]["PlatformPayoutMethod"];
			arePayoutsGenerated: boolean;
			/** Format: int64 */
			totalPayoutAmount: number;
			status: components["schemas"]["PlatformBulkPayoutStatus"];
			payoutStats: components["schemas"]["PlatformBulkPayoutStats"];
			/** Format: date-time */
			statusUpdatedAt: string;
			/** Format: date-time */
			createdAt: string;
			/** Format: date-time */
			updatedAt: string;
		};
		PlatformBulkPayoutFilterInput: {
			statuses?: components["schemas"]["PlatformBulkPayoutStatus"][];
			methods?: components["schemas"]["PlatformPayoutMethod"][];
			criteria?: components["schemas"]["PlatformBulkPayoutFilterInputCriteria"];
		};
		PlatformBulkPayoutFilterInputCriteria: {
			timestampRange?: components["schemas"]["DateTimeRange"];
			bulkPayoutId?: string;
		};
		/**
		 * 일괄 지급이 존재하지 않는 경우
		 * @description <p>일괄 지급이 존재하지 않는 경우</p>
		 *
		 */
		PlatformBulkPayoutNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_BULK_PAYOUT_NOT_FOUND";
			message?: string;
		};
		PlatformBulkPayoutPartnerSettlement: {
			bulkPayoutId: string;
			partnerSettlement: components["schemas"]["PlatformPartnerSettlement"];
			isSelected: boolean;
		};
		PlatformBulkPayoutPartnerSettlementsFilterInput: {
			partnerIds: string[];
			/** 정산 상태 */
			statuses: components["schemas"]["PlatformPartnerSettlementStatus"][];
		};
		PlatformBulkPayoutStats: {
			amount: components["schemas"]["PlatformPayoutStatusStats"];
			count: components["schemas"]["PlatformPayoutStatusStats"];
		};
		/** @enum {string} */
		PlatformBulkPayoutStatus:
			| "CANCELLED"
			| "COMPLETED"
			| "ONGOING"
			| "PREPARED"
			| "PREPARING"
			| "STOPPED";
		PlatformBulkPayoutStatusStats: {
			/** Format: int64 */
			preparing: number;
			/** Format: int64 */
			prepared: number;
			/** Format: int64 */
			ongoing: number;
			/** Format: int64 */
			stopped: number;
			/** Format: int64 */
			cancelled: number;
			/** Format: int64 */
			completed: number;
		};
		/**
		 * 다운로드 할 시트 컬럼
		 * @description <p>다운로드 할 시트 컬럼</p>
		 *
		 * @enum {string}
		 */
		PlatformBulkPayoutsSheetField:
			| "BULK_PAYOUT_ID"
			| "CREATED_AT"
			| "CREATOR_ID"
			| "METHOD"
			| "NAME"
			| "PAYOUT_CANCELLED_AMOUNT"
			| "PAYOUT_CANCELLED_COUNT"
			| "PAYOUT_FAILED_AMOUNT"
			| "PAYOUT_FAILED_COUNT"
			| "PAYOUT_PREPARED_AMOUNT"
			| "PAYOUT_PREPARED_COUNT"
			| "PAYOUT_STOPPED_AMOUNT"
			| "PAYOUT_STOPPED_COUNT"
			| "PAYOUT_SUCCEEDED_AMOUNT"
			| "PAYOUT_SUCCEEDED_COUNT"
			| "STATUS"
			| "STATUS_UPDATED_AT"
			| "TOTAL_PAYOUT_AMOUNT";
		PlatformCancelOrderTransfersExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CANCEL_ORDER_TRANSFERS_EXISTS";
			message?: string;
		};
		/**
		 * 취소 가능한 금액이 초과한 경우
		 * @description <p>취소 가능한 금액이 초과한 경우</p>
		 *
		 */
		PlatformCancellableAmountExceededError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CANCELLABLE_AMOUNT_EXCEEDED";
			/** Format: int64 */
			cancellableAmount: number;
			amountType: components["schemas"]["PlatformCancellableAmountType"];
			message?: string;
		};
		/**
		 * 금액 타입
		 * @description <p>금액 타입</p>
		 *
		 * @enum {string}
		 */
		PlatformCancellableAmountType: "SUPPLY_WITH_VAT" | "TAX_FREE";
		PlatformCancellableDiscountAmountExceededError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CANCELLABLE_DISCOUNT_AMOUNT_EXCEEDED";
			discountSharePolicyId: string;
			discountSharePolicyGraphqlId: string;
			/** Format: int64 */
			cancellableAmount: number;
			productId?: string;
			message?: string;
		};
		PlatformCancellableProductQuantityExceededError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CANCELLABLE_PRODUCT_QUANTITY_EXCEEDED";
			productId: string;
			/** Format: int64 */
			cancellableQuantity: number;
			message?: string;
		};
		PlatformCancellationAndPaymentTypeMismatchedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CANCELLATION_AND_PAYMENT_TYPE_MISMATCHED";
			message?: string;
		};
		PlatformCancellationNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CANCELLATION_NOT_FOUND";
			message?: string;
		};
		/**
		 * 예약된 업데이트가 있는 추가 수수료 정책을 보관하려고 하는 경우
		 * @description <p>예약된 업데이트가 있는 추가 수수료 정책을 보관하려고 하는 경우</p>
		 *
		 */
		PlatformCannotArchiveScheduledAdditionalFeePolicyError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_ADDITIONAL_FEE_POLICY";
			message?: string;
		};
		/**
		 * 예약된 업데이트가 있는 계약을 보관하려고 하는 경우
		 * @description <p>예약된 업데이트가 있는 계약을 보관하려고 하는 경우</p>
		 *
		 */
		PlatformCannotArchiveScheduledContractError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_CONTRACT";
			message?: string;
		};
		/**
		 * 예약된 업데이트가 있는 할인 분담 정책을 보관하려고 하는 경우
		 * @description <p>예약된 업데이트가 있는 할인 분담 정책을 보관하려고 하는 경우</p>
		 *
		 */
		PlatformCannotArchiveScheduledDiscountSharePolicyError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_DISCOUNT_SHARE_POLICY";
			message?: string;
		};
		/**
		 * 예약된 업데이트가 있는 파트너를 보관하려고 하는 경우
		 * @description <p>예약된 업데이트가 있는 파트너를 보관하려고 하는 경우</p>
		 *
		 */
		PlatformCannotArchiveScheduledPartnerError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_PARTNER";
			message?: string;
		};
		/**
		 * 정산 건 식별에 실패한 경우
		 * @description <p>정산 건 식별에 실패한 경우</p>
		 *
		 */
		PlatformCannotSpecifyTransferError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CANNOT_SPECIFY_TRANSFER";
			message?: string;
		};
		/**
		 * 플랫폼 파트너 담당자 연락 정보
		 * @description <p>플랫폼 파트너 담당자 연락 정보</p>
		 *     <p>파트너 담당자에게 연락하기 위한 정보들 입니다.</p>
		 *
		 */
		PlatformContact: {
			/** 담당자 이름 */
			name: string;
			/** 담당자 휴대폰 번호 */
			phoneNumber?: string;
			/** 담당자 이메일 */
			email: string;
		};
		/**
		 * 계약
		 * @description <p>계약</p>
		 *     <p>계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
		 *     고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.</p>
		 *
		 */
		PlatformContract: {
			/** 계약 고유 아이디 */
			id: string;
			graphqlId: string;
			/** 계약 이름 */
			name: string;
			/** 계약 내부 표기를 위한 메모 */
			memo?: string;
			/** 중개수수료 */
			platformFee: components["schemas"]["PlatformFee"];
			/** 정산 주기 */
			settlementCycle: components["schemas"]["PlatformSettlementCycle"];
			/** 중개수수료에 대한 부가세 부담 주체 */
			platformFeeVatPayer: components["schemas"]["PlatformPayer"];
			/**
			 * 정산 시 결제금액 부가세 감액 여부
			 * @description <p>false인 경우 정산금에서 결제 금액 부가세를 감액하지 않고, true인 경우 정산금에서 결제 금액 부가세를 감액합니다.</p>
			 *
			 */
			subtractPaymentVatAmount: boolean;
			/** 보관 여부 */
			isArchived: boolean;
			/**
			 * 변경 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		PlatformContractAlreadyExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CONTRACT_ALREADY_EXISTS";
			message?: string;
		};
		/**
		 * 계약 다건 조회를 위한 필터 조건
		 * @description <p>계약 다건 조회를 위한 필터 조건</p>
		 *
		 */
		PlatformContractFilterInput: {
			/**
			 * 금액 부담 주체
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 수수료 부담 주체를 가진 계약만 조회합니다.</p>
			 *
			 */
			platformFeePayers?: components["schemas"]["PlatformPayer"][];
			/**
			 * 플랫폼 정산 주기 계산 방식
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 주기 계산 방식을 가진 계약만 조회합니다.</p>
			 *
			 */
			cycleTypes?: components["schemas"]["PlatformSettlementCycleType"][];
			/**
			 * 플랫폼 정산 기준일
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 기준일을 가진 계약만 조회합니다.</p>
			 *
			 */
			datePolicies?: components["schemas"]["PlatformSettlementCycleDatePolicy"][];
			/**
			 * 보관 조회 여부
			 * @description <p>true 이면 보관된 계약을 조회하고, false 이면 보관되지 않은 계약을 조회합니다. 기본값은 false 입니다.</p>
			 *
			 */
			isArchived?: boolean;
			/** 검색 키워드 */
			keyword?: components["schemas"]["PlatformContractFilterInputKeyword"];
		};
		/**
		 * 검색 키워드 입력 정보
		 * @description <p>검색 키워드 입력 정보</p>
		 *     <p>검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 계약만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.</p>
		 *
		 */
		PlatformContractFilterInputKeyword: {
			/** @description <p>해당 값이 포함된 id 를 가진 계약만 조회합니다.</p>
			 *      */
			id?: string;
			/** @description <p>해당 값이 포함된 name 을 가진 계약만 조회합니다.</p>
			 *      */
			name?: string;
		};
		PlatformContractNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CONTRACT_NOT_FOUND";
			message?: string;
		};
		PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CONTRACT_PLATFORM_FIXED_AMOUNT_FEE_CURRENCY_AND_SETTLEMENT_CURRENCY_MISMATCHED";
			id: string;
			graphqlId: string;
			feeCurrency: components["schemas"]["Currency"];
			settlementCurrency: components["schemas"]["Currency"];
			message?: string;
		};
		PlatformContractScheduleAlreadyExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CONTRACT_SCHEDULE_ALREADY_EXISTS";
			message?: string;
		};
		PlatformContractsNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CONTRACTS_NOT_FOUND";
			ids: string[];
			graphqlIds: string[];
			message?: string;
		};
		/**
		 * 지원 되지 않는 통화를 선택한 경우
		 * @description <p>지원 되지 않는 통화를 선택한 경우</p>
		 *
		 */
		PlatformCurrencyNotSupportedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_CURRENCY_NOT_SUPPORTED";
			message?: string;
		};
		PlatformDiscountCancelExceededOrderCancelAmountError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_DISCOUNT_CANCEL_EXCEEDED_ORDER_CANCEL_AMOUNT";
			message?: string;
		};
		PlatformDiscountExceededOrderAmountError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_DISCOUNT_EXCEEDED_ORDER_AMOUNT";
			message?: string;
		};
		PlatformDiscountSharePoliciesNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_DISCOUNT_SHARE_POLICIES_NOT_FOUND";
			ids: string[];
			graphqlIds: string[];
			message?: string;
		};
		/**
		 * 할인 분담 정책
		 * @description <p>할인 분담 정책</p>
		 *     <p>할인 분담은 고객사의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
		 *     할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.</p>
		 *
		 */
		PlatformDiscountSharePolicy: {
			id: string;
			graphqlId: string;
			/** 할인 분담 정책 이름 */
			name: string;
			/**
			 * 할인 분담율
			 * Format: int32
			 * @description <p>파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 <code>할인금액 * partnerShareRate * 10^5</code> 로 책정합니다.</p>
			 *
			 */
			partnerShareRate: number;
			/** 해당 할인 분담에 대한 메모 */
			memo?: string;
			/** 보관 여부 */
			isArchived: boolean;
			/**
			 * 변경 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		PlatformDiscountSharePolicyAlreadyExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_DISCOUNT_SHARE_POLICY_ALREADY_EXISTS";
			message?: string;
		};
		/**
		 * 할인 분담 정책 다건 조회를 위한 필터 조건
		 * @description <p>할인 분담 정책 다건 조회를 위한 필터 조건</p>
		 *
		 */
		PlatformDiscountSharePolicyFilterInput: {
			/**
			 * 보관 조회 여부
			 * @description <p>true 이면 보관된 할인 분담 정책을 조회하고, false 이면 보관되지 않은 할인 분담 정책을 조회합니다. 기본값은 false 입니다.</p>
			 *
			 */
			isArchived?: boolean;
			/** @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 파트너 분담율을 가진 할인 분담 정책만 조회합니다.</p>
			 *      */
			partnerShareRates?: number[];
			/** 검색 키워드 */
			keyword?: components["schemas"]["PlatformDiscountSharePolicyFilterInputKeyword"];
		};
		/**
		 * 검색 키워드 입력 정보
		 * @description <p>검색 키워드 입력 정보</p>
		 *     <p>검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 할인 분담 정책만 조회합니다. 하위 필드는 명시된 값 중 한 가지만 적용됩니다.</p>
		 *
		 */
		PlatformDiscountSharePolicyFilterInputKeyword: {
			/** @description <p>해당 값이 포함된 id 를 가진 할인 분담 정책만 조회합니다.</p>
			 *      */
			id?: string;
			/** @description <p>해당 값이 포함된 name 을 가진 할인 분담만 조회합니다.</p>
			 *      */
			name?: string;
		};
		/**
		 * 할인 분담 정책 필터 옵션 조회 성공 응답 정보
		 * @description <p>할인 분담 정책 필터 옵션 조회 성공 응답 정보</p>
		 *
		 */
		PlatformDiscountSharePolicyFilterOptions: {
			/** 조회된 파트너 분담율 리스트 */
			partnerShareRates: number[];
		};
		PlatformDiscountSharePolicyIdDuplicatedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_DISCOUNT_SHARE_POLICY_ID_DUPLICATED";
			id: string;
			graphqlId: string;
			message?: string;
		};
		PlatformDiscountSharePolicyNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND";
			message?: string;
		};
		PlatformDiscountSharePolicyScheduleAlreadyExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_DISCOUNT_SHARE_POLICY_SCHEDULE_ALREADY_EXISTS";
			message?: string;
		};
		/**
		 * 외부 api 오류
		 * @description <p>외부 api 오류</p>
		 *
		 */
		PlatformExternalApiFailedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_EXTERNAL_API_FAILED";
			message?: string;
		};
		/**
		 * 외부 api의 일시적인 오류
		 * @description <p>외부 api의 일시적인 오류</p>
		 *
		 */
		PlatformExternalApiTemporarilyFailedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_EXTERNAL_API_TEMPORARILY_FAILED";
			message?: string;
		};
		/**
		 * 외부 결제 정보
		 * @description <p>외부 결제 정보</p>
		 *
		 */
		PlatformExternalPayment: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "EXTERNAL";
			/** 결제 아이디 */
			id: string;
			/** 주문 명 */
			orderName?: string;
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 결제 수단 */
			method?: components["schemas"]["PlatformPaymentMethod"];
			/**
			 * 결제 일시
			 * Format: date-time
			 */
			paidAt?: string;
		};
		/**
		 * 플랫폼 중개수수료 정보
		 * @description <p>플랫폼 중개수수료 정보</p>
		 *
		 */
		PlatformFee:
			| components["schemas"]["PlatformFixedAmountFee"]
			| components["schemas"]["PlatformFixedRateFee"];
		/**
		 * 수수료 계산 방식을 특정하기 위한 입력 정보
		 * @description <p>수수료 계산 방식을 특정하기 위한 입력 정보</p>
		 *     <p>정률 수수료를 설정하고 싶은 경우 <code>fixedRate</code> 필드에, 정액 수수료를 설정하고 싶은 경우 <code>fixedAmount</code> 필드에 값을 명시해 요청합니다.
		 *     두 필드 모두 값이 들어있지 않은 경우 요청이 거절됩니다.</p>
		 *
		 */
		PlatformFeeInput: {
			/**
			 * 정률 수수료
			 * Format: int32
			 */
			fixedRate?: number;
			/**
			 * 정액 수수료
			 * Format: int64
			 */
			fixedAmount?: number;
		};
		/**
		 * 정액 수수료
		 * @description <p>정액 수수료</p>
		 *     <p>총 금액에 무관하게 정해진 수수료 금액을 책정합니다.</p>
		 *
		 */
		PlatformFixedAmountFee: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "FIXED_AMOUNT";
			/**
			 * 고정된 수수료 금액
			 * Format: int64
			 */
			amount: number;
		};
		/**
		 * 정률 수수료
		 * @description <p>정률 수수료</p>
		 *     <p>총 금액에 정해진 비율을 곱한 만큼의 수수료를 책정합니다.</p>
		 *
		 */
		PlatformFixedRateFee: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "FIXED_RATE";
			/**
			 * 수수료율
			 * Format: int32
			 * @description <p>총 금액 대비 수수료 비율을 의미하며, 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수입니다. <code>총 금액 * rate * 10^5</code> (<code>rate * 10^3 %</code>) 만큼 수수료를 책정합니다.</p>
			 *
			 */
			rate: number;
		};
		/**
		 * 공휴일
		 * @description <p>공휴일</p>
		 *
		 */
		PlatformHoliday: {
			/** 이름 */
			name: string;
			/**
			 * 날짜
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			date: string;
		};
		/**
		 * 파트너 타입 수정에 필요한 데이터가 부족한 경우
		 * @description <p>파트너 타입 수정에 필요한 데이터가 부족한 경우</p>
		 *
		 */
		PlatformInsufficientDataToChangePartnerTypeError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_INSUFFICIENT_DATA_TO_CHANGE_PARTNER_TYPE";
			message?: string;
		};
		PlatformInvalidSettlementFormulaError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_INVALID_SETTLEMENT_FORMULA";
			platformFee?: components["schemas"]["PlatformSettlementFormulaError"];
			discountShare?: components["schemas"]["PlatformSettlementFormulaError"];
			additionalFee?: components["schemas"]["PlatformSettlementFormulaError"];
			message?: string;
		};
		/**
		 * 수기 정산건
		 * @description <p>수기 정산건</p>
		 *
		 */
		PlatformManualTransfer: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "MANUAL";
			/** 정산건 아이디 */
			id: string;
			graphqlId: string;
			/** 파트너 */
			partner: components["schemas"]["PlatformPartner"];
			/** 정산 상태 */
			status: components["schemas"]["PlatformTransferStatus"];
			/** 메모 */
			memo?: string;
			/**
			 * 정산 일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			settlementDate: string;
			/** 정산 통화 */
			settlementCurrency: components["schemas"]["Currency"];
			payoutId?: string;
			payoutGraphqlId?: string;
			/** 테스트 모드 여부 */
			isForTest: boolean;
			/**
			 * 정산 금액
			 * Format: int64
			 */
			settlementAmount: number;
		};
		PlatformManualTransferSummary: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "MANUAL";
			id: string;
			graphqlId: string;
			partner: components["schemas"]["PlatformTransferSummaryPartner"];
			status: components["schemas"]["PlatformTransferStatus"];
			memo?: string;
			/** @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *      */
			settlementDate: string;
			settlementCurrency: components["schemas"]["Currency"];
			isForTest: boolean;
			/** Format: int64 */
			settlementAmount: number;
		};
		/**
		 * 업데이트 불가능한 상태를 업데이트하려는 경우
		 * @description <p>업데이트 불가능한 상태를 업데이트하려는 경우</p>
		 *
		 */
		PlatformNonUpdatableStatusError: {
			type: string;
			message?: string;
		};
		/**
		 * 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
		 * @description <p>플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</p>
		 *
		 */
		PlatformNotEnabledError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_NOT_ENABLED";
			message?: string;
		};
		/**
		 * 지원하지 않는 은행인 경우
		 * @description <p>지원하지 않는 은행인 경우</p>
		 *
		 */
		PlatformNotSupportedBankError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_NOT_SUPPORTED_BANK";
			message?: string;
		};
		/**
		 * 주문 취소 정산건
		 * @description <p>주문 취소 정산건</p>
		 *
		 */
		PlatformOrderCancelTransfer: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "ORDER_CANCEL";
			/** 정산건 아이디 */
			id: string;
			graphqlId: string;
			/** 파트너 */
			partner: components["schemas"]["PlatformPartner"];
			/** 정산 상태 */
			status: components["schemas"]["PlatformTransferStatus"];
			/** 메모 */
			memo?: string;
			/**
			 * 정산 일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			settlementDate: string;
			/** 정산 통화 */
			settlementCurrency: components["schemas"]["Currency"];
			payoutId?: string;
			payoutGraphqlId?: string;
			/** 테스트 모드 여부 */
			isForTest: boolean;
			/** 정산 금액 정보 */
			amount: components["schemas"]["PlatformOrderSettlementAmount"];
			/** 계약 */
			contract: components["schemas"]["PlatformContract"];
			/** 결제 정보 */
			payment: components["schemas"]["PlatformPayment"];
			/**
			 * 정산 시작일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			settlementStartDate: string;
			/** 주문 항목 리스트 */
			orderLines: components["schemas"]["PlatformOrderTransferOrderLine"][];
			/** 정산 금액 계산 시 사용된 추가 수수료 정보 */
			additionalFees: components["schemas"]["PlatformOrderTransferAdditionalFee"][];
			/** 정산 금액 계산 시 사용된 할인 정보 */
			discounts: components["schemas"]["PlatformOrderTransferDiscount"][];
			/** 주문 취소 정보 */
			cancellation: components["schemas"]["PlatformOrderTransferCancellation"];
			/** 정산 파라미터 (실험기능) */
			parameters: components["schemas"]["TransferParameters"];
		};
		PlatformOrderCancelTransferSummary: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "ORDER_CANCEL";
			id: string;
			graphqlId: string;
			storeId: string;
			partner: components["schemas"]["PlatformTransferSummaryPartner"];
			status: components["schemas"]["PlatformTransferStatus"];
			memo?: string;
			/** @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *      */
			settlementDate: string;
			settlementCurrency: components["schemas"]["Currency"];
			isForTest: boolean;
			amount: components["schemas"]["PlatformOrderSettlementAmount"];
			payment: components["schemas"]["PlatformTransferSummaryPayment"];
			/** @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *      */
			settlementStartDate: string;
		};
		PlatformOrderDetailMismatchedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ORDER_DETAIL_MISMATCHED";
			message?: string;
		};
		/**
		 * 정산 금액 정보
		 * @description <p>정산 금액 정보</p>
		 *     <p>정산 금액과 정산 금액 계산에 사용된 금액 정보들 입니다.</p>
		 *
		 */
		PlatformOrderSettlementAmount: {
			/**
			 * 정산 금액
			 * Format: int64
			 */
			settlement: number;
			/**
			 * 결제 금액
			 * Format: int64
			 */
			payment: number;
			/**
			 * 결제 금액 부가세
			 * Format: int64
			 */
			paymentVat: number;
			/**
			 * 결제 금액 부가세 부담금액
			 * Format: int64
			 * @description <p>참조된 계약의 결제 금액 부가세 감액 여부에 따라 false인 경우 0원, true인 경우 결제 금액 부가세입니다.</p>
			 *
			 */
			paymentVatBurden: number;
			/**
			 * 면세 금액
			 * Format: int64
			 */
			taxFree: number;
			/**
			 * 공급가액
			 * Format: int64
			 */
			supply: number;
			/**
			 * 주문 금액
			 * Format: int64
			 */
			order: number;
			/**
			 * 중개 수수료
			 * Format: int64
			 */
			platformFee: number;
			/**
			 * 중개 수수료 부가세
			 * Format: int64
			 */
			platformFeeVat: number;
			/**
			 * 추가 수수료
			 * Format: int64
			 */
			additionalFee: number;
			/**
			 * 추가 수수료 부가세
			 * Format: int64
			 */
			additionalFeeVat: number;
			/**
			 * 할인 금액
			 * Format: int64
			 */
			discount: number;
			/**
			 * 할인 분담 금액
			 * Format: int64
			 */
			discountShare: number;
		};
		/**
		 * 주문 정산건
		 * @description <p>주문 정산건</p>
		 *
		 */
		PlatformOrderTransfer: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "ORDER";
			/** 정산건 아이디 */
			id: string;
			graphqlId: string;
			/** 파트너 */
			partner: components["schemas"]["PlatformPartner"];
			/** 정산 상태 */
			status: components["schemas"]["PlatformTransferStatus"];
			/** 메모 */
			memo?: string;
			/**
			 * 정산 일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			settlementDate: string;
			/** 정산 통화 */
			settlementCurrency: components["schemas"]["Currency"];
			payoutId?: string;
			payoutGraphqlId?: string;
			/** 테스트 모드 여부 */
			isForTest: boolean;
			/** 정산 금액 정보 */
			amount: components["schemas"]["PlatformOrderSettlementAmount"];
			/** 계약 */
			contract: components["schemas"]["PlatformContract"];
			/** 결제 정보 */
			payment: components["schemas"]["PlatformPayment"];
			/**
			 * 정산 시작일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			settlementStartDate: string;
			/** 주문 항목 리스트 */
			orderLines: components["schemas"]["PlatformOrderTransferOrderLine"][];
			/** 정산 금액 계산 시 사용된 추가 수수료 정보 */
			additionalFees: components["schemas"]["PlatformOrderTransferAdditionalFee"][];
			/** 정산 금액 계산 시 사용된 할인 정보 */
			discounts: components["schemas"]["PlatformOrderTransferDiscount"][];
			/** 정산 파라미터 (실험기능) */
			parameters: components["schemas"]["TransferParameters"];
		};
		/**
		 * 추가 수수료 정보
		 * @description <p>추가 수수료 정보</p>
		 *
		 */
		PlatformOrderTransferAdditionalFee: {
			/** 추가 수수료 정책 */
			policy: components["schemas"]["PlatformAdditionalFeePolicy"];
			/**
			 * 추가 수수료 금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 추가 수수료 부가세 금액
			 * Format: int64
			 */
			vat: number;
		};
		PlatformOrderTransferAlreadyCancelledError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_ORDER_TRANSFER_ALREADY_CANCELLED";
			message?: string;
		};
		/**
		 * 주문 취소 정보
		 * @description <p>주문 취소 정보</p>
		 *
		 */
		PlatformOrderTransferCancellation: {
			/** 주문 취소 아이디 */
			id: string;
			/**
			 * 취소 일시
			 * Format: date-time
			 */
			cancelledAt: string;
		};
		/**
		 * 할인 정보
		 * @description <p>할인 정보</p>
		 *
		 */
		PlatformOrderTransferDiscount: {
			/** 할인 분담 정책 */
			sharePolicy: components["schemas"]["PlatformDiscountSharePolicy"];
			/**
			 * 할인 금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 할인 분담 금액
			 * Format: int64
			 */
			shareAmount: number;
		};
		/**
		 * 주문 항목
		 * @description <p>주문 항목</p>
		 *
		 */
		PlatformOrderTransferOrderLine: {
			/** 상품 */
			product: components["schemas"]["PlatformOrderTransferProduct"];
			/**
			 * 상품 수량
			 * Format: int32
			 */
			quantity: number;
			/** 상품 할인 정보 */
			discounts: components["schemas"]["PlatformOrderTransferDiscount"][];
			/** 상품 추가 수수료 정보 */
			additionalFees: components["schemas"]["PlatformOrderTransferAdditionalFee"][];
			/** 상품 정산 금액 정보 */
			amount: components["schemas"]["PlatformOrderSettlementAmount"];
		};
		/**
		 * 상품
		 * @description <p>상품</p>
		 *
		 */
		PlatformOrderTransferProduct: {
			/** 상품 아이디 */
			id: string;
			/** 상품 이름 */
			name: string;
			/**
			 * 상품 금액
			 * Format: int64
			 */
			amount: number;
			/**
			 * 상품 면세 금액
			 * Format: int64
			 */
			taxFreeAmount: number;
			/** 태그 */
			tag?: string;
		};
		PlatformOrderTransferSummary: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "ORDER";
			id: string;
			graphqlId: string;
			storeId: string;
			partner: components["schemas"]["PlatformTransferSummaryPartner"];
			status: components["schemas"]["PlatformTransferStatus"];
			memo?: string;
			/** @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *      */
			settlementDate: string;
			settlementCurrency: components["schemas"]["Currency"];
			isForTest: boolean;
			amount: components["schemas"]["PlatformOrderSettlementAmount"];
			payment: components["schemas"]["PlatformTransferSummaryPayment"];
			/** @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *      */
			settlementStartDate: string;
		};
		/**
		 * 파트너
		 * @description <p>파트너</p>
		 *     <p>파트너는 고객사가 정산해주어야 할 대상입니다.
		 *     기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.</p>
		 *
		 */
		PlatformPartner: {
			/** 파트너 고유 아이디 */
			id: string;
			graphqlId: string;
			/** 파트너 법인명 혹은 이름 */
			name: string;
			/** 파트너 담당자 연락 정보 */
			contact: components["schemas"]["PlatformContact"];
			/** 정산 계좌 */
			account: components["schemas"]["PlatformAccount"];
			/** 파트너의 상태 */
			status: components["schemas"]["PlatformPartnerStatus"];
			/** 파트너에 설정된 기본 계약 아이디 */
			defaultContractId: string;
			/** 파트너에 대한 메모 */
			memo?: string;
			/** 파트너의 태그 리스트 */
			tags: string[];
			/** 파트너 유형별 정보 */
			type: components["schemas"]["PlatformPartnerType"];
			/** 보관 여부 */
			isArchived: boolean;
			/**
			 * 변경 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		/**
		 * 플랫폼 파트너 사업자 상태
		 * @description <p>플랫폼 파트너 사업자 상태</p>
		 *
		 * @enum {string}
		 */
		PlatformPartnerBusinessStatus:
			| "CLOSED"
			| "IN_BUSINESS"
			| "NOT_FOUND"
			| "NOT_VERIFIED"
			| "SUSPENDED"
			| "VERIFYING"
			| "VERIFY_FAILED";
		/**
		 * 파트너 계약 요약 정보
		 * @description <p>파트너 계약 요약 정보</p>
		 *
		 */
		PlatformPartnerContractSummary: {
			/** 계약 고유 아이디 */
			id: string;
			/** 계약 이름 */
			name: string;
		};
		/**
		 * 파트너 현황 조회 성공 응답
		 * @description <p>파트너 현황 조회 성공 응답</p>
		 *
		 */
		PlatformPartnerDashboard: {
			/** 전체 파트너 현황 */
			totalPartner: components["schemas"]["PlatformPartnerDashboardCount"];
			/** 정산 예정인 파트너 현황 */
			upcomingSettledPartner: components["schemas"]["PlatformPartnerDashboardCount"];
			/**
			 * 예정된 정산일
			 * @description <p>정산이 예정되어 있지 않은 경우 값이 주어지지 않습니다.</p>
			 *
			 */
			upcomingSettlementDate?: string;
		};
		/**
		 * 파트너 현황 정보
		 * @description <p>파트너 현황 정보</p>
		 *
		 */
		PlatformPartnerDashboardCount: {
			/**
			 * 보관된 파트너를 포함한 전체 파트너 수
			 * Format: int32
			 */
			total: number;
			/**
			 * 보관된 파트너 수
			 * Format: int32
			 */
			archived: number;
		};
		/**
		 * 파트너 필터 입력 정보
		 * @description <p>파트너 필터 입력 정보</p>
		 *
		 */
		PlatformPartnerFilterInput: {
			/**
			 * 보관 조회 여부
			 * @description <p>true 이면 보관된 파트너를 조회하고, false 이면 보관되지 않은 파트너를 조회합니다. 기본값은 false 입니다.</p>
			 *
			 */
			isArchived?: boolean;
			/** @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 태그를 하나 이상 가지는 파트너만 조회합니다.</p>
			 *      */
			tags?: string[];
			/**
			 * 은행
			 * @description <p>하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 계좌 은행을 가진 파트너만 조회합니다.</p>
			 *
			 */
			banks?: components["schemas"]["Bank"][];
			/**
			 * 통화 단위
			 * @description <p>하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 계좌 통화를 가진 파트너만 조회합니다.</p>
			 *
			 */
			accountCurrencies?: components["schemas"]["Currency"][];
			/** @description <p>하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 아이디를 가진 파트너만 조회합니다.</p>
			 *      */
			ids?: string[];
			/** @description <p>하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 기본 계약 id를 가진 파트너만 조회합니다.</p>
			 *      */
			contractIds?: string[];
			/** 검색 키워드 */
			keyword?: components["schemas"]["PlatformPartnerFilterInputKeyword"];
		};
		/**
		 * 파트너 검색 키워드 입력 정보
		 * @description <p>파트너 검색 키워드 입력 정보</p>
		 *     <p>검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 파트너만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.</p>
		 *
		 */
		PlatformPartnerFilterInputKeyword: {
			/** @description <p>해당 값이 포함된 id 를 가진 파트너만 조회합니다.</p>
			 *      */
			id?: string;
			/** @description <p>해당 값이 포함된 이름 을 가진 파트너만 조회합니다.</p>
			 *      */
			name?: string;
			/** @description <p>해당 값이 포함된 이메일 주소를 가진 파트너만 조회합니다.</p>
			 *      */
			email?: string;
			/** @description <p>해당 값이 포함된 사업자등록번호를 가진 파트너만 조회합니다.</p>
			 *      */
			businessRegistrationNumber?: string;
			/** @description <p>해당 값이 포함된 기본 계약 아이디를 가진 파트너만 조회합니다.</p>
			 *      */
			defaultContractId?: string;
			/** @description <p>해당 값이 포함된 메모를 가진 파트너만 조회합니다.</p>
			 *      */
			memo?: string;
			/** @description <p>해당 값이 포함된 계좌번호를 가진 파트너만 조회합니다.</p>
			 *      */
			accountNumber?: string;
			/** @description <p>해당 값이 포함된 계좌 예금주명을 가진 파트너만 조회합니다.</p>
			 *      */
			accountHolder?: string;
		};
		/**
		 * 파트너 필터 옵션 조회 성공 응답 정보
		 * @description <p>파트너 필터 옵션 조회 성공 응답 정보</p>
		 *
		 */
		PlatformPartnerFilterOptions: {
			/** 조회된 태그 리스트 */
			tags: string[];
			/** 조회된 파트너 계약 요약 정보 리스트 */
			contractSummary: components["schemas"]["PlatformPartnerContractSummary"][];
		};
		PlatformPartnerIdAlreadyExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_PARTNER_ID_ALREADY_EXISTS";
			message?: string;
		};
		PlatformPartnerIdsAlreadyExistError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_PARTNER_IDS_ALREADY_EXISTS";
			ids: string[];
			graphqlIds: string[];
			message?: string;
		};
		PlatformPartnerIdsDuplicatedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_PARTNER_IDS_DUPLICATED";
			ids: string[];
			graphqlIds: string[];
			message?: string;
		};
		PlatformPartnerManualSettlement: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "MANUAL";
			/** 정산내역 아이디 */
			id: string;
			graphqlId: string;
			/** 파트너 */
			partner: components["schemas"]["PlatformPartner"];
			/**
			 * 정산 일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			settlementDate: string;
			/** 정산 통화 */
			settlementCurrency: components["schemas"]["Currency"];
			/** 정산 상태 */
			status: components["schemas"]["PlatformPartnerSettlementStatus"];
			/** 메모 */
			memo?: string;
			/**
			 * 정산 금액
			 * Format: int64
			 */
			amount: number;
			/** 테스트 모드 여부 */
			isForTest: boolean;
		};
		PlatformPartnerNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_PARTNER_NOT_FOUND";
			message?: string;
		};
		PlatformPartnerOrderCancelSettlement: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "ORDER_CANCEL";
			/** 정산내역 아이디 */
			id: string;
			graphqlId: string;
			/** 파트너 */
			partner: components["schemas"]["PlatformPartner"];
			/**
			 * 정산 일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			settlementDate: string;
			/** 정산 통화 */
			settlementCurrency: components["schemas"]["Currency"];
			/** 정산 상태 */
			status: components["schemas"]["PlatformPartnerSettlementStatus"];
			/** 메모 */
			memo?: string;
			/** 계약 */
			contract: components["schemas"]["PlatformContract"];
			/** 정산 시작 일 범위 */
			settlementStartDateRange: components["schemas"]["DateRange"];
			/** 금액 정보 */
			amount: components["schemas"]["PlatformOrderSettlementAmount"];
			/** 테스트 모드 여부 */
			isForTest: boolean;
		};
		PlatformPartnerOrderSettlement: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "ORDER";
			/** 정산내역 아이디 */
			id: string;
			graphqlId: string;
			/** 파트너 */
			partner: components["schemas"]["PlatformPartner"];
			/**
			 * 정산 일
			 * @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *
			 */
			settlementDate: string;
			/** 정산 통화 */
			settlementCurrency: components["schemas"]["Currency"];
			/** 정산 상태 */
			status: components["schemas"]["PlatformPartnerSettlementStatus"];
			/** 메모 */
			memo?: string;
			/** 계약 */
			contract: components["schemas"]["PlatformContract"];
			/** 정산 시작 일 범위 */
			settlementStartDateRange: components["schemas"]["DateRange"];
			/** 금액 정보 */
			amount: components["schemas"]["PlatformOrderSettlementAmount"];
			/** 테스트 모드 여부 */
			isForTest: boolean;
		};
		PlatformPartnerScheduleAlreadyExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_PARTNER_SCHEDULE_ALREADY_EXISTS";
			message?: string;
		};
		PlatformPartnerSchedulesAlreadyExistError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_PARTNER_SCHEDULES_ALREADY_EXIST";
			ids: string[];
			graphqlIds: string[];
			message?: string;
		};
		PlatformPartnerSettlement:
			| components["schemas"]["PlatformPartnerManualSettlement"]
			| components["schemas"]["PlatformPartnerOrderCancelSettlement"]
			| components["schemas"]["PlatformPartnerOrderSettlement"];
		/**
		 * 정산내역 대시보드
		 * @description <p>정산내역 대시보드</p>
		 *
		 */
		PlatformPartnerSettlementDashboard: {
			/** 정산 통화별 정산내역 통계 리스트 */
			currencyStats: components["schemas"]["PlatformPartnerSettlementDashboardCurrencyStat"][];
		};
		/**
		 * 정산 통화별 정산내역 통계
		 * @description <p>정산 통화별 정산내역 통계</p>
		 *
		 */
		PlatformPartnerSettlementDashboardCurrencyStat: {
			/** 정산 통화 */
			currency: components["schemas"]["Currency"];
			/**
			 * 총 정산 금액
			 * Format: int64
			 */
			settlementAmount: number;
			/**
			 * 총 주문 금액
			 * Format: int64
			 */
			orderAmount: number;
			/**
			 * 총 정산 수수료 금액
			 * Format: int64
			 * @description <p>중개 수수료, 중개 수수료 부가세, 추가 수수료, 추가 수수료 부가세, 할인 분담금, 결제금액 부가세 부담금을 더한 금액 입니다.</p>
			 *
			 */
			feeAmount: number;
			/**
			 * 총 수기 정산 금액
			 * Format: int64
			 */
			manualAmount: number;
			/** 상태별 총 정산 금액 */
			statusSettlementAmount: components["schemas"]["PlatformPartnerSettlementStatusStats"];
		};
		PlatformPartnerSettlementFilterInput: {
			settlementDates?: string[];
			contractIds?: string[];
			partnerTags?: string[];
			/** 통화 단위 */
			settlementCurrencies?: components["schemas"]["Currency"][];
			/** 정산 상태 */
			statuses?: components["schemas"]["PlatformPartnerSettlementStatus"][];
			partnerIds?: string[];
			/** 정산 유형 */
			settlementTypes?: components["schemas"]["PlatformPartnerSettlementType"][];
			keyword?: components["schemas"]["PlatformPartnerSettlementFilterKeywordInput"];
		};
		PlatformPartnerSettlementFilterKeywordInput: {
			partnerSettlementId?: string;
			payoutId?: string;
			bulkPayoutId?: string;
		};
		/**
		 * 정산내역을 찾을 수 없는 경우
		 * @description <p>정산내역을 찾을 수 없는 경우</p>
		 *
		 */
		PlatformPartnerSettlementNotFoundError: {
			type: string;
			message?: string;
		};
		/**
		 * 다운로드 할 시트 컬럼
		 * @description <p>다운로드 할 시트 컬럼</p>
		 *
		 * @enum {string}
		 */
		PlatformPartnerSettlementSheetField:
			| "CONTRACT_ID"
			| "CONTRACT_NAME"
			| "MEMO"
			| "PARTNER_ACCOUNT_BANK"
			| "PARTNER_ACCOUNT_NUMBER"
			| "PARTNER_ID"
			| "PARTNER_NAME"
			| "PARTNER_SETTLEMENT_ID"
			| "SETTLEMENT_ADDITIONAL_FEE_AMOUNT"
			| "SETTLEMENT_ADDITIONAL_FEE_VAT_AMOUNT"
			| "SETTLEMENT_AMOUNT"
			| "SETTLEMENT_CURRENCY"
			| "SETTLEMENT_DATE"
			| "SETTLEMENT_DISCOUNT_AMOUNT"
			| "SETTLEMENT_DISCOUNT_SHARE_AMOUNT"
			| "SETTLEMENT_ORDER_AMOUNT"
			| "SETTLEMENT_PAYMENT_AMOUNT"
			| "SETTLEMENT_PAYMENT_VAT_AMOUNT"
			| "SETTLEMENT_PAYMENT_VAT_BURDEN_AMOUNT"
			| "SETTLEMENT_PLATFORM_FEE_AMOUNT"
			| "SETTLEMENT_PLATFORM_FEE_VAT_AMOUNT"
			| "SETTLEMENT_START_DATE_RANGE"
			| "SETTLEMENT_SUPPLY_AMOUNT"
			| "SETTLEMENT_TAX_FREE_AMOUNT"
			| "SETTLEMENT_TYPE"
			| "STATUS"
			| "TAXATION_TYPE";
		/**
		 * 정산 상태
		 * @description <p>정산 상태</p>
		 *
		 * @enum {string}
		 */
		PlatformPartnerSettlementStatus:
			| "IN_PAYOUT"
			| "PAID_OUT"
			| "PAYOUT_FAILED"
			| "PAYOUT_PREPARED"
			| "PAYOUT_WITHHELD";
		PlatformPartnerSettlementStatusStats: {
			/** Format: int64 */
			payoutPrepared: number;
			/** Format: int64 */
			payoutWithheld: number;
			/** Format: int64 */
			payoutFailed: number;
			/** Format: int64 */
			inPayout: number;
			/** Format: int64 */
			paidOut: number;
		};
		/**
		 * 정산 유형
		 * @description <p>정산 유형</p>
		 *
		 * @enum {string}
		 */
		PlatformPartnerSettlementType: "MANUAL" | "ORDER" | "ORDER_CANCEL";
		/**
		 * 플랫폼 파트너 상태
		 * @description <p>플랫폼 파트너 상태</p>
		 *
		 * @enum {string}
		 */
		PlatformPartnerStatus: "APPROVED" | "PENDING" | "REJECTED";
		/**
		 * 플랫폼 파트너 과세 유형
		 * @description <p>플랫폼 파트너 과세 유형</p>
		 *
		 * @enum {string}
		 */
		PlatformPartnerTaxationType:
			| "NORMAL"
			| "SIMPLE"
			| "SIMPLE_TAX_INVOICE_ISSUER"
			| "TAX_FREE";
		/**
		 * 파트너 유형별 추가 정보
		 * @description <p>파트너 유형별 추가 정보</p>
		 *
		 */
		PlatformPartnerType:
			| components["schemas"]["PlatformPartnerTypeBusiness"]
			| components["schemas"]["PlatformPartnerTypeWhtPayer"];
		/**
		 * 사업자 파트너 정보
		 * @description <p>사업자 파트너 정보</p>
		 *     <p>사업자 유형의 파트너 추가 정보 입니다.</p>
		 *
		 */
		PlatformPartnerTypeBusiness: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "BUSINESS";
			/** 상호명 */
			companyName: string;
			/** 과세 유형 */
			taxationType: components["schemas"]["PlatformPartnerTaxationType"];
			/** 사업자 상태 */
			businessStatus: components["schemas"]["PlatformPartnerBusinessStatus"];
			/** 사업자등록번호 */
			businessRegistrationNumber: string;
			/** 대표자 이름 */
			representativeName: string;
			/** 사업장 주소 */
			companyAddress?: string;
			/** 업태 */
			businessType?: string;
			/** 업종 */
			businessClass?: string;
		};
		/**
		 * 원천징수대상자 파트너 정보
		 * @description <p>원천징수대상자 파트너 정보</p>
		 *     <p>비사업자 유형의 파트너 추가 정보 입니다.</p>
		 *
		 */
		PlatformPartnerTypeWhtPayer: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "WHT_PAYER";
			/** 생년월일 */
			birthdate?: string;
		};
		/**
		 * 금액 부담 주체
		 * @description <p>금액 부담 주체</p>
		 *     <p>플랫폼에서 발생한 결제 수수료, 부가세 등 금액을 부담하는 주체를 나타냅니다.</p>
		 *
		 * @enum {string}
		 */
		PlatformPayer: "MERCHANT" | "PARTNER";
		/**
		 * 결제 정보
		 * @description <p>결제 정보</p>
		 *
		 */
		PlatformPayment:
			| components["schemas"]["PlatformExternalPayment"]
			| components["schemas"]["PlatformPortOnePayment"];
		/**
		 * 채널
		 * @description <p>채널</p>
		 *
		 */
		PlatformPaymentChannel: {
			/** 채널 아이디 */
			id: string;
			/** 채널 키 */
			key: string;
			/** 채널 이름 */
			name: string;
			/** PG사 가맹점 식별 아이디 */
			pgMerchantId: string;
			/** PG사 */
			pgCompany?: components["schemas"]["PgCompany"];
		};
		/**
		 * 결제 수단
		 * @description <p>결제 수단</p>
		 *
		 */
		PlatformPaymentMethod:
			| components["schemas"]["PlatformPaymentMethodCard"]
			| components["schemas"]["PlatformPaymentMethodEasyPay"]
			| components["schemas"]["PlatformPaymentMethodGiftCertificate"]
			| components["schemas"]["PlatformPaymentMethodMobile"]
			| components["schemas"]["PlatformPaymentMethodTransfer"]
			| components["schemas"]["PlatformPaymentMethodVirtualAccount"];
		/**
		 * 카드
		 * @description <p>카드</p>
		 *
		 */
		PlatformPaymentMethodCard: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "CARD";
		};
		PlatformPaymentMethodCardInput: Record<string, never>;
		/**
		 * 간편 결제
		 * @description <p>간편 결제</p>
		 *
		 */
		PlatformPaymentMethodEasyPay: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "EASY_PAY";
			/** 간편 결제사 */
			provider?: components["schemas"]["EasyPayProvider"];
			/** 간편 결제 수단 */
			methodType?: components["schemas"]["EasyPayMethodType"];
		};
		/**
		 * 간편 결제 입력 정보
		 * @description <p>간편 결제 입력 정보</p>
		 *
		 */
		PlatformPaymentMethodEasyPayInput: {
			/** 간편 결제사 */
			provider?: components["schemas"]["EasyPayProvider"];
			/** 간편 결제 수단 */
			methodType?: components["schemas"]["EasyPayMethodType"];
		};
		/**
		 * 상품권
		 * @description <p>상품권</p>
		 *
		 */
		PlatformPaymentMethodGiftCertificate: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "GIFT_CERTIFICATE";
		};
		PlatformPaymentMethodGiftCertificateInput: Record<string, never>;
		/**
		 * 결제 수단 입력 정보
		 * @description <p>결제 수단 입력 정보</p>
		 *
		 */
		PlatformPaymentMethodInput: {
			/** 카드 */
			card?: components["schemas"]["PlatformPaymentMethodCardInput"];
			/** 계좌이체 */
			transfer?: components["schemas"]["PlatformPaymentMethodTransferInput"];
			/** 가상계좌 */
			virtualAccount?: components["schemas"]["PlatformPaymentMethodVirtualAccountInput"];
			/** 상품권 */
			giftCertificate?: components["schemas"]["PlatformPaymentMethodGiftCertificateInput"];
			/** 모바일 */
			mobile?: components["schemas"]["PlatformPaymentMethodMobileInput"];
			/** 간편 결제 */
			easyPay?: components["schemas"]["PlatformPaymentMethodEasyPayInput"];
		};
		/**
		 * 모바일
		 * @description <p>모바일</p>
		 *
		 */
		PlatformPaymentMethodMobile: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "MOBILE";
		};
		PlatformPaymentMethodMobileInput: Record<string, never>;
		/**
		 * 계좌이체
		 * @description <p>계좌이체</p>
		 *
		 */
		PlatformPaymentMethodTransfer: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "TRANSFER";
		};
		PlatformPaymentMethodTransferInput: Record<string, never>;
		/**
		 * 가상계좌
		 * @description <p>가상계좌</p>
		 *
		 */
		PlatformPaymentMethodVirtualAccount: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "VIRTUAL_ACCOUNT";
		};
		PlatformPaymentMethodVirtualAccountInput: Record<string, never>;
		PlatformPaymentNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_PAYMENT_NOT_FOUND";
			message?: string;
		};
		PlatformPayout: {
			id: string;
			graphqlId: string;
			method: components["schemas"]["PlatformPayoutMethod"];
			status: components["schemas"]["PlatformPayoutStatus"];
			/** Format: date-time */
			statusUpdatedAt: string;
			memo?: string;
			partner: components["schemas"]["PlatformPartner"];
			account: components["schemas"]["PlatformPayoutAccount"];
			currency: components["schemas"]["Currency"];
			/** Format: int64 */
			amount: number;
			withdrawalMemo?: string;
			depositMemo?: string;
			/** Format: date-time */
			createdAt: string;
		};
		PlatformPayoutAccount: {
			bank: components["schemas"]["Bank"];
			number: string;
			holder: string;
		};
		PlatformPayoutFilterInput: {
			statuses?: components["schemas"]["PlatformPayoutStatus"][];
			partnerIds?: string[];
			criteria: components["schemas"]["PlatformPayoutFilterInputCriteria"];
			/** 은행 */
			payoutAccountBanks?: components["schemas"]["Bank"][];
			partnerTags?: string[];
			/** 통화 단위 */
			payoutCurrencies?: components["schemas"]["Currency"][];
		};
		/**
		 * 검색 기준 입력 정보
		 * @description <p>검색 기준 입력 정보</p>
		 *
		 */
		PlatformPayoutFilterInputCriteria: {
			timestampRange?: components["schemas"]["DateTimeRange"];
			payoutId?: string;
			bulkPayoutId?: string;
		};
		/** @enum {string} */
		PlatformPayoutMethod: "AGENCY" | "DIRECT";
		PlatformPayoutNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_PAYOUT_NOT_FOUND";
			message?: string;
		};
		/** @enum {string} */
		PlatformPayoutStatus:
			| "CANCELLED"
			| "FAILED"
			| "PREPARED"
			| "PROCESSING"
			| "STOPPED"
			| "SUCCEEDED";
		PlatformPayoutStatusStats: {
			/** Format: int64 */
			prepared: number;
			/** Format: int64 */
			cancelled: number;
			/** Format: int64 */
			stopped: number;
			/** Format: int64 */
			processing: number;
			/** Format: int64 */
			succeeded: number;
			/** Format: int64 */
			failed: number;
		};
		/**
		 * 다운로드 할 시트 컬럼
		 * @description <p>다운로드 할 시트 컬럼</p>
		 *
		 * @enum {string}
		 */
		PlatformPayoutsSheetField:
			| "ACCOUNT_BANK"
			| "ACCOUNT_HOLDER"
			| "ACCOUNT_NUMBER"
			| "AMOUNT"
			| "CREATED_AT"
			| "CURRENCY"
			| "DEPOSIT_MEMO"
			| "MEMO"
			| "METHOD"
			| "PARTNER_ID"
			| "PARTNER_NAME"
			| "PAYOUT_ID"
			| "STATUS"
			| "STATUS_UPDATED_AT"
			| "WITHDRAWAL_MEMO";
		/**
		 * 포트원 결제 정보
		 * @description <p>포트원 결제 정보</p>
		 *
		 */
		PlatformPortOnePayment: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PORT_ONE";
			/** 결제 아이디 */
			id: string;
			/** 상점 아이디 */
			storeId: string;
			/** 채널 키 */
			channelKey: string;
			/** 주문 명 */
			orderName: string;
			/** 결제 수단 */
			method?: components["schemas"]["PlatformPaymentMethod"];
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/**
			 * 결제 일시
			 * Format: date-time
			 */
			paidAt: string;
		};
		/**
		 * 금액 타입
		 * @description <p>금액 타입</p>
		 *
		 * @enum {string}
		 */
		PlatformPortOnePaymentCancelAmountType: "SUPPLY_WITH_VAT" | "TAX_FREE";
		PlatformProductIdDuplicatedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_PRODUCT_ID_DUPLICATED";
			id: string;
			message?: string;
		};
		PlatformProductIdNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_PRODUCT_ID_NOT_FOUND";
			id: string;
			message?: string;
		};
		/**
		 * 금액에 대한 소수점 처리 방식
		 * @description <p>금액에 대한 소수점 처리 방식</p>
		 *
		 * @enum {string}
		 */
		PlatformRoundType: "DOWN" | "OFF" | "UP";
		/**
		 * 정산 취소 요청 금액이 포트원 결제 취소 내역의 취소 금액을 초과한 경우
		 * @description <p>정산 취소 요청 금액이 포트원 결제 취소 내역의 취소 금액을 초과한 경우</p>
		 *
		 */
		PlatformSettlementCancelAmountExceededPortOneCancelError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_SETTLEMENT_CANCEL_AMOUNT_EXCEEDED_PORT_ONE_CANCEL";
			/** Format: int64 */
			registeredSettlementCancelAmount: number;
			/** Format: int64 */
			requestSettlementCancelAmount: number;
			/** Format: int64 */
			portOneCancelAmount: number;
			amountType: components["schemas"]["PlatformPortOnePaymentCancelAmountType"];
			message?: string;
		};
		/**
		 * 정산 주기
		 * @description <p>정산 주기</p>
		 *     <p>지체일, 정산일, 기준일로 구성되며, 해당 요소들의 조합으로 실제 정산일을 계산합니다.</p>
		 *
		 */
		PlatformSettlementCycle: {
			/**
			 * 지체일 (d+n 의 n)
			 * Format: int32
			 * @description <p>정산시작일(통상 주문완료일)로부터 더해진 다음 날짜로부터 가장 가까운 날에 정산이 됩니다. 최소 1 에서 최대 10 까지 지정할 수 있습니다.</p>
			 *
			 */
			lagDays: number;
			/** 기준일로, 정산일 계산 시 공휴일을 고려하기 위한 정보입니다. */
			datePolicy: components["schemas"]["PlatformSettlementCycleDatePolicy"];
			/** 정산 주기 계산 방식 */
			method: components["schemas"]["PlatformSettlementCycleMethod"];
		};
		/**
		 * 플랫폼 정산 기준일
		 * @description <p>플랫폼 정산 기준일</p>
		 *
		 * @enum {string}
		 */
		PlatformSettlementCycleDatePolicy:
			| "CALENDAR_DAY"
			| "HOLIDAY_AFTER"
			| "HOLIDAY_BEFORE";
		/**
		 * 플랫폼 정산 주기 입력 정보
		 * @description <p>플랫폼 정산 주기 입력 정보</p>
		 *
		 */
		PlatformSettlementCycleInput: {
			/**
			 * 지체일 (d+n 의 n)
			 * Format: int32
			 * @description <p>정산시작일(통상 주문완료일)로부터 더해진 다음 날짜로부터 가장 가까운 날에 정산이 됩니다. 최소 1 에서 최대 10 까지 지정할 수 있습니다.</p>
			 *
			 */
			lagDays: number;
			/** 기준일로, 정산일 계산 시 공휴일을 고려하기 위한 정보입니다. */
			datePolicy: components["schemas"]["PlatformSettlementCycleDatePolicy"];
			/** 정산 주기 계산 방식 */
			method: components["schemas"]["PlatformSettlementCycleMethodInput"];
		};
		/**
		 * 플랫폼 정산 주기 계산 방식
		 * @description <p>플랫폼 정산 주기 계산 방식</p>
		 *
		 */
		PlatformSettlementCycleMethod:
			| components["schemas"]["PlatformSettlementCycleMethodDaily"]
			| components["schemas"]["PlatformSettlementCycleMethodManualDates"]
			| components["schemas"]["PlatformSettlementCycleMethodMonthly"]
			| components["schemas"]["PlatformSettlementCycleMethodWeekly"];
		/**
		 * 매일 정산
		 * @description <p>매일 정산</p>
		 *
		 */
		PlatformSettlementCycleMethodDaily: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "DAILY";
		};
		PlatformSettlementCycleMethodDailyInput: Record<string, never>;
		/**
		 * 플랫폼 정산 주기 계산 방식 입력 정보
		 * @description <p>플랫폼 정산 주기 계산 방식 입력 정보</p>
		 *     <p>하나의 하위 필드에만 값을 명시하여 요청합니다.</p>
		 *
		 */
		PlatformSettlementCycleMethodInput: {
			/** 매일 정산 */
			daily?: components["schemas"]["PlatformSettlementCycleMethodDailyInput"];
			/** 매주 정해진 요일에 정산 */
			weekly?: components["schemas"]["PlatformSettlementCycleMethodWeeklyInput"];
			/** 매월 정해진 날(일)에 정산 */
			monthly?: components["schemas"]["PlatformSettlementCycleMethodMonthlyInput"];
			/** 정해진 날짜(월, 일)에 정산 */
			manualDates?: components["schemas"]["PlatformSettlementCycleMethodManualDatesInput"];
		};
		/**
		 * 정해진 날짜(월, 일)에 정산
		 * @description <p>정해진 날짜(월, 일)에 정산</p>
		 *
		 */
		PlatformSettlementCycleMethodManualDates: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "MANUAL_DATES";
			/** 월 및 일자 정보 */
			dates: components["schemas"]["MonthDay"][];
		};
		PlatformSettlementCycleMethodManualDatesInput: {
			/** 월 및 일자 정보 */
			dates: components["schemas"]["MonthDay"][];
		};
		/**
		 * 매월 정해진 날(일)에 정산
		 * @description <p>매월 정해진 날(일)에 정산</p>
		 *
		 */
		PlatformSettlementCycleMethodMonthly: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "MONTHLY";
			daysOfMonth: number[];
		};
		PlatformSettlementCycleMethodMonthlyInput: {
			daysOfMonth: number[];
		};
		/**
		 * 매주 정해진 요일에 정산
		 * @description <p>매주 정해진 요일에 정산</p>
		 *
		 */
		PlatformSettlementCycleMethodWeekly: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "WEEKLY";
			/** 요일 */
			daysOfWeek: components["schemas"]["DayOfWeek"][];
		};
		PlatformSettlementCycleMethodWeeklyInput: {
			/** 요일 */
			daysOfWeek: components["schemas"]["DayOfWeek"][];
		};
		/**
		 * 플랫폼 정산 주기 계산 방식
		 * @description <p>플랫폼 정산 주기 계산 방식</p>
		 *
		 * @enum {string}
		 */
		PlatformSettlementCycleType:
			| "DAILY"
			| "MANUAL_DATES"
			| "MONTHLY"
			| "WEEKLY";
		/**
		 * 플랫폼 내 발생하는 여러 수수료 및 할인 분담에 관한 계산식 정보
		 * @description <p>플랫폼 내 발생하는 여러 수수료 및 할인 분담에 관한 계산식 정보</p>
		 *
		 */
		PlatformSettlementFormula: {
			/** 플랫폼 수수료 계산식 */
			platformFee: string;
			/** 할인 분담액 계산식 */
			discountShare: string;
			/** 추가 수수료 계산식 */
			additionalFee: string;
		};
		PlatformSettlementFormulaError:
			| components["schemas"]["PlatformSettlementFormulaInvalidFunction"]
			| components["schemas"]["PlatformSettlementFormulaInvalidOperator"]
			| components["schemas"]["PlatformSettlementFormulaInvalidSyntax"]
			| components["schemas"]["PlatformSettlementFormulaInvalidVariable"]
			| components["schemas"]["PlatformSettlementFormulaUnexpectedFunctionArguments"]
			| components["schemas"]["PlatformSettlementFormulaUnknownError"]
			| components["schemas"]["PlatformSettlementFormulaUnsupportedVariable"];
		PlatformSettlementFormulaInvalidFunction: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "INVALID_FUNCTION";
			name: string;
			position: components["schemas"]["PlatformSettlementFormulaPosition"];
		};
		PlatformSettlementFormulaInvalidOperator: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "INVALID_OPERATOR";
			operator: string;
			position: components["schemas"]["PlatformSettlementFormulaPosition"];
		};
		PlatformSettlementFormulaInvalidSyntax: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "INVALID_SYNTAX";
			syntax: string;
			position: components["schemas"]["PlatformSettlementFormulaPosition"];
		};
		PlatformSettlementFormulaInvalidVariable: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "INVALID_VARIABLE";
			name: string;
			position: components["schemas"]["PlatformSettlementFormulaPosition"];
		};
		PlatformSettlementFormulaPosition: {
			/** Format: int32 */
			startLine: number;
			/** Format: int32 */
			startIndex: number;
			/** Format: int32 */
			endLine: number;
			/** Format: int32 */
			endIndex: number;
		};
		PlatformSettlementFormulaUnexpectedFunctionArguments: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "UNEXPECTED_FUNCTION_ARGUMENTS";
			functionName: string;
			/** Format: int32 */
			expectedCount: number;
			/** Format: int32 */
			currentCount: number;
			position: components["schemas"]["PlatformSettlementFormulaPosition"];
		};
		PlatformSettlementFormulaUnknownError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "UNKNOWN_ERROR";
		};
		PlatformSettlementFormulaUnsupportedVariable: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "UNSUPPORTED_VARIABLE";
			name: string;
			position: components["schemas"]["PlatformSettlementFormulaPosition"];
		};
		/**
		 * 플랫폼 정산 파라미터 값
		 * @description <p>플랫폼 정산 파라미터 값</p>
		 *
		 */
		PlatformSettlementParameterValue: {
			/**
			 * 크기가 조정되지 않은 숫자
			 * Format: int64
			 */
			decimal: number;
			/**
			 * 소수 자리수
			 * Format: int32
			 * @description <p>정산 시 필요한 <code>decimalScale</code>이 지정되지 않은 경우 기본값으로 0을 사용합니다.
			 *     입력 가능한 법위는 0 ~ 5 입니다.</p>
			 *
			 */
			decimalScale?: number;
		};
		/**
		 * 정산 요청 결제 금액이 포트원 결제 내역의 결제 금액을 초과한 경우
		 * @description <p>정산 요청 결제 금액이 포트원 결제 내역의 결제 금액을 초과한 경우</p>
		 *
		 */
		PlatformSettlementPaymentAmountExceededPortOnePaymentError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_SETTLEMENT_PAYMENT_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT";
			/** Format: int64 */
			registeredSettlementPaymentAmount: number;
			/** Format: int64 */
			requestSettlementPaymentAmount: number;
			/** Format: int64 */
			portOnePaymentAmount: number;
			message?: string;
		};
		/**
		 * 플랫폼 정산건 처리 방식에 관한 규칙
		 * @description <p>플랫폼 정산건 처리 방식에 관한 규칙</p>
		 *
		 */
		PlatformSettlementRule: {
			/** paymentId, storeId, partnerId가 같은 주문 정산건에 대한 중복 정산 지원 여부 */
			supportsMultipleOrderTransfersPerPartner: boolean;
			/** 정산일이 정산시작일보다 작거나 같을 경우 공휴일 후 영업일로 정산일 다시 계산 여부 */
			adjustSettlementDateAfterHolidayIfEarlier: boolean;
		};
		/**
		 * 정산 요청 공급대가가 포트원 결제 내역의 공급대가를 초과한 경우
		 * @description <p>정산 요청 공급대가가 포트원 결제 내역의 공급대가를 초과한 경우</p>
		 *
		 */
		PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_SETTLEMENT_SUPPLY_WITH_VAT_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT";
			/** Format: int64 */
			registeredSettlementSupplyWithVatAmount: number;
			/** Format: int64 */
			requestSettlementSupplyWithVatAmount: number;
			/** Format: int64 */
			portOneSupplyWithVatAmount: number;
			message?: string;
		};
		/**
		 * 정산 요청 면세 금액이 포트원 결제 내역의 면세 금액을 초과한 경우
		 * @description <p>정산 요청 면세 금액이 포트원 결제 내역의 면세 금액을 초과한 경우</p>
		 *
		 */
		PlatformSettlementTaxFreeAmountExceededPortOnePaymentError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_SETTLEMENT_TAX_FREE_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT";
			/** Format: int64 */
			registeredSettlementTaxFreeAmount: number;
			/** Format: int64 */
			requestSettlementTaxFreeAmount: number;
			/** Format: int64 */
			portOneTaxFreeAmount: number;
			message?: string;
		};
		/**
		 * 면세 금액이 결제금액을 초과한 경우
		 * @description <p>면세 금액이 결제금액을 초과한 경우</p>
		 *
		 */
		PlatformTaxFreeAmountOverFlowError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_TAX_FREE_AMOUNT_OVER_FLOW";
			message?: string;
		};
		/**
		 * 정산건
		 * @description <p>정산건</p>
		 *     <p>정산건은 파트너에 정산해줄 정산 금액과 정산 방식 등이 포함되어 있는 정산 정보입니다.
		 *     정산 방식은은 주문 정산, 주문 취소 정산, 수기 정산이 있습니다.</p>
		 *
		 */
		PlatformTransfer:
			| components["schemas"]["PlatformManualTransfer"]
			| components["schemas"]["PlatformOrderCancelTransfer"]
			| components["schemas"]["PlatformOrderTransfer"];
		PlatformTransferAlreadyExistsError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_TRANSFER_ALREADY_EXISTS";
			transferId: string;
			transferGraphqlId: string;
			message?: string;
		};
		PlatformTransferDashboard: {
			/** Format: int64 */
			totalSettlementAmount: number;
			/** Format: int64 */
			totalSettlementFeeAmount: number;
			/** Format: int64 */
			totalOrderAmount: number;
			settlementStartDateRange?: components["schemas"]["DateRange"];
		};
		PlatformTransferDiscountSharePolicyNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_TRANSFER_DISCOUNT_SHARE_POLICY_NOT_FOUND";
			discountSharePolicyId: string;
			discountSharePolicyGraphqlId: string;
			productId?: string;
			message?: string;
		};
		/**
		 * 정산건 필터 입력 정보
		 * @description <p>정산건 필터 입력 정보</p>
		 *     <p>정산 시작일 범위와 정산 일 범위는 둘 중 하나만 입력 가능합니다.</p>
		 *
		 */
		PlatformTransferFilterInput: {
			/** 정산 시작일 범위 */
			settlementStartDateRange?: components["schemas"]["DateRange"];
			/** 정산 일 범위 */
			settlementDateRange?: components["schemas"]["DateRange"];
			/**
			 * 파트너 태그 리스트
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 태그를 하나 이상 가지는 파트너에 대한 정산건만 조회합니다.</p>
			 *
			 */
			partnerTags?: string[];
			/**
			 * 계약 아이디 리스트
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 계약 아이디를 가지는 정산건만 조회합니다.</p>
			 *
			 */
			contractIds?: string[];
			/**
			 * 할인 분담 정책 아이디 리스트
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 할인 분담 정책 아이디를 하나 이상 가지는 정산건만 조회합니다.</p>
			 *
			 */
			discountSharePolicyIds?: string[];
			/**
			 * 추가 수수료 정책 아이디 리스트
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 추가 수수료 아이디를 하나 이상 가지는 정산건만 조회합니다.</p>
			 *
			 */
			additionalFeePolicyIds?: string[];
			/**
			 * 결제 수단 리스트
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 결제 수단을 가지는 파트너만 조회합니다.</p>
			 *
			 */
			paymentMethodTypes?: components["schemas"]["PaymentMethodType"][];
			/**
			 * 채널 키 리스트
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 채널 키를 가지는 정산건만 조회합니다.</p>
			 *
			 */
			channelKeys?: string[];
			/**
			 * 정산 방식 리스트
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 방식의 정산건만 조회합니다.</p>
			 *
			 */
			types?: components["schemas"]["PlatformTransferType"][];
			/**
			 * 정산 상태 리스트
			 * @description <p>하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 상태인 정산건만 조회합니다.</p>
			 *
			 */
			statuses?: components["schemas"]["PlatformTransferStatus"][];
			/** 검색 키워드 */
			keyword?: components["schemas"]["PlatformTransferFilterInputKeyword"];
			/** 테스트 모드 여부 */
			isForTest?: boolean;
		};
		/**
		 * 정산건 검색 키워드 입력 정보
		 * @description <p>정산건 검색 키워드 입력 정보</p>
		 *     <p>검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 정산건만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.</p>
		 *
		 */
		PlatformTransferFilterInputKeyword: {
			/** @description <p>해당 값이 포함된 정보를 가진 정산건만 조회합니다.</p>
			 *      */
			all?: string;
			/** @description <p>해당 값이랑 일치하는 paymentId 를 가진 정산건만 조회합니다.</p>
			 *      */
			paymentId?: string;
			/** @description <p>해당 값이랑 일치하는 transferId 를 가진 정산건만 조회합니다.</p>
			 *      */
			transferId?: string;
			/** @description <p>해당 값이 포함된 transferMemo 를 가진 정산건만 조회합니다.</p>
			 *      */
			transferMemo?: string;
			/** @description <p>해당 값이랑 일치하는 productId 를 가진 정산건만 조회합니다.</p>
			 *      */
			productId?: string;
			/** @description <p>해당 값이랑 일치하는 productName 을 가진 정산건만 조회합니다.</p>
			 *      */
			productName?: string;
			/** @description <p>해당 값이랑 일치하는 partnerId 를 가진 정산건만 조회합니다.</p>
			 *      */
			partnerId?: string;
			/** @description <p>해당 값이 포함된 partnerName 을 가진 정산건만 조회합니다.</p>
			 *      */
			partnerName?: string;
			/** @description <p>해당 값이 포함된 partnerMemo 를 가진 정산건만 조회합니다.</p>
			 *      */
			partnerMemo?: string;
		};
		PlatformTransferFilterOptions: {
			partnerTags: string[];
			contractIds: string[];
			additionalFeePolicyIds: string[];
			discountSharePolicyIds: string[];
			/** 채널 */
			paymentChannels: components["schemas"]["PlatformPaymentChannel"][];
		};
		PlatformTransferNonDeletableStatusError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_TRANSFER_NON_DELETABLE_STATUS";
			message?: string;
		};
		PlatformTransferNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_TRANSFER_NOT_FOUND";
			message?: string;
		};
		/**
		 * 다운로드 할 시트 컬럼
		 * @description <p>다운로드 할 시트 컬럼</p>
		 *
		 * @enum {string}
		 */
		PlatformTransferSheetField:
			| "ORDER_NAME"
			| "PARTNER_NAME"
			| "PAYMENT_ID"
			| "PAYMENT_METHOD"
			| "SETTLEMENT_ADDITIONAL_FEE_AMOUNT"
			| "SETTLEMENT_ADDITIONAL_FEE_VAT_AMOUNT"
			| "SETTLEMENT_AMOUNT"
			| "SETTLEMENT_CURRENCY"
			| "SETTLEMENT_DATE"
			| "SETTLEMENT_DISCOUNT_AMOUNT"
			| "SETTLEMENT_DISCOUNT_SHARE_AMOUNT"
			| "SETTLEMENT_ORDER_AMOUNT"
			| "SETTLEMENT_PAYMENT_AMOUNT"
			| "SETTLEMENT_PAYMENT_VAT_AMOUNT"
			| "SETTLEMENT_PAYMENT_VAT_BURDEN_AMOUNT"
			| "SETTLEMENT_PLATFORM_FEE_AMOUNT"
			| "SETTLEMENT_PLATFORM_FEE_VAT_AMOUNT"
			| "SETTLEMENT_START_DATE"
			| "SETTLEMENT_SUPPLY_AMOUNT"
			| "SETTLEMENT_TAX_FREE_AMOUNT"
			| "STATUS"
			| "TRANSFER_ID"
			| "TYPE";
		/**
		 * 정산 상태
		 * @description <p>정산 상태</p>
		 *
		 * @enum {string}
		 */
		PlatformTransferStatus:
			| "IN_PAYOUT"
			| "IN_PROCESS"
			| "PAID_OUT"
			| "SCHEDULED"
			| "SETTLED";
		PlatformTransferSummary:
			| components["schemas"]["PlatformManualTransferSummary"]
			| components["schemas"]["PlatformOrderCancelTransferSummary"]
			| components["schemas"]["PlatformOrderTransferSummary"];
		PlatformTransferSummaryExternalPayment: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "EXTERNAL";
			id: string;
			orderName?: string;
			currency: components["schemas"]["Currency"];
			methodType?: components["schemas"]["PaymentMethodType"];
		};
		PlatformTransferSummaryPartner: {
			id: string;
			graphqlId: string;
			name: string;
		};
		PlatformTransferSummaryPayment:
			| components["schemas"]["PlatformTransferSummaryExternalPayment"]
			| components["schemas"]["PlatformTransferSummaryPortOnePayment"];
		PlatformTransferSummaryPortOnePayment: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PORT_ONE";
			id: string;
			orderName: string;
			currency: components["schemas"]["Currency"];
			methodType?: components["schemas"]["PaymentMethodType"];
		};
		/** @enum {string} */
		PlatformTransferType: "MANUAL" | "ORDER" | "ORDER_CANCEL";
		/**
		 * 사용할 수 없는 정산일이 요청된 경우
		 * @description <p>사용할 수 없는 정산일이 요청된 경우</p>
		 *     <p>요청한 정산일에 이체되지 않은 주문 정산 건이 없을 때 발생합니다.</p>
		 *
		 */
		PlatformUnavailableSettlementDateError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "PLATFORM_UNAVAILABLE_SETTLEMENT_DATE";
			/** @description <p>날짜를 나타내는 문자열로, <code>yyyy-MM-dd</code> 형식을 따릅니다.</p>
			 *      */
			settlementDate: string;
			message?: string;
		};
		/**
		 * 포트원 버전
		 * @description <p>포트원 버전</p>
		 *
		 * @enum {string}
		 */
		PortOneVersion: "V1" | "V2";
		/**
		 * 결제 정보 사전 등록 입력 정보
		 * @description <p>결제 정보 사전 등록 입력 정보</p>
		 *
		 */
		PreRegisterPaymentBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/**
			 * 결제 총 금액
			 * Format: int64
			 */
			totalAmount?: number;
			/**
			 * 결제 면세 금액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/** 통화 단위 */
			currency?: components["schemas"]["Currency"];
		};
		PreRegisterPaymentError:
			| components["schemas"]["AlreadyPaidError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 결제 사전 등록 성공 응답
		 * @description <p>결제 사전 등록 성공 응답</p>
		 *
		 */
		PreRegisterPaymentResponse: Record<string, never>;
		/**
		 * 준비 상태의 본인인증 내역
		 * @description <p>준비 상태의 본인인증 내역</p>
		 *
		 */
		ReadyIdentityVerification: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "READY";
			/** 본인인증 내역 아이디 */
			id: string;
			/** 사용된 본인인증 채널 */
			channel?: components["schemas"]["SelectedChannel"];
			/** 요청 시 고객 정보 */
			requestedCustomer: components["schemas"]["IdentityVerificationRequestedCustomer"];
			/** 사용자 지정 데이터 */
			customData?: string;
			/**
			 * 본인인증 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
			/**
			 * 업데이트 시점
			 * Format: date-time
			 */
			updatedAt: string;
			/**
			 * 상태 업데이트 시점
			 * Format: date-time
			 */
			statusChangedAt: string;
		};
		/**
		 * 준비 상태의 결제 건
		 * @description <p>준비 상태의 결제 건</p>
		 *
		 */
		ReadyPayment: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "READY";
			/** 결제 건 아이디 */
			id: string;
			/**
			 * 결제 건 포트원 채번 아이디
			 * @description <p>V1 결제 건의 경우 imp_uid에 해당합니다.</p>
			 *
			 */
			transactionId: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제수단 정보 */
			method?: components["schemas"]["PaymentMethod"];
			/** 결제 채널 */
			channel?: components["schemas"]["SelectedChannel"];
			/** 결제 채널 그룹 정보 */
			channelGroup?: components["schemas"]["ChannelGroupSummary"];
			/** 포트원 버전 */
			version: components["schemas"]["PortOneVersion"];
			/**
			 * 결제 예약 건 아이디
			 * @description <p>결제 예약을 이용한 경우에만 존재</p>
			 *
			 */
			scheduleId?: string;
			/**
			 * 결제 시 사용된 빌링키
			 * @description <p>빌링키 결제인 경우에만 존재</p>
			 *
			 */
			billingKey?: string;
			/** 웹훅 발송 내역 */
			webhooks?: components["schemas"]["PaymentWebhook"][];
			/**
			 * 결제 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
			/**
			 * 업데이트 시점
			 * Format: date-time
			 */
			updatedAt: string;
			/**
			 * 상태 업데이트 시점
			 * Format: date-time
			 */
			statusChangedAt: string;
			/** 주문명 */
			orderName: string;
			/** 결제 금액 관련 세부 정보 */
			amount: components["schemas"]["PaymentAmount"];
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 구매자 정보 */
			customer: components["schemas"]["Customer"];
			/** 프로모션 아이디 */
			promotionId?: string;
			/** 문화비 지출 여부 */
			isCulturalExpense?: boolean;
			/**
			 * 에스크로 결제의 배송 정보
			 * @description <p>에스크로 결제인 경우 존재합니다.</p>
			 *
			 */
			escrow?: components["schemas"]["PaymentEscrow"];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 상품 갯수
			 * Format: int32
			 */
			productCount?: number;
			/** 사용자 지정 데이터 */
			customData?: string;
			/** 국가 코드 */
			country?: components["schemas"]["Country"];
		};
		RecoverPlatformAdditionalFeePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAdditionalFeePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 추가 수수료 정책 복원 성공 응답
		 * @description <p>추가 수수료 정책 복원 성공 응답</p>
		 *
		 */
		RecoverPlatformAdditionalFeePolicyResponse: {
			/** 복원된 추가 수수료 정책 */
			additionalFeePolicy: components["schemas"]["PlatformAdditionalFeePolicy"];
		};
		RecoverPlatformContractError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 계약 복원 성공 응답
		 * @description <p>계약 복원 성공 응답</p>
		 *
		 */
		RecoverPlatformContractResponse: {
			/** 복원된 계약 */
			contract: components["schemas"]["PlatformContract"];
		};
		RecoverPlatformDiscountSharePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformDiscountSharePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 할인 분담 복원 성공 응답
		 * @description <p>할인 분담 복원 성공 응답</p>
		 *
		 */
		RecoverPlatformDiscountSharePolicyResponse: {
			/** 복원된 할인 분담 */
			discountSharePolicy: components["schemas"]["PlatformDiscountSharePolicy"];
		};
		RecoverPlatformPartnerError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 파트너 복원 성공 응답
		 * @description <p>파트너 복원 성공 응답</p>
		 *
		 */
		RecoverPlatformPartnerResponse: {
			/** 복원된 파트너 */
			partner: components["schemas"]["PlatformPartner"];
		};
		/**
		 * 토큰 재발급을 위한 입력 정보
		 * @description <p>토큰 재발급을 위한 입력 정보</p>
		 *
		 */
		RefreshTokenBody: {
			/** 리프레시 토큰 */
			refreshToken: string;
		};
		RefreshTokenError:
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 토큰 재발급 성공 응답
		 * @description <p>토큰 재발급 성공 응답</p>
		 *
		 */
		RefreshTokenResponse: {
			/**
			 * 인증에 사용하는 엑세스 토큰
			 * @description <p>하루의 유효기간을 가지고 있습니다.</p>
			 *
			 */
			accessToken: string;
			/**
			 * 토큰 재발급 및 유효기간 연장을 위해 사용하는 리프레시 토큰
			 * @description <p>일주일의 유효기간을 가지고 있으며, 리프레시 토큰을 통해 유효기간이 연장된 새로운 엑세스 토큰을 발급받을 수 있습니다.</p>
			 *
			 */
			refreshToken: string;
		};
		/**
		 * 세금계산서 역발행 요청 거부 정보
		 * @description <p>세금계산서 역발행 요청 거부 정보</p>
		 *
		 */
		RefuseB2bTaxInvoiceRequestBody: {
			/** 사업자등록번호 */
			brn: string;
			/** 세금계산서 문서 번호 */
			documentKey: string;
			/**
			 * 문서 번호 유형
			 * @description <p>기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
			 *
			 */
			documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
			/** 메모 */
			memo?: string;
		};
		RefuseB2bTaxInvoiceRequestError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNoSupplierDocumentKeyError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["B2bTaxInvoiceNotRequestedStatusError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 사업자 연동 요청 정보
		 * @description <p>사업자 연동 요청 정보</p>
		 *
		 */
		RegisterB2bMemberCompanyBody: {
			/** 사업자 정보 */
			company: components["schemas"]["B2bMemberCompany"];
			/** 담당자 정보 */
			contact: components["schemas"]["B2bCompanyContactInput"];
		};
		RegisterB2bMemberCompanyError:
			| components["schemas"]["B2bCompanyAlreadyRegisteredError"]
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bIdAlreadyExistsError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 사업자 연동 응답 정보
		 * @description <p>사업자 연동 응답 정보</p>
		 *
		 */
		RegisterB2bMemberCompanyResponse: {
			/** 사업자 정보 */
			company: components["schemas"]["B2bMemberCompany"];
			/** 담당자 정보 */
			contact: components["schemas"]["B2bCompanyContact"];
		};
		/**
		 * 에스크로 배송 정보 등록 입력 정보
		 * @description <p>에스크로 배송 정보 등록 입력 정보</p>
		 *
		 */
		RegisterEscrowLogisticsBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/** 에스크로 발송자 정보 */
			sender?: components["schemas"]["PaymentEscrowSenderInput"];
			/** 에스크로 수취인 정보 */
			receiver?: components["schemas"]["PaymentEscrowReceiverInput"];
			/** 에스크로 물류 정보 */
			logistics: components["schemas"]["PaymentLogistics"];
			/**
			 * 이메일 알림 전송 여부
			 * @description <p>에스크로 구매 확정 시 이메일로 알림을 보낼지 여부입니다.</p>
			 *
			 */
			sendEmail?: boolean;
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
		};
		/**
		 * 영수증 내 하위 상점 거래 등록 정보
		 * @description <p>영수증 내 하위 상점 거래 등록 정보</p>
		 *
		 */
		RegisterStoreReceiptBody: {
			/** 하위 상점 거래 목록 */
			items: components["schemas"]["RegisterStoreReceiptBodyItem"][];
			/** 상점 아이디 */
			storeId?: string;
		};
		/**
		 * 하위 상점 거래 정보
		 * @description <p>하위 상점 거래 정보</p>
		 *
		 */
		RegisterStoreReceiptBodyItem: {
			/** 하위 상점 사업자등록번호 */
			storeBusinessRegistrationNumber: string;
			/** 하위 상점명 */
			storeName: string;
			/**
			 * 결제 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/**
			 * 부가세액
			 * Format: int64
			 */
			vatAmount?: number;
			/**
			 * 공급가액
			 * Format: int64
			 */
			supplyAmount?: number;
			/** 통화 */
			currency: components["schemas"]["Currency"];
		};
		RegisterStoreReceiptError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentNotFoundError"]
			| components["schemas"]["PaymentNotPaidError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 영수증 내 하위 상점 거래 등록 응답
		 * @description <p>영수증 내 하위 상점 거래 등록 응답</p>
		 *
		 */
		RegisterStoreReceiptResponse: {
			/** 결제 영수증 URL */
			receiptUrl?: string;
		};
		/**
		 * 배송 정보 등록 완료
		 * @description <p>배송 정보 등록 완료</p>
		 *
		 */
		RegisteredPaymentEscrow: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "REGISTERED";
			/** 택배사 */
			company: string;
			/** 송장번호 */
			invoiceNumber: string;
			/**
			 * 발송 일시
			 * Format: date-time
			 */
			sentAt?: string;
			/**
			 * 배송등록 처리 일자
			 * Format: date-time
			 */
			appliedAt?: string;
		};
		/**
		 * 구매 거절 확정
		 * @description <p>구매 거절 확정</p>
		 *
		 */
		RejectConfirmedPaymentEscrow: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "REJECT_CONFIRMED";
			/** 택배사 */
			company: string;
			/** 송장번호 */
			invoiceNumber: string;
			/**
			 * 발송 일시
			 * Format: date-time
			 */
			sentAt?: string;
			/**
			 * 배송등록 처리 일자
			 * Format: date-time
			 */
			appliedAt?: string;
		};
		/**
		 * 파트너 상태를 승인 거절로 변경하기 위한 입력 정보
		 * @description <p>파트너 상태를 승인 거절로 변경하기 위한 입력 정보</p>
		 *
		 */
		RejectPlatformPartnerBody: {
			/** 파트너 메모. 값이 명시되지 않은 경우 업데이트하지 않습니다. */
			memo?: string;
		};
		RejectPlatformPartnerError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformArchivedPartnerError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 파트너 거절 성공 응답
		 * @description <p>파트너 거절 성공 응답</p>
		 *
		 */
		RejectPlatformPartnerResponse: {
			/** 거절된 파트너 */
			partner: components["schemas"]["PlatformPartner"];
		};
		/**
		 * 구매 거절
		 * @description <p>구매 거절</p>
		 *
		 */
		RejectedPaymentEscrow: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "REJECTED";
			/** 택배사 */
			company: string;
			/** 송장번호 */
			invoiceNumber: string;
			/**
			 * 발송 일시
			 * Format: date-time
			 */
			sentAt?: string;
			/**
			 * 배송등록 처리 일자
			 * Format: date-time
			 */
			appliedAt?: string;
		};
		/**
		 * 세금계산서 임시 저장 정보
		 * @description <p>세금계산서 임시 저장 정보</p>
		 *
		 */
		RequestB2bTaxInvoiceRegisterBody: {
			/** 세금계산서 생성 요청 정보 */
			taxInvoice: components["schemas"]["B2bTaxInvoiceInput"];
		};
		RequestB2bTaxInvoiceRegisterError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bRecipientNotFoundError"]
			| components["schemas"]["B2bSupplierNotFoundError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 세금계산서 역발행 요청 정보
		 * @description <p>세금계산서 역발행 요청 정보</p>
		 *
		 */
		RequestB2bTaxInvoiceRequestBody: {
			/** 사업자등록번호 */
			brn: string;
			/** 세금계산서 문서 번호 */
			documentKey: string;
			/**
			 * 문서 번호 유형
			 * @description <p>기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
			 *
			 */
			documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
			/** 메모 */
			memo?: string;
		};
		RequestB2bTaxInvoiceReverseIssuanceError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bRecipientNotFoundError"]
			| components["schemas"]["B2bSupplierNotFoundError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 세금계산서 역발행 요청 정보
		 * @description <p>세금계산서 역발행 요청 정보</p>
		 *
		 */
		RequestB2bTaxInvoiceReverseIssuanceRequestBody: {
			/** 세금계산서 생성 요청 정보 */
			taxInvoice: components["schemas"]["B2bTaxInvoiceInput"];
			/** 메모 */
			memo?: string;
		};
		/**
		 * 취소 요청 상태
		 * @description <p>취소 요청 상태</p>
		 *
		 */
		RequestedPaymentCancellation: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "REQUESTED";
			/** 취소 내역 아이디 */
			id: string;
			/** PG사 결제 취소 내역 아이디 */
			pgCancellationId?: string;
			/**
			 * 취소 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 취소 금액 중 면세 금액
			 * Format: int64
			 */
			taxFreeAmount: number;
			/**
			 * 취소 금액 중 부가세액
			 * Format: int64
			 */
			vatAmount: number;
			/**
			 * 적립형 포인트의 환불 금액
			 * Format: int64
			 */
			easyPayDiscountAmount?: number;
			/** 취소 사유 */
			reason: string;
			/**
			 * 취소 시점
			 * Format: date-time
			 */
			cancelledAt?: string;
			/**
			 * 취소 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
		};
		RescheduleAdditionalFeePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAdditionalFeePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		RescheduleContractError:
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		RescheduleDiscountSharePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformDiscountSharePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		ReschedulePartnerError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 추가 수수료 정책 예약 업데이트 재설정을 위한 입력 정보
		 * @description <p>추가 수수료 정책 예약 업데이트 재설정을 위한 입력 정보</p>
		 *
		 */
		ReschedulePlatformAdditionalFeePolicyBody: {
			/** 반영할 업데이트 내용 */
			update: components["schemas"]["UpdatePlatformAdditionalFeePolicyBody"];
			/**
			 * 업데이트 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		/**
		 * 추가 수수료 정책 예약 업데이트 재설정 성공 응답
		 * @description <p>추가 수수료 정책 예약 업데이트 재설정 성공 응답</p>
		 *
		 */
		ReschedulePlatformAdditionalFeePolicyResponse: {
			/** 예약된 추가 수수료 정책 */
			scheduledAdditionalFeePolicy: components["schemas"]["PlatformAdditionalFeePolicy"];
		};
		/**
		 * 계약 예약 업데이트 재설정을 위한 입력 정보
		 * @description <p>계약 예약 업데이트 재설정을 위한 입력 정보</p>
		 *
		 */
		ReschedulePlatformContractBody: {
			/** 반영할 업데이트 내용 */
			update: components["schemas"]["UpdatePlatformContractBody"];
			/**
			 * 업데이트 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		/**
		 * 계약 예약 업데이트 재설정 성공 응답
		 * @description <p>계약 예약 업데이트 재설정 성공 응답</p>
		 *
		 */
		ReschedulePlatformContractResponse: {
			/** 예약된 계약 정보 */
			scheduledContract: components["schemas"]["PlatformContract"];
		};
		/**
		 * 할인 분담 정책 예약 업데이트 재설정을 위한 입력 정보
		 * @description <p>할인 분담 정책 예약 업데이트 재설정을 위한 입력 정보</p>
		 *
		 */
		ReschedulePlatformDiscountSharePolicyBody: {
			/** 반영할 업데이트 내용 */
			update: components["schemas"]["UpdatePlatformDiscountSharePolicyBody"];
			/**
			 * 업데이트 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		/**
		 * 할인 분담 정책 예약 업데이트 재설정 성공 응답
		 * @description <p>할인 분담 정책 예약 업데이트 재설정 성공 응답</p>
		 *
		 */
		ReschedulePlatformDiscountSharePolicyResponse: {
			/** 예약된 할인 분담 정보 */
			scheduledDiscountSharePolicy: components["schemas"]["PlatformDiscountSharePolicy"];
		};
		/**
		 * 파트너 예약 업데이트 재설정을 위한 입력 정보
		 * @description <p>파트너 예약 업데이트 재설정을 위한 입력 정보</p>
		 *
		 */
		ReschedulePlatformPartnerBody: {
			/** 반영할 업데이트 내용 */
			update: components["schemas"]["UpdatePlatformPartnerBody"];
			/**
			 * 업데이트 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		/**
		 * 파트너 예약 업데이트 재설정 성공 응답
		 * @description <p>파트너 예약 업데이트 재설정 성공 응답</p>
		 *
		 */
		ReschedulePlatformPartnerResponse: {
			/** 예약된 파트너 정보 */
			scheduledPartner: components["schemas"]["PlatformPartner"];
		};
		ResendIdentityVerificationError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["IdentityVerificationAlreadyVerifiedError"]
			| components["schemas"]["IdentityVerificationNotFoundError"]
			| components["schemas"]["IdentityVerificationNotSentError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 본인인증 요청 재전송 성공 응답
		 * @description <p>본인인증 요청 재전송 성공 응답</p>
		 *
		 */
		ResendIdentityVerificationResponse: Record<string, never>;
		/** @description <p>웹훅 재발송을 위한 입력 정보</p>
		 *      */
		ResendWebhookBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/**
			 * 웹훅 아이디
			 * @description <p>입력하지 않으면 결제 건의 가장 최근 웹훅 아이디가 기본 적용됩니다</p>
			 *
			 */
			webhookId?: string;
		};
		ResendWebhookError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentNotFoundError"]
			| components["schemas"]["UnauthorizedError"]
			| components["schemas"]["WebhookNotFoundError"];
		/**
		 * 웹훅 재발송 응답 정보
		 * @description <p>웹훅 재발송 응답 정보</p>
		 *
		 */
		ResendWebhookResponse: {
			/** 재발송 웹훅 정보 */
			webhook: components["schemas"]["PaymentWebhook"];
		};
		RevokePaymentScheduleError:
			| components["schemas"]["BillingKeyAlreadyDeletedError"]
			| components["schemas"]["BillingKeyNotFoundError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PaymentScheduleAlreadyProcessedError"]
			| components["schemas"]["PaymentScheduleAlreadyRevokedError"]
			| components["schemas"]["PaymentScheduleNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 결제 예약 건 취소 성공 응답
		 * @description <p>결제 예약 건 취소 성공 응답</p>
		 *
		 */
		RevokePaymentScheduleResponse: {
			/** 취소 완료된 결제 예약 건 아이디 목록 */
			revokedScheduleIds: string[];
			/**
			 * 결제 예약 건 취소 완료 시점
			 * Format: date-time
			 */
			revokedAt?: string;
		};
		/**
		 * 결제 예약 건 취소 요청 입력 정보
		 * @description <p>결제 예약 건 취소 요청 입력 정보</p>
		 *     <p>billingKey, scheduleIds 중 하나 이상은 필수로 입력합니다.
		 *     billingKey 만 입력된 경우 -&gt; 해당 빌링키로 예약된 모든 결제 예약 건들이 취소됩니다.
		 *     scheduleIds 만 입력된 경우 -&gt; 입력된 결제 예약 건 아이디에 해당하는 예약 건들이 취소됩니다.
		 *     billingKey, scheduleIds 모두 입력된 경우 -&gt; 입력된 결제 예약 건 아이디에 해당하는 예약 건들이 취소됩니다. 그리고 예약한 빌링키가 입력된 빌링키와 일치하는지 검증합니다.
		 *     위 정책에 따라 선택된 결제 예약 건들 중 하나라도 취소에 실패할 경우, 모든 취소 요청이 실패합니다.</p>
		 *
		 */
		RevokePaymentSchedulesBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/** 빌링키 */
			billingKey?: string;
			/** 결제 예약 건 아이디 목록 */
			scheduleIds?: string[];
		};
		/**
		 * 결제 예약 취소 상태
		 * @description <p>결제 예약 취소 상태</p>
		 *
		 */
		RevokedPaymentSchedule: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "REVOKED";
			/** 결제 예약 건 아이디 */
			id: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제 건 아이디 */
			paymentId: string;
			/** 빌링키 */
			billingKey: string;
			/** 주문명 */
			orderName: string;
			/** 문화비 지출 여부 */
			isCulturalExpense: boolean;
			/** 에스크로 결제 여부 */
			isEscrow: boolean;
			/** 고객 정보 */
			customer: components["schemas"]["Customer"];
			/** 사용자 지정 데이터 */
			customData: string;
			/**
			 * 결제 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/**
			 * 부가세
			 * Format: int64
			 */
			vatAmount?: number;
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/**
			 * 할부 개월 수
			 * Format: int32
			 */
			installmentMonth?: number;
			/** 웹훅 주소 */
			noticeUrls?: string[];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 결제 예약 등록 시점
			 * Format: date-time
			 */
			createdAt: string;
			/**
			 * 결제 예정 시점
			 * Format: date-time
			 */
			timeToPay: string;
			/**
			 * 결제 취소 시점
			 * Format: date-time
			 */
			revokedAt: string;
		};
		ScheduleAdditionalFeePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAdditionalFeePolicyNotFoundError"]
			| components["schemas"]["PlatformAdditionalFeePolicyScheduleAlreadyExistsError"]
			| components["schemas"]["PlatformArchivedAdditionalFeePolicyError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		ScheduleContractError:
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformArchivedContractError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformContractScheduleAlreadyExistsError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		ScheduleDiscountSharePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformDiscountSharePolicyNotFoundError"]
			| components["schemas"]["PlatformDiscountSharePolicyScheduleAlreadyExistsError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		SchedulePartnerError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAccountVerificationAlreadyUsedError"]
			| components["schemas"]["PlatformAccountVerificationFailedError"]
			| components["schemas"]["PlatformAccountVerificationNotFoundError"]
			| components["schemas"]["PlatformArchivedPartnerError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformInsufficientDataToChangePartnerTypeError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["PlatformPartnerScheduleAlreadyExistsError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 추가 수수료 정책 업데이트 예약을 위한 입력 정보
		 * @description <p>추가 수수료 정책 업데이트 예약을 위한 입력 정보</p>
		 *
		 */
		SchedulePlatformAdditionalFeePolicyBody: {
			/** 반영할 업데이트 내용 */
			update: components["schemas"]["UpdatePlatformAdditionalFeePolicyBody"];
			/**
			 * 업데이트 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		/**
		 * 추가 수수료 정책 업데이트 예약 성공 응답
		 * @description <p>추가 수수료 정책 업데이트 예약 성공 응답</p>
		 *
		 */
		SchedulePlatformAdditionalFeePolicyResponse: {
			/** 예약된 추가 수수료 정책 */
			scheduledAdditionalFeePolicy: components["schemas"]["PlatformAdditionalFeePolicy"];
		};
		/**
		 * 계약 업데이트 예약을 위한 입력 정보
		 * @description <p>계약 업데이트 예약을 위한 입력 정보</p>
		 *
		 */
		SchedulePlatformContractBody: {
			/** 반영할 업데이트 내용 */
			update: components["schemas"]["UpdatePlatformContractBody"];
			/**
			 * 업데이트 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		/**
		 * 계약 업데이트 예약 성공 응답
		 * @description <p>계약 업데이트 예약 성공 응답</p>
		 *
		 */
		SchedulePlatformContractResponse: {
			/** 예약된 계약 정보 */
			scheduledContract: components["schemas"]["PlatformContract"];
		};
		/**
		 * 할인 분담 정책 업데이트 예약을 위한 입력 정보
		 * @description <p>할인 분담 정책 업데이트 예약을 위한 입력 정보</p>
		 *
		 */
		SchedulePlatformDiscountSharePolicyBody: {
			/** 반영할 업데이트 내용 */
			update: components["schemas"]["UpdatePlatformDiscountSharePolicyBody"];
			/**
			 * 업데이트 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		/**
		 * 할인 분담 정책 업데이트 예약 성공 응답
		 * @description <p>할인 분담 정책 업데이트 예약 성공 응답</p>
		 *
		 */
		SchedulePlatformDiscountSharePolicyResponse: {
			/** 예약된 할인 분담 정보 */
			scheduledDiscountSharePolicy: components["schemas"]["PlatformDiscountSharePolicy"];
		};
		/**
		 * 파트너 업데이트 예약을 위한 입력 정보
		 * @description <p>파트너 업데이트 예약을 위한 입력 정보</p>
		 *
		 */
		SchedulePlatformPartnerBody: {
			/** 반영할 업데이트 내용 */
			update: components["schemas"]["UpdatePlatformPartnerBody"];
			/**
			 * 업데이트 적용 시점
			 * Format: date-time
			 */
			appliedAt: string;
		};
		/**
		 * 파트너 업데이트 예약 성공 응답
		 * @description <p>파트너 업데이트 예약 성공 응답</p>
		 *
		 */
		SchedulePlatformPartnerResponse: {
			/** 예약된 파트너 정보 */
			scheduledPartner: components["schemas"]["PlatformPartner"];
		};
		SchedulePlatformPartnersBody: {
			filter?: components["schemas"]["PlatformPartnerFilterInput"];
			update: components["schemas"]["SchedulePlatformPartnersBodyUpdate"];
			/** Format: date-time */
			appliedAt: string;
		};
		SchedulePlatformPartnersBodyUpdate: {
			name?: string;
			contact?: components["schemas"]["SchedulePlatformPartnersBodyUpdateContact"];
			type?: components["schemas"]["SchedulePlatformPartnersBodyUpdateType"];
			account?: components["schemas"]["SchedulePlatformPartnersBodyUpdateAccount"];
			defaultContractId?: string;
			memo?: string;
			tags?: string[];
		};
		/**
		 * 파트너 계좌 업데이트를 위한 입력 정보
		 * @description <p>파트너 계좌 업데이트를 위한 입력 정보</p>
		 *
		 */
		SchedulePlatformPartnersBodyUpdateAccount: {
			/** 은행 */
			bank: components["schemas"]["Bank"];
			/** 정산에 사용할 통화 */
			currency: components["schemas"]["Currency"];
			/** 계좌번호 */
			number: string;
			/** 예금주명 */
			holder: string;
			/** 계좌 검증 아이디 */
			accountVerificationId?: string;
		};
		/**
		 * 파트너 업데이트를 위한 유형별 추가 정보
		 * @description <p>파트너 업데이트를 위한 유형별 추가 정보</p>
		 *
		 */
		SchedulePlatformPartnersBodyUpdateContact: {
			/** 담당자 이름 */
			name?: string;
			/** 담당자 휴대폰 번호 */
			phoneNumber?: string;
			/** 담당자 이메일 */
			email?: string;
		};
		/**
		 * 파트너 유형별 정보 업데이트를 위한 입력 정보
		 * @description <p>파트너 유형별 정보 업데이트를 위한 입력 정보</p>
		 *     <p>파트너 유형별 추가 정보를 수정합니다.
		 *     최초 생성된 유형 내에서 세부 정보만 수정할 수 있고 파트너의 유형 자체를 수정할 수는 없습니다.</p>
		 *
		 */
		SchedulePlatformPartnersBodyUpdateType: {
			/** 사업자 추가 정보 */
			business?: components["schemas"]["SchedulePlatformPartnersBodyUpdateTypeBusiness"];
			/** 원천징수대상자 추가 정보 */
			whtPayer?: components["schemas"]["SchedulePlatformPartnersBodyUpdateTypeWhtPayer"];
		};
		SchedulePlatformPartnersBodyUpdateTypeBusiness: {
			/** 상호명 */
			companyName?: string;
			/** 사업자 유형 */
			taxationType?: components["schemas"]["PlatformPartnerTaxationType"];
			/** 사업자등록번호 */
			businessRegistrationNumber?: string;
			/** 대표자 이름 */
			representativeName?: string;
			/** 사업장 주소 */
			companyAddress?: string;
			/** 업태 */
			businessType?: string;
			/** 업종 */
			businessClass?: string;
		};
		SchedulePlatformPartnersBodyUpdateTypeWhtPayer: {
			/** 생년월일 */
			birthdate?: string;
		};
		SchedulePlatformPartnersError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformArchivedPartnersCannotBeScheduledError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerSchedulesAlreadyExistError"]
			| components["schemas"]["UnauthorizedError"];
		SchedulePlatformPartnersResponse: Record<string, never>;
		/**
		 * 결제 예약 완료 상태
		 * @description <p>결제 예약 완료 상태</p>
		 *
		 */
		ScheduledPaymentSchedule: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "SCHEDULED";
			/** 결제 예약 건 아이디 */
			id: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제 건 아이디 */
			paymentId: string;
			/** 빌링키 */
			billingKey: string;
			/** 주문명 */
			orderName: string;
			/** 문화비 지출 여부 */
			isCulturalExpense: boolean;
			/** 에스크로 결제 여부 */
			isEscrow: boolean;
			/** 고객 정보 */
			customer: components["schemas"]["Customer"];
			/** 사용자 지정 데이터 */
			customData: string;
			/**
			 * 결제 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/**
			 * 부가세
			 * Format: int64
			 */
			vatAmount?: number;
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/**
			 * 할부 개월 수
			 * Format: int32
			 */
			installmentMonth?: number;
			/** 웹훅 주소 */
			noticeUrls?: string[];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 결제 예약 등록 시점
			 * Format: date-time
			 */
			createdAt: string;
			/**
			 * 결제 예정 시점
			 * Format: date-time
			 */
			timeToPay: string;
		};
		/**
		 * (결제, 본인인증 등에) 선택된 채널 정보
		 * @description <p>(결제, 본인인증 등에) 선택된 채널 정보</p>
		 *
		 */
		SelectedChannel: {
			/** 채널 타입 */
			type: components["schemas"]["SelectedChannelType"];
			/** 채널 아이디 */
			id?: string;
			/** 채널 키 */
			key?: string;
			/** 채널 명 */
			name?: string;
			/** PG사 */
			pgProvider: components["schemas"]["PgProvider"];
			/** PG사 고객사 식별 아이디 */
			pgMerchantId: string;
		};
		/**
		 * 채널 타입
		 * @description <p>채널 타입</p>
		 *
		 * @enum {string}
		 */
		SelectedChannelType: "LIVE" | "TEST";
		/**
		 * 본인인증 요청을 위한 입력 정보
		 * @description <p>본인인증 요청을 위한 입력 정보</p>
		 *
		 */
		SendIdentityVerificationBody: {
			/**
			 * 상점 아이디
			 * @description <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
			 *
			 */
			storeId?: string;
			/** 채널 키 */
			channelKey: string;
			/** 고객 정보 */
			customer: components["schemas"]["SendIdentityVerificationBodyCustomer"];
			/** 사용자 지정 데이터 */
			customData?: string;
			/** PG사별 추가 파라미터 ("PG사별 연동 가이드" 참고) */
			bypass?: Record<string, never>;
			/** 통신사 */
			operator: components["schemas"]["IdentityVerificationOperator"];
			/** 본인인증 방식 */
			method: components["schemas"]["IdentityVerificationMethod"];
		};
		/**
		 * 본인인증 요청을 위한 고객 정보
		 * @description <p>본인인증 요청을 위한 고객 정보</p>
		 *
		 */
		SendIdentityVerificationBodyCustomer: {
			/** 식별 아이디 */
			id?: string;
			/** 이름 */
			name: string;
			/**
			 * 전화번호
			 * @description <p>특수 문자(-) 없이 숫자만 입력합니다.</p>
			 *
			 */
			phoneNumber: string;
			/**
			 * 주민등록번호 앞 7자리
			 * @description <p>SMS 방식의 경우 필수로 입력합니다.</p>
			 *
			 */
			identityNumber?: string;
			/**
			 * IP 주소
			 * @description <p>고객의 요청 속도 제한에 사용됩니다.</p>
			 *
			 */
			ipAddress: string;
		};
		SendIdentityVerificationError:
			| components["schemas"]["ChannelNotFoundError"]
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["IdentityVerificationAlreadySentError"]
			| components["schemas"]["IdentityVerificationAlreadyVerifiedError"]
			| components["schemas"]["IdentityVerificationNotFoundError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PgProviderError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 본인인증 요청 전송 성공 응답
		 * @description <p>본인인증 요청 전송 성공 응답</p>
		 *
		 */
		SendIdentityVerificationResponse: Record<string, never>;
		/**
		 * 분리 형식 주소
		 * @description <p>분리 형식 주소</p>
		 *     <p>한 줄 형식 주소와 분리 형식 주소 모두 존재합니다.
		 *     한 줄 형식 주소는 분리 형식 주소를 이어 붙인 형태로 생성됩니다.</p>
		 *
		 */
		SeparatedAddress: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "SEPARATED";
			/** 주소 (한 줄) */
			oneLine: string;
			/** 상세 주소 1 */
			addressLine1: string;
			/** 상세 주소 2 */
			addressLine2: string;
			/** 시/군/구 */
			city?: string;
			/** 주/도/시 */
			province?: string;
			/** 국가 */
			country?: components["schemas"]["Country"];
		};
		/**
		 * 분리 형식 주소 입력 정보
		 * @description <p>분리 형식 주소 입력 정보</p>
		 *
		 */
		SeparatedAddressInput: {
			/** 상세 주소 1 */
			addressLine1: string;
			/** 상세 주소 2 */
			addressLine2: string;
			/** 시/군/구 */
			city?: string;
			/** 주/도/시 */
			province?: string;
			/** 국가 */
			country?: components["schemas"]["Country"];
		};
		/**
		 * 정렬 방식
		 * @description <p>정렬 방식</p>
		 *
		 * @enum {string}
		 */
		SortOrder: "ASC" | "DESC";
		/**
		 * 결제 시작 상태
		 * @description <p>결제 시작 상태</p>
		 *
		 */
		StartedPaymentSchedule: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "STARTED";
			/** 결제 예약 건 아이디 */
			id: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제 건 아이디 */
			paymentId: string;
			/** 빌링키 */
			billingKey: string;
			/** 주문명 */
			orderName: string;
			/** 문화비 지출 여부 */
			isCulturalExpense: boolean;
			/** 에스크로 결제 여부 */
			isEscrow: boolean;
			/** 고객 정보 */
			customer: components["schemas"]["Customer"];
			/** 사용자 지정 데이터 */
			customData: string;
			/**
			 * 결제 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/**
			 * 부가세
			 * Format: int64
			 */
			vatAmount?: number;
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/**
			 * 할부 개월 수
			 * Format: int32
			 */
			installmentMonth?: number;
			/** 웹훅 주소 */
			noticeUrls?: string[];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 결제 예약 등록 시점
			 * Format: date-time
			 */
			createdAt: string;
			/**
			 * 결제 예정 시점
			 * Format: date-time
			 */
			timeToPay: string;
			/**
			 * 결제 시작 시점
			 * Format: date-time
			 */
			startedAt: string;
		};
		/**
		 * 취소 완료 상태
		 * @description <p>취소 완료 상태</p>
		 *
		 */
		SucceededPaymentCancellation: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "SUCCEEDED";
			/** 취소 내역 아이디 */
			id: string;
			/** PG사 결제 취소 내역 아이디 */
			pgCancellationId?: string;
			/**
			 * 취소 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 취소 금액 중 면세 금액
			 * Format: int64
			 */
			taxFreeAmount: number;
			/**
			 * 취소 금액 중 부가세액
			 * Format: int64
			 */
			vatAmount: number;
			/**
			 * 적립형 포인트의 환불 금액
			 * Format: int64
			 */
			easyPayDiscountAmount?: number;
			/** 취소 사유 */
			reason: string;
			/**
			 * 취소 시점
			 * Format: date-time
			 */
			cancelledAt?: string;
			/**
			 * 취소 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
			/** 취소 영수증 URL */
			receiptUrl?: string;
		};
		/**
		 * 결제 성공 상태
		 * @description <p>결제 성공 상태</p>
		 *
		 */
		SucceededPaymentSchedule: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "SUCCEEDED";
			/** 결제 예약 건 아이디 */
			id: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제 건 아이디 */
			paymentId: string;
			/** 빌링키 */
			billingKey: string;
			/** 주문명 */
			orderName: string;
			/** 문화비 지출 여부 */
			isCulturalExpense: boolean;
			/** 에스크로 결제 여부 */
			isEscrow: boolean;
			/** 고객 정보 */
			customer: components["schemas"]["Customer"];
			/** 사용자 지정 데이터 */
			customData: string;
			/**
			 * 결제 총 금액
			 * Format: int64
			 */
			totalAmount: number;
			/**
			 * 면세액
			 * Format: int64
			 */
			taxFreeAmount?: number;
			/**
			 * 부가세
			 * Format: int64
			 */
			vatAmount?: number;
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/**
			 * 할부 개월 수
			 * Format: int32
			 */
			installmentMonth?: number;
			/** 웹훅 주소 */
			noticeUrls?: string[];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 결제 예약 등록 시점
			 * Format: date-time
			 */
			createdAt: string;
			/**
			 * 결제 예정 시점
			 * Format: date-time
			 */
			timeToPay: string;
			/**
			 * 결제 시작 시점
			 * Format: date-time
			 */
			startedAt: string;
			/**
			 * 결제 완료 시점
			 * Format: date-time
			 */
			completedAt: string;
		};
		/**
		 * 면세 금액 등 하위 항목들의 합이 전체 취소 금액을 초과한 경우
		 * @description <p>면세 금액 등 하위 항목들의 합이 전체 취소 금액을 초과한 경우</p>
		 *
		 */
		SumOfPartsExceedsCancelAmountError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "SUM_OF_PARTS_EXCEEDS_CANCEL_AMOUNT";
			message?: string;
		};
		/**
		 * 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우
		 * @description <p>면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우</p>
		 *
		 */
		SumOfPartsExceedsTotalAmountError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT";
			message?: string;
		};
		TransferParameters: {
			[key: string]:
				| components["schemas"]["PlatformSettlementParameterValue"]
				| undefined;
		};
		/**
		 * 인증 정보가 올바르지 않은 경우
		 * @description <p>인증 정보가 올바르지 않은 경우</p>
		 *
		 */
		UnauthorizedError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "UNAUTHORIZED";
			message?: string;
		};
		/**
		 * 연동 사업자 정보 수정 요청
		 * @description <p>연동 사업자 정보 수정 요청</p>
		 *
		 */
		UpdateB2bMemberCompanyBody: {
			/** 회사명 */
			name?: string;
			/** 대표자 성명 */
			ceoName?: string;
			/** 회사 주소 */
			address?: string;
			/** 업태 */
			businessType?: string;
			/** 업종 */
			businessClass?: string;
		};
		/**
		 * 담당자 정보 수정 요청
		 * @description <p>담당자 정보 수정 요청</p>
		 *
		 */
		UpdateB2bMemberCompanyContactBody: {
			/** 비밀번호 */
			password?: string;
			/** 담당자 성명 */
			name?: string;
			/** 담당자 핸드폰 번호 */
			phoneNumber?: string;
			/** 담당자 이메일 */
			email?: string;
		};
		UpdateB2bMemberCompanyContactError:
			| components["schemas"]["B2bContactNotFoundError"]
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bMemberCompanyNotFoundError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 담당자 정보 수정 응답
		 * @description <p>담당자 정보 수정 응답</p>
		 *
		 */
		UpdateB2bMemberCompanyContactResponse: {
			/** 담당자 정보 */
			contact: components["schemas"]["B2bCompanyContact"];
		};
		UpdateB2bMemberCompanyError:
			| components["schemas"]["B2bMemberCompanyNotFoundError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 연동 사업자 정보 수정 응답
		 * @description <p>연동 사업자 정보 수정 응답</p>
		 *
		 */
		UpdateB2bMemberCompanyResponse: {
			/** 연동 사업자 정보 */
			memberCompany: components["schemas"]["B2bMemberCompany"];
		};
		/**
		 * 추가 수수료 정책 업데이트를 위한 입력 정보
		 * @description <p>추가 수수료 정책 업데이트를 위한 입력 정보</p>
		 *     <p>값이 명시하지 않은 필드는 업데이트되지 않습니다.</p>
		 *
		 */
		UpdatePlatformAdditionalFeePolicyBody: {
			/** 책정 수수료 */
			fee?: components["schemas"]["PlatformFeeInput"];
			/** 추가 수수료 정책 이름 */
			name?: string;
			/** 해당 추가 수수료 정책에 대한 메모 */
			memo?: string;
			/** 부가세를 부담할 주체 */
			vatPayer?: components["schemas"]["PlatformPayer"];
		};
		UpdatePlatformAdditionalFeePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAdditionalFeePolicyNotFoundError"]
			| components["schemas"]["PlatformArchivedAdditionalFeePolicyError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 추가 수수료 정책 업데이트 성공 응답
		 * @description <p>추가 수수료 정책 업데이트 성공 응답</p>
		 *
		 */
		UpdatePlatformAdditionalFeePolicyResponse: {
			/** 업데이트된 추가 수수료 정책 */
			additionalFeePolicy: components["schemas"]["PlatformAdditionalFeePolicy"];
		};
		/**
		 * 플랫폼 업데이트를 위한 입력 정보
		 * @description <p>플랫폼 업데이트를 위한 입력 정보</p>
		 *     <p>값이 명시되지 않은 필드는 업데이트하지 않습니다.</p>
		 *
		 */
		UpdatePlatformBody: {
			/** 파트너 정산금액의 소수점 처리 방식 */
			roundType?: components["schemas"]["PlatformRoundType"];
			/** 수수료 및 할인 분담 정책 관련 계산식 */
			settlementFormula?: components["schemas"]["UpdatePlatformBodySettlementFormula"];
			/** 정산 규칙 */
			settlementRule?: components["schemas"]["UpdatePlatformBodySettlementRule"];
		};
		/**
		 * 플랫폼 업데이트 시 변경할 계산식 정보
		 * @description <p>플랫폼 업데이트 시 변경할 계산식 정보</p>
		 *     <p>값이 명시되지 않은 필드는 업데이트하지 않습니다.</p>
		 *
		 */
		UpdatePlatformBodySettlementFormula: {
			/** 플랫폼 수수료 계산식 */
			platformFee?: string;
			/** 할인 분담액 계산식 */
			discountShare?: string;
			/** 추가 수수료 계산식 */
			additionalFee?: string;
		};
		/**
		 * 플랫폼 업데이트 시 변경할 정산 규칙 정보
		 * @description <p>플랫폼 업데이트 시 변경할 정산 규칙 정보</p>
		 *     <p>값이 명시되지 않은 필드는 업데이트하지 않습니다.</p>
		 *
		 */
		UpdatePlatformBodySettlementRule: {
			/** paymentId, storeId, partnerId가 같은 주문 정산건에 대한 중복 정산 지원 여부 */
			supportsMultipleOrderTransfersPerPartner?: boolean;
			/** 정산일이 정산시작일보다 작거나 같을 경우 공휴일 후 영업일로 정산일 다시 계산 여부 */
			adjustSettlementDateAfterHolidayIfEarlier?: boolean;
		};
		/**
		 * 계약 업데이트를 위한 입력 정보. 값이 명시되지 않은 필드는 업데이트되지 않습니다.
		 * @description <p>계약 업데이트를 위한 입력 정보. 값이 명시되지 않은 필드는 업데이트되지 않습니다.</p>
		 *     <p>값이 명시되지 않은 필드는 업데이트되지 않습니다.</p>
		 *
		 */
		UpdatePlatformContractBody: {
			/** 계약 이름 */
			name?: string;
			/** 계약 내부 표기를 위한 메모 */
			memo?: string;
			/** 중개수수료 */
			platformFee?: components["schemas"]["PlatformFeeInput"];
			/** 정산 주기 */
			settlementCycle?: components["schemas"]["PlatformSettlementCycleInput"];
			/** 중개수수료에 대한 부가세 부담 주체 */
			platformFeeVatPayer?: components["schemas"]["PlatformPayer"];
			/** 정산 시 결제금액 부가세 감액 여부 */
			subtractPaymentVatAmount?: boolean;
		};
		UpdatePlatformContractError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformArchivedContractError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 계약 객체 업데이트 성공 응답
		 * @description <p>계약 객체 업데이트 성공 응답</p>
		 *
		 */
		UpdatePlatformContractResponse: {
			/** 업데이트된 계약 객체 */
			contract: components["schemas"]["PlatformContract"];
		};
		/**
		 * 할인 분담 정책 업데이트를 위한 입력 정보
		 * @description <p>할인 분담 정책 업데이트를 위한 입력 정보</p>
		 *     <p>값이 명시되지 않은 필드는 업데이트하지 않습니다.</p>
		 *
		 */
		UpdatePlatformDiscountSharePolicyBody: {
			/** 할인 분담 정책 이름 */
			name?: string;
			/**
			 * 할인 분담율
			 * Format: int32
			 * @description <p>파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 <code>할인금액 * partnerShareRate * 10^5</code> 로 책정합니다.</p>
			 *
			 */
			partnerShareRate?: number;
			/** 해당 할인 분담에 대한 메모 */
			memo?: string;
		};
		UpdatePlatformDiscountSharePolicyError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformArchivedDiscountSharePolicyError"]
			| components["schemas"]["PlatformDiscountSharePolicyNotFoundError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 할인 분담 정책 업데이트 성공 응답
		 * @description <p>할인 분담 정책 업데이트 성공 응답</p>
		 *
		 */
		UpdatePlatformDiscountSharePolicyResponse: {
			/** 업데이트된 할인 분담 정책 */
			discountSharePolicy: components["schemas"]["PlatformDiscountSharePolicy"];
		};
		UpdatePlatformError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformInvalidSettlementFormulaError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 파트너 업데이트를 위한 입력 정보
		 * @description <p>파트너 업데이트를 위한 입력 정보</p>
		 *     <p>값이 명시되지 않은 필드는 업데이트되지 않습니다.</p>
		 *
		 */
		UpdatePlatformPartnerBody: {
			/** 파트너 법인명 혹은 이름 */
			name?: string;
			/** 파트너 담당자 연락 정보 */
			contact?: components["schemas"]["UpdatePlatformPartnerBodyContact"];
			/** 정산 계좌 */
			account?: components["schemas"]["UpdatePlatformPartnerBodyAccount"];
			/** 파트너에 설정된 기본 계약 아이디 */
			defaultContractId?: string;
			/** 파트너에 대한 메모 */
			memo?: string;
			/** 파트너의 태그 리스트 */
			tags?: string[];
			/** 파트너 유형별 정보 */
			type?: components["schemas"]["UpdatePlatformPartnerBodyType"];
		};
		/**
		 * 파트너 계좌 업데이트를 위한 입력 정보
		 * @description <p>파트너 계좌 업데이트를 위한 입력 정보</p>
		 *
		 */
		UpdatePlatformPartnerBodyAccount: {
			/** 은행 */
			bank: components["schemas"]["Bank"];
			/** 정산에 사용할 통화 */
			currency: components["schemas"]["Currency"];
			/** 계좌번호 */
			number: string;
			/** 예금주명 */
			holder: string;
			/** 계좌 검증 아이디 */
			accountVerificationId?: string;
		};
		/**
		 * 파트너 담당자 업데이트를 위한 정보
		 * @description <p>파트너 담당자 업데이트를 위한 정보</p>
		 *
		 */
		UpdatePlatformPartnerBodyContact: {
			/** 담당자 이름 */
			name?: string;
			/** 담당자 휴대폰 번호 */
			phoneNumber?: string;
			/** 담당자 이메일 */
			email?: string;
		};
		/**
		 * 파트너 업데이트를 위한 유형별 추가 정보
		 * @description <p>파트너 업데이트를 위한 유형별 추가 정보</p>
		 *     <p>파트너 유형별 추가 정보를 수정합니다.
		 *     기존과 다른 파트너 유형 정보가 입력된 경우, 파트너의 유형 자체가 변경됩니다.</p>
		 *
		 */
		UpdatePlatformPartnerBodyType: {
			/** 사업자 추가 정보 */
			business?: components["schemas"]["UpdatePlatformPartnerBodyTypeBusiness"];
			/** 원천징수대상자 추가 정보 */
			whtPayer?: components["schemas"]["UpdatePlatformPartnerBodyTypeWhtPayer"];
		};
		UpdatePlatformPartnerBodyTypeBusiness: {
			/** 상호명 */
			companyName?: string;
			/** 사업자 유형 */
			taxationType?: components["schemas"]["PlatformPartnerTaxationType"];
			/** 사업자등록번호 */
			businessRegistrationNumber?: string;
			/** 대표자 이름 */
			representativeName?: string;
			/** 사업장 주소 */
			companyAddress?: string;
			/** 업태 */
			businessType?: string;
			/** 업종 */
			businessClass?: string;
		};
		UpdatePlatformPartnerBodyTypeWhtPayer: {
			/** 생년월일 */
			birthdate?: string;
		};
		UpdatePlatformPartnerError:
			| components["schemas"]["ForbiddenError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["PlatformAccountVerificationAlreadyUsedError"]
			| components["schemas"]["PlatformAccountVerificationFailedError"]
			| components["schemas"]["PlatformAccountVerificationNotFoundError"]
			| components["schemas"]["PlatformArchivedPartnerError"]
			| components["schemas"]["PlatformContractNotFoundError"]
			| components["schemas"]["PlatformInsufficientDataToChangePartnerTypeError"]
			| components["schemas"]["PlatformNotEnabledError"]
			| components["schemas"]["PlatformPartnerNotFoundError"]
			| components["schemas"]["UnauthorizedError"];
		/**
		 * 파트너 업데이트 성공 응답
		 * @description <p>파트너 업데이트 성공 응답</p>
		 *
		 */
		UpdatePlatformPartnerResponse: {
			/** 업데이트된 파트너 */
			partner: components["schemas"]["PlatformPartner"];
		};
		UpdatePlatformPartnerSettlementStatusBody: {
			partnerSettlementId: string;
			status: components["schemas"]["PlatformPartnerSettlementStatus"];
			memo?: string;
		};
		/**
		 * 정산내역 상태 업데이트 결과
		 * @description <p>정산내역 상태 업데이트 결과</p>
		 *
		 */
		UpdatePlatformPartnerSettlementStatusResponse: {
			partnerSettlement: components["schemas"]["PlatformPartnerSettlement"];
		};
		/**
		 * 플랫폼 업데이트 결과 정보
		 * @description <p>플랫폼 업데이트 결과 정보</p>
		 *
		 */
		UpdatePlatformResponse: {
			/** 업데이트된 플랫폼 정보 */
			platform: components["schemas"]["Platform"];
		};
		/**
		 * 완료된 본인인증 내역
		 * @description <p>완료된 본인인증 내역</p>
		 *
		 */
		VerifiedIdentityVerification: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "VERIFIED";
			/** 본인인증 내역 아이디 */
			id: string;
			/** 사용된 본인인증 채널 */
			channel?: components["schemas"]["SelectedChannel"];
			/** 인증된 고객 정보 */
			verifiedCustomer: components["schemas"]["IdentityVerificationVerifiedCustomer"];
			/** 사용자 지정 데이터 */
			customData?: string;
			/**
			 * 본인인증 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
			/**
			 * 업데이트 시점
			 * Format: date-time
			 */
			updatedAt: string;
			/**
			 * 상태 업데이트 시점
			 * Format: date-time
			 */
			statusChangedAt: string;
			/**
			 * 본인인증 완료 시점
			 * Format: date-time
			 */
			verifiedAt: string;
			/** 본인인증 내역 PG사 아이디 */
			pgTxId: string;
			/** PG사 응답 데이터 */
			pgRawResponse: string;
		};
		/**
		 * 가상계좌 발급 완료 상태 건
		 * @description <p>가상계좌 발급 완료 상태 건</p>
		 *
		 */
		VirtualAccountIssuedPayment: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			status: "VIRTUAL_ACCOUNT_ISSUED";
			/** 결제 건 아이디 */
			id: string;
			/**
			 * 결제 건 포트원 채번 아이디
			 * @description <p>V1 결제 건의 경우 imp_uid에 해당합니다.</p>
			 *
			 */
			transactionId: string;
			/** 고객사 아이디 */
			merchantId: string;
			/** 상점 아이디 */
			storeId: string;
			/** 결제수단 정보 */
			method?: components["schemas"]["PaymentMethod"];
			/** 결제 채널 */
			channel: components["schemas"]["SelectedChannel"];
			/** 결제 채널 그룹 정보 */
			channelGroup?: components["schemas"]["ChannelGroupSummary"];
			/** 포트원 버전 */
			version: components["schemas"]["PortOneVersion"];
			/**
			 * 결제 예약 건 아이디
			 * @description <p>결제 예약을 이용한 경우에만 존재</p>
			 *
			 */
			scheduleId?: string;
			/**
			 * 결제 시 사용된 빌링키
			 * @description <p>빌링키 결제인 경우에만 존재</p>
			 *
			 */
			billingKey?: string;
			/** 웹훅 발송 내역 */
			webhooks?: components["schemas"]["PaymentWebhook"][];
			/**
			 * 결제 요청 시점
			 * Format: date-time
			 */
			requestedAt: string;
			/**
			 * 업데이트 시점
			 * Format: date-time
			 */
			updatedAt: string;
			/**
			 * 상태 업데이트 시점
			 * Format: date-time
			 */
			statusChangedAt: string;
			/** 주문명 */
			orderName: string;
			/** 결제 금액 관련 세부 정보 */
			amount: components["schemas"]["PaymentAmount"];
			/** 통화 */
			currency: components["schemas"]["Currency"];
			/** 구매자 정보 */
			customer: components["schemas"]["Customer"];
			/** 프로모션 아이디 */
			promotionId?: string;
			/** 문화비 지출 여부 */
			isCulturalExpense?: boolean;
			/**
			 * 에스크로 결제 정보
			 * @description <p>에스크로 결제인 경우 존재합니다.</p>
			 *
			 */
			escrow?: components["schemas"]["PaymentEscrow"];
			/** 상품 정보 */
			products?: components["schemas"]["PaymentProduct"][];
			/**
			 * 상품 갯수
			 * Format: int32
			 */
			productCount?: number;
			/** 사용자 지정 데이터 */
			customData?: string;
			/** 국가 코드 */
			country?: components["schemas"]["Country"];
			/** PG사 거래 아이디 */
			pgTxId?: string;
		};
		/**
		 * 웹훅 내역이 존재하지 않는 경우
		 * @description <p>웹훅 내역이 존재하지 않는 경우</p>
		 *
		 */
		WebhookNotFoundError: {
			/**
			 * @description discriminator enum property added by openapi-typescript
			 * @enum {string}
			 */
			type: "WEBHOOK_NOT_FOUND";
			message?: string;
		};
		getB2bContactIdExistenceError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
		requestB2bTaxInvoiceError:
			| components["schemas"]["B2bExternalServiceError"]
			| components["schemas"]["B2bNotEnabledError"]
			| components["schemas"]["B2bTaxInvoiceNoRecipientDocumentKeyError"]
			| components["schemas"]["B2bTaxInvoiceNotFoundError"]
			| components["schemas"]["B2bTaxInvoiceNotRegisteredStatusError"]
			| components["schemas"]["InvalidRequestError"]
			| components["schemas"]["UnauthorizedError"];
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	loginViaApiSecret: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				/** @example {
				 *       "apiSecret": "your-api-secret"
				 *     } */
				"application/json": components["schemas"]["LoginViaApiSecretBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 토큰을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["LoginViaApiSecretResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["LoginViaApiSecretError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["LoginViaApiSecretError"];
				};
			};
		};
	};
	refreshToken: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				/** @example {
				 *       "refreshToken": "previous-refresh-token"
				 *     } */
				"application/json": components["schemas"]["RefreshTokenBody"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RefreshTokenResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RefreshTokenError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RefreshTokenError"];
				};
			};
		};
	};
	getPlatform: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 플랫폼 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Platform"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformError"];
				};
			};
		};
	};
	updatePlatform: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdatePlatformBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformInvalidSettlementFormulaError</code></li>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformError"];
				};
			};
		};
	};
	getPlatformDiscountSharePolicyFilterOptions: {
		parameters: {
			query?: {
				/** @description <p>보관 조회 여부</p>
				 *     <p>true 이면 보관된 할인 분담의 필터 옵션을 조회하고, false 이면 보관되지 않은 할인 분담의 필터 옵션을 조회합니다. 기본값은 false 입니다.</p>
				 *      */
				isArchived?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 조회된 할인 분담 정책 필터 옵션을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformDiscountSharePolicyFilterOptions"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePolicyFilterOptionsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePolicyFilterOptionsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePolicyFilterOptionsError"];
				};
			};
		};
	};
	getPlatformDiscountSharePolicies: {
		parameters: {
			query?: {
				requestBody?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 조회된 할인 분담 정책 리스트와 페이지 정보가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePoliciesResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePoliciesError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePoliciesError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePoliciesError"];
				};
			};
		};
	};
	createPlatformDiscountSharePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreatePlatformDiscountSharePolicyBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 생성된 할인 분담 정책이 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformDiscountSharePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformDiscountSharePolicyAlreadyExistsError</code></li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformDiscountSharePolicyError"];
				};
			};
		};
	};
	getPlatformDiscountSharePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>조회할 할인 분담 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 할인 분담 정책을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformDiscountSharePolicy"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePolicyError"];
				};
			};
		};
	};
	updatePlatformDiscountSharePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>업데이트할 할인 분담 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdatePlatformDiscountSharePolicyBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 업데이트된 할인 분담 정책을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformDiscountSharePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformArchivedDiscountSharePolicyError</code>: 보관된 할인 분담 정책을 업데이트하려고 하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformDiscountSharePolicyError"];
				};
			};
		};
	};
	getPlatformDiscountSharePolicySchedule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>할인 분담 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 예약된 할인 분담 정책을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformDiscountSharePolicy"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformDiscountSharePolicyScheduleError"];
				};
			};
		};
	};
	rescheduleDiscountSharePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>할인 분담 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ReschedulePlatformDiscountSharePolicyBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 예약된 할인 분담 정책을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ReschedulePlatformDiscountSharePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleDiscountSharePolicyError"];
				};
			};
		};
	};
	scheduleDiscountSharePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>할인 분담 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SchedulePlatformDiscountSharePolicyBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 예약된 할인 분담 정책이 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePlatformDiscountSharePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformDiscountSharePolicyScheduleAlreadyExistsError</code></li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleDiscountSharePolicyError"];
				};
			};
		};
	};
	cancelPlatformDiscountSharePolicySchedule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>할인 분담 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformDiscountSharePolicyScheduleResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformDiscountSharePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformDiscountSharePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformDiscountSharePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformDiscountSharePolicyScheduleError"];
				};
			};
		};
	};
	archivePlatformDiscountSharePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>할인 분담 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 보관된 할인 분담 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformDiscountSharePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformCannotArchiveScheduledDiscountSharePolicyError</code>: 예약된 업데이트가 있는 할인 분담 정책을 보관하려고 하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformDiscountSharePolicyError"];
				};
			};
		};
	};
	recoverPlatformDiscountSharePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>할인 분담 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 복원된 할인 분담 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformDiscountSharePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformDiscountSharePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformDiscountSharePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformDiscountSharePolicyError"];
				};
			};
		};
	};
	getPlatformAdditionalFeePolicies: {
		parameters: {
			query?: {
				requestBody?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 조회된 추가 수수료 정책 리스트와 페이지 정보를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePoliciesResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePoliciesError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePoliciesError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePoliciesError"];
				};
			};
		};
	};
	createPlatformAdditionalFeePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreatePlatformAdditionalFeePolicyBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformAdditionalFeePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformAdditionalFeePolicyAlreadyExistsError</code></li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformAdditionalFeePolicyError"];
				};
			};
		};
	};
	getPlatformAdditionalFeePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>조회할 추가 수수료 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 추가 수수료 정책을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformAdditionalFeePolicy"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePolicyError"];
				};
			};
		};
	};
	updatePlatformAdditionalFeePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>업데이트할 추가 수수료 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdatePlatformAdditionalFeePolicyBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 업데이트된 추가 수수료 정책이 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformAdditionalFeePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformArchivedAdditionalFeePolicyError</code>: 보관된 추가 수수료 정책을 업데이트하려고 하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformAdditionalFeePolicyError"];
				};
			};
		};
	};
	getPlatformAdditionalFeePolicySchedule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>추가 수수료 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 예약된 추가 수수료 정책을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformAdditionalFeePolicy"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAdditionalFeePolicyScheduleError"];
				};
			};
		};
	};
	rescheduleAdditionalFeePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>추가 수수료 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ReschedulePlatformAdditionalFeePolicyBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 예약된 추가 수수료 정책이 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ReschedulePlatformAdditionalFeePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleAdditionalFeePolicyError"];
				};
			};
		};
	};
	scheduleAdditionalFeePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>추가 수수료 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SchedulePlatformAdditionalFeePolicyBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 예약된 추가 수수료 정책을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePlatformAdditionalFeePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformAdditionalFeePolicyScheduleAlreadyExistsError</code></li>
			 *     <li><code>PlatformArchivedAdditionalFeePolicyError</code>: 보관된 추가 수수료 정책을 업데이트하려고 하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleAdditionalFeePolicyError"];
				};
			};
		};
	};
	cancelPlatformAdditionalFeePolicySchedule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>추가 수수료 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformAdditionalFeePolicyScheduleResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformAdditionalFeePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformAdditionalFeePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformAdditionalFeePolicyScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformAdditionalFeePolicyScheduleError"];
				};
			};
		};
	};
	archivePlatformAdditionalFeePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>추가 수수료 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 보관된 추가 수수료 정책 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformAdditionalFeePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformCannotArchiveScheduledAdditionalFeePolicyError</code>: 예약된 업데이트가 있는 추가 수수료 정책을 보관하려고 하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformAdditionalFeePolicyError"];
				};
			};
		};
	};
	recoverPlatformAdditionalFeePolicy: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>추가 수수료 정책 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 복원된 추가 수수료 정책 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformAdditionalFeePolicyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformAdditionalFeePolicyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformAdditionalFeePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformAdditionalFeePolicyError"];
				};
			};
		};
	};
	getPlatformPartnerFilterOptions: {
		parameters: {
			query?: {
				/** @description <p>보관 조회 여부</p>
				 *     <p>true 이면 보관된 파트너의 필터 옵션을 조회하고, false 이면 보관되지 않은 파트너의 필터 옵션을 조회합니다. 기본값은 false 입니다.</p>
				 *      */
				isArchived?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 조회된 파트너 필터 옵션을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformPartnerFilterOptions"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnerFilterOptionsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnerFilterOptionsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnerFilterOptionsError"];
				};
			};
		};
	};
	getPlatformPartners: {
		parameters: {
			query?: {
				requestBody?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 조회된 파트너 리스트와 페이지 정보가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnersResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnersError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnersError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnersError"];
				};
			};
		};
	};
	createPlatformPartner: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreatePlatformPartnerBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 생성된 파트너 객체가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnerResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>PlatformAccountVerificationFailedError</code>: 파트너 계좌 인증이 실패한 경우</li>
			 *     <li><code>PlatformCurrencyNotSupportedError</code>: 지원 되지 않는 통화를 선택한 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     <li><code>PlatformAccountVerificationNotFoundError</code>: 파트너 계좌 검증 아이디를 찾을 수 없는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerIdAlreadyExistsError</code></li>
			 *     <li><code>PlatformAccountVerificationAlreadyUsedError</code>: 파트너 계좌 검증 아이디를 이미 사용한 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnerError"];
				};
			};
		};
	};
	getPlatformPartner: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>조회하고 싶은 파트너 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 파트너 객체가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformPartner"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnerError"];
				};
			};
		};
	};
	updatePlatformPartner: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>업데이트할 파트너 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdatePlatformPartnerBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 업데이트된 파트너 객체가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformPartnerResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>PlatformAccountVerificationFailedError</code>: 파트너 계좌 인증이 실패한 경우</li>
			 *     <li><code>PlatformInsufficientDataToChangePartnerTypeError</code>: 파트너 타입 수정에 필요한 데이터가 부족한 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerNotFoundError</code></li>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     <li><code>PlatformAccountVerificationNotFoundError</code>: 파트너 계좌 검증 아이디를 찾을 수 없는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformArchivedPartnerError</code>: 보관된 파트너를 업데이트하려고 하는 경우</li>
			 *     <li><code>PlatformAccountVerificationAlreadyUsedError</code>: 파트너 계좌 검증 아이디를 이미 사용한 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformPartnerError"];
				};
			};
		};
	};
	createPlatformPartners: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreatePlatformPartnersBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnersResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>PlatformPartnerIdsDuplicatedError</code></li>
			 *     <li><code>PlatformCurrencyNotSupportedError</code>: 지원 되지 않는 통화를 선택한 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnersError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnersError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnersError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractsNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnersError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerIdsAlreadyExistError</code></li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformPartnersError"];
				};
			};
		};
	};
	getPlatformPartnerSchedule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>파트너 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 예약된 파트너 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformPartner"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnerScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnerScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnerScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformPartnerScheduleError"];
				};
			};
		};
	};
	reschedulePartner: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>파트너 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ReschedulePlatformPartnerBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 예약된 파트너 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ReschedulePlatformPartnerResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ReschedulePartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ReschedulePartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ReschedulePartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerNotFoundError</code></li>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ReschedulePartnerError"];
				};
			};
		};
	};
	schedulePartner: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>파트너 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SchedulePlatformPartnerBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 예약된 파트너 객체가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePlatformPartnerResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>PlatformAccountVerificationFailedError</code>: 파트너 계좌 인증이 실패한 경우</li>
			 *     <li><code>PlatformInsufficientDataToChangePartnerTypeError</code>: 파트너 타입 수정에 필요한 데이터가 부족한 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerNotFoundError</code></li>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     <li><code>PlatformAccountVerificationNotFoundError</code>: 파트너 계좌 검증 아이디를 찾을 수 없는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerScheduleAlreadyExistsError</code></li>
			 *     <li><code>PlatformArchivedPartnerError</code>: 보관된 파트너를 업데이트하려고 하는 경우</li>
			 *     <li><code>PlatformAccountVerificationAlreadyUsedError</code>: 파트너 계좌 검증 아이디를 이미 사용한 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePartnerError"];
				};
			};
		};
	};
	cancelPlatformPartnerSchedule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>파트너 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformPartnerScheduleResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformPartnerScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformPartnerScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformPartnerScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformPartnerScheduleError"];
				};
			};
		};
	};
	schedulePlatformPartners: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SchedulePlatformPartnersBody"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePlatformPartnersResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePlatformPartnersError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePlatformPartnersError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePlatformPartnersError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePlatformPartnersError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerSchedulesAlreadyExistError</code></li>
			 *     <li><code>PlatformArchivedPartnersCannotBeScheduledError</code>: 보관된 파트너들을 예약 업데이트하려고 하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePlatformPartnersError"];
				};
			};
		};
	};
	archivePlatformPartner: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>파트너 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 보관된 파트너 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformPartnerResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformCannotArchiveScheduledPartnerError</code>: 예약된 업데이트가 있는 파트너를 보관하려고 하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformPartnerError"];
				};
			};
		};
	};
	recoverPlatformPartner: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>파트너 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 복원된 파트너 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformPartnerResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformPartnerError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformPartnerError"];
				};
			};
		};
	};
	getPlatformContracts: {
		parameters: {
			query?: {
				requestBody?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 조회된 계약 리스트와 페이지 정보를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractsResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractsError"];
				};
			};
		};
	};
	createPlatformContract: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreatePlatformContractBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 생성된 계약 객체가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformContractResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractAlreadyExistsError</code></li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformContractError"];
				};
			};
		};
	};
	getPlatformContract: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>조회할 계약 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 계약 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformContract"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractError"];
				};
			};
		};
	};
	updatePlatformContract: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>업데이트할 계약 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdatePlatformContractBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 업데이트된 계약 객체가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformContractResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformArchivedContractError</code>: 보관된 계약을 업데이트하려고 하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdatePlatformContractError"];
				};
			};
		};
	};
	getPlatformContractSchedule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>계약 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 예약된 계약 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformContract"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformContractScheduleError"];
				};
			};
		};
	};
	rescheduleContract: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>계약 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ReschedulePlatformContractBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 예약된 계약 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ReschedulePlatformContractResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RescheduleContractError"];
				};
			};
		};
	};
	scheduleContract: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>계약 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SchedulePlatformContractBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 예약된 계약 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SchedulePlatformContractResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractScheduleAlreadyExistsError</code></li>
			 *     <li><code>PlatformArchivedContractError</code>: 보관된 계약을 업데이트하려고 하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ScheduleContractError"];
				};
			};
		};
	};
	cancelPlatformContractSchedule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>계약 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformContractScheduleResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformContractScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformContractScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformContractScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPlatformContractScheduleError"];
				};
			};
		};
	};
	archivePlatformContract: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>계약 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 보관된 계약 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformContractResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformCannotArchiveScheduledContractError</code>: 예약된 업데이트가 있는 계약을 보관하려고 하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ArchivePlatformContractError"];
				};
			};
		};
	};
	recoverPlatformContract: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>계약 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 복원된 계약 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformContractResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformContractError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RecoverPlatformContractError"];
				};
			};
		};
	};
	getPlatformTransfer: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>조회하고 싶은 정산건 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 정산건 객체가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformTransfer"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformTransferNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformTransferError"];
				};
			};
		};
	};
	deletePlatformTransfer: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>정산건 아이디</p>
				 *      */
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeletePlatformTransferResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformCancelOrderTransfersExistsError</code></li>
			 *     <li><code>PlatformTransferNonDeletableStatusError</code></li>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeletePlatformTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeletePlatformTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeletePlatformTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformTransferNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeletePlatformTransferError"];
				};
			};
		};
	};
	getPlatformTransferSummaries: {
		parameters: {
			query?: {
				requestBody?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformTransferSummariesResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformTransferSummariesError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformTransferSummariesError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformTransferSummariesError"];
				};
			};
		};
	};
	createPlatformOrderTransfer: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreatePlatformOrderTransferBody"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreateOrderTransferResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>PlatformDiscountExceededOrderAmountError</code></li>
			 *     <li><code>PlatformProductIdDuplicatedError</code></li>
			 *     <li><code>PlatformSettlementPaymentAmountExceededPortOnePaymentError</code>: 정산 요청 결제 금액이 포트원 결제 내역의 결제 금액을 초과한 경우</li>
			 *     <li><code>PlatformSettlementTaxFreeAmountExceededPortOnePaymentError</code>: 정산 요청 면세 금액이 포트원 결제 내역의 면세 금액을 초과한 경우</li>
			 *     <li><code>PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError</code>: 정산 요청 공급대가가 포트원 결제 내역의 공급대가를 초과한 경우</li>
			 *     <li><code>PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError</code></li>
			 *     <li><code>PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError</code></li>
			 *     <li><code>PlatformCurrencyNotSupportedError</code>: 지원 되지 않는 통화를 선택한 경우</li>
			 *     <li><code>PlatformTaxFreeAmountOverFlowError</code>: 면세 금액이 결제금액을 초과한 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformOrderTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformOrderTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformOrderTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerNotFoundError</code></li>
			 *     <li><code>PlatformContractNotFoundError</code></li>
			 *     <li><code>PlatformAdditionalFeePoliciesNotFoundError</code></li>
			 *     <li><code>PlatformDiscountSharePoliciesNotFoundError</code></li>
			 *     <li><code>PlatformPaymentNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformOrderTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformTransferAlreadyExistsError</code></li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformOrderTransferError"];
				};
			};
		};
	};
	createPlatformOrderCancelTransfer: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreatePlatformOrderCancelTransferBody"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreateOrderCancelTransferResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>PlatformOrderDetailMismatchedError</code></li>
			 *     <li><code>PlatformDiscountSharePolicyIdDuplicatedError</code></li>
			 *     <li><code>PlatformCancellableAmountExceededError</code>: 취소 가능한 금액이 초과한 경우</li>
			 *     <li><code>PlatformCancellableDiscountAmountExceededError</code></li>
			 *     <li><code>PlatformProductIdDuplicatedError</code></li>
			 *     <li><code>PlatformCancellableProductQuantityExceededError</code></li>
			 *     <li><code>PlatformOrderTransferAlreadyCancelledError</code></li>
			 *     <li><code>PlatformDiscountCancelExceededOrderCancelAmountError</code></li>
			 *     <li><code>PlatformCancellationAndPaymentTypeMismatchedError</code></li>
			 *     <li><code>PlatformSettlementCancelAmountExceededPortOneCancelError</code>: 정산 취소 요청 금액이 포트원 결제 취소 내역의 취소 금액을 초과한 경우</li>
			 *     <li><code>PlatformCannotSpecifyTransferError</code>: 정산 건 식별에 실패한 경우</li>
			 *     <li><code>PlatformTaxFreeAmountOverFlowError</code>: 면세 금액이 결제금액을 초과한 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformOrderCancelTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformOrderCancelTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformOrderCancelTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformTransferNotFoundError</code></li>
			 *     <li><code>PlatformCancellationNotFoundError</code></li>
			 *     <li><code>PlatformPaymentNotFoundError</code></li>
			 *     <li><code>PlatformProductIdNotFoundError</code></li>
			 *     <li><code>PlatformTransferDiscountSharePolicyNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformOrderCancelTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformTransferAlreadyExistsError</code></li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformOrderCancelTransferError"];
				};
			};
		};
	};
	createPlatformManualTransfer: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreatePlatformManualTransferBody"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreateManualTransferResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>PlatformUnavailableSettlementDateError</code>: 사용할 수 없는 정산일이 요청된 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformManualTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformManualTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformManualTransferError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformPartnerNotFoundError</code></li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePlatformManualTransferError"];
				};
			};
		};
	};
	downloadPlatformTransferSheet: {
		parameters: {
			query: {
				requestBody: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/csv": string;
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DownloadPlatformTransferSheetError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DownloadPlatformTransferSheetError"];
				};
			};
		};
	};
	getPlatformAccountHolder: {
		parameters: {
			query?: {
				/** @description <p>생년월일</p>
				 *     <p>실명 조회를 위해 추가로 보낼 수 있습니다. birthdate과 businessRegistrationNumber 중 하나만 사용해야 합니다.</p>
				 *      */
				birthdate?: string;
				/** @description <p>사업자등록번호</p>
				 *     <p>실명 조회를 위해 추가로 보낼 수 있습니다. birthdate과 businessRegistrationNumber 중 하나만 사용해야 합니다.</p>
				 *      */
				businessRegistrationNumber?: string;
			};
			header?: never;
			path: {
				/** @description <p>은행</p>
				 *      */
				bank: components["schemas"]["Bank"];
				/** @description <p>'-'를 제외한 계좌 번호</p>
				 *      */
				accountNumber: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 조회된 예금주 명이 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PlatformAccountHolder"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>PlatformNotSupportedBankError</code>: 지원하지 않는 은행인 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAccountHolderError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAccountHolderError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformNotEnabledError</code>: 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우</li>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAccountHolderError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PlatformExternalApiTemporarilyFailedError</code>: 외부 api의 일시적인 오류</li>
			 *     <li><code>PlatformExternalApiFailedError</code>: 외부 api 오류</li>
			 *     </ul>
			 *      */
			503: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPlatformAccountHolderError"];
				};
			};
		};
	};
	getIdentityVerification: {
		parameters: {
			query?: {
				/**
				 * @description <p>상점 아이디</p>
				 *     <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
				 *
				 * @example your-store-id
				 */
				storeId?: string;
			};
			header?: never;
			path: {
				/**
				 * @description <p>조회할 본인인증 아이디</p>
				 *
				 * @example your-identity-verification-id
				 */
				identityVerificationId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 본인 인증 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IdentityVerification"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>IdentityVerificationNotFoundError</code>: 요청된 본인인증 건이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetIdentityVerificationError"];
				};
			};
		};
	};
	sendIdentityVerification: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>본인인증 아이디</p>
				 *      */
				identityVerificationId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SendIdentityVerificationBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SendIdentityVerificationResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SendIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SendIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SendIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>IdentityVerificationNotFoundError</code>: 요청된 본인인증 건이 존재하지 않는 경우</li>
			 *     <li><code>ChannelNotFoundError</code>: 요청된 채널이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SendIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>IdentityVerificationAlreadyVerifiedError</code>: 본인인증 건이 이미 인증 완료된 상태인 경우</li>
			 *     <li><code>IdentityVerificationAlreadySentError</code>: 본인인증 건이 이미 API로 요청된 상태인 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SendIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SendIdentityVerificationError"];
				};
			};
		};
	};
	confirmIdentityVerification: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>본인인증 아이디</p>
				 *      */
				identityVerificationId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ConfirmIdentityVerificationBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmIdentityVerificationResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>IdentityVerificationNotFoundError</code>: 요청된 본인인증 건이 존재하지 않는 경우</li>
			 *     <li><code>IdentityVerificationNotSentError</code>: 본인인증 건이 API로 요청된 상태가 아닌 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>IdentityVerificationAlreadyVerifiedError</code>: 본인인증 건이 이미 인증 완료된 상태인 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmIdentityVerificationError"];
				};
			};
		};
	};
	resendIdentityVerification: {
		parameters: {
			query?: {
				/** @description <p>상점 아이디</p>
				 *     <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
				 *      */
				storeId?: string;
			};
			header?: never;
			path: {
				/** @description <p>본인인증 아이디</p>
				 *      */
				identityVerificationId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendIdentityVerificationResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>IdentityVerificationNotFoundError</code>: 요청된 본인인증 건이 존재하지 않는 경우</li>
			 *     <li><code>IdentityVerificationNotSentError</code>: 본인인증 건이 API로 요청된 상태가 아닌 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>IdentityVerificationAlreadyVerifiedError</code>: 본인인증 건이 이미 인증 완료된 상태인 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendIdentityVerificationError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendIdentityVerificationError"];
				};
			};
		};
	};
	preRegisterPayment: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PreRegisterPaymentBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PreRegisterPaymentResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PreRegisterPaymentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PreRegisterPaymentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PreRegisterPaymentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>AlreadyPaidError</code>: 결제가 이미 완료된 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PreRegisterPaymentError"];
				};
			};
		};
	};
	getBillingKeyInfo: {
		parameters: {
			query?: {
				/** @description <p>상점 아이디</p>
				 *     <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
				 *      */
				storeId?: string;
			};
			header?: never;
			path: {
				/** @description <p>조회할 빌링키</p>
				 *      */
				billingKey: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 빌링키 정보를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["BillingKeyInfo"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetBillingKeyInfoError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetBillingKeyInfoError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetBillingKeyInfoError"];
				};
			};
			/** @description <ul>
			 *     <li><code>BillingKeyNotFoundError</code>: 빌링키가 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetBillingKeyInfoError"];
				};
			};
		};
	};
	deleteBillingKey: {
		parameters: {
			query?: {
				/** @description <p>상점 아이디</p>
				 *     <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
				 *      */
				storeId?: string;
			};
			header?: never;
			path: {
				/** @description <p>삭제할 빌링키</p>
				 *      */
				billingKey: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteBillingKeyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>BillingKeyNotIssuedError</code></li>
			 *     <li><code>BillingKeyNotFoundError</code>: 빌링키가 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>BillingKeyAlreadyDeletedError</code>: 빌링키가 이미 삭제된 경우</li>
			 *     <li><code>PaymentScheduleAlreadyExistsError</code>: 결제 예약건이 이미 존재하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     <li><code>ChannelSpecificError</code>: 여러 채널을 지정한 요청에서, 채널 각각에서 오류가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteBillingKeyError"];
				};
			};
		};
	};
	getBillingKeyInfos: {
		parameters: {
			query?: {
				requestBody?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 조회된 빌링키 리스트와 페이지 정보가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetBillingKeyInfosResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetBillingKeyInfosError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetBillingKeyInfosError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetBillingKeyInfosError"];
				};
			};
		};
	};
	issueBillingKey: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["IssueBillingKeyBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueBillingKeyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ChannelNotFoundError</code>: 요청된 채널이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     <li><code>ChannelSpecificError</code>: 여러 채널을 지정한 요청에서, 채널 각각에서 오류가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueBillingKeyError"];
				};
			};
		};
	};
	getCashReceiptByPaymentId: {
		parameters: {
			query?: {
				/** @description <p>상점 아이디</p>
				 *     <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
				 *      */
				storeId?: string;
			};
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 현금 영수증 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CashReceipt"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>CashReceiptNotFoundError</code>: 현금영수증이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetCashReceiptError"];
				};
			};
		};
	};
	getPayment: {
		parameters: {
			query?: {
				/** @description <p>상점 아이디</p>
				 *      */
				storeId?: string;
			};
			header?: never;
			path: {
				/** @description <p>조회할 결제 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 결제 건 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Payment"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentError"];
				};
			};
		};
	};
	getPayments: {
		parameters: {
			query?: {
				requestBody?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 조회된 결제 건 리스트와 페이지 정보가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentsResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentsError"];
				};
			};
		};
	};
	getAllPaymentsByCursor: {
		parameters: {
			query?: {
				requestBody?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 조회된 결제 건 리스트와 커서 정보가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAllPaymentsByCursorResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAllPaymentsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAllPaymentsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAllPaymentsError"];
				};
			};
		};
	};
	getPaymentSchedule: {
		parameters: {
			query?: {
				/** @description <p>상점 아이디</p>
				 *     <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
				 *      */
				storeId?: string;
			};
			header?: never;
			path: {
				/** @description <p>조회할 결제 예약 건 아이디</p>
				 *      */
				paymentScheduleId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 결제 예약 건 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PaymentSchedule"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentScheduleNotFoundError</code>: 결제 예약건이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentScheduleError"];
				};
			};
		};
	};
	getPaymentSchedules: {
		parameters: {
			query?: {
				requestBody?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 조회된 예약 결제 건 리스트가 반환됩니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentSchedulesResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentSchedulesError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentSchedulesError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentSchedulesError"];
				};
			};
		};
	};
	revokePaymentSchedule: {
		parameters: {
			query: {
				requestBody: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RevokePaymentScheduleResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RevokePaymentScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RevokePaymentScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RevokePaymentScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentScheduleNotFoundError</code>: 결제 예약건이 존재하지 않는 경우</li>
			 *     <li><code>BillingKeyNotFoundError</code>: 빌링키가 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RevokePaymentScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentScheduleAlreadyProcessedError</code>: 결제 예약건이 이미 처리된 경우</li>
			 *     <li><code>PaymentScheduleAlreadyRevokedError</code>: 결제 예약건이 이미 취소된 경우</li>
			 *     <li><code>BillingKeyAlreadyDeletedError</code>: 빌링키가 이미 삭제된 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RevokePaymentScheduleError"];
				};
			};
		};
	};
	createPaymentSchedule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreatePaymentScheduleBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePaymentScheduleResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePaymentScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePaymentScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePaymentScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>BillingKeyNotFoundError</code>: 빌링키가 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePaymentScheduleError"];
				};
			};
			/** @description <ul>
			 *     <li><code>AlreadyPaidOrWaitingError</code>: 결제가 이미 완료되었거나 대기중인 경우</li>
			 *     <li><code>SumOfPartsExceedsTotalAmountError</code>: 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우</li>
			 *     <li><code>BillingKeyAlreadyDeletedError</code>: 빌링키가 이미 삭제된 경우</li>
			 *     <li><code>PaymentScheduleAlreadyExistsError</code>: 결제 예약건이 이미 존재하는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreatePaymentScheduleError"];
				};
			};
		};
	};
	cancelPayment: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CancelPaymentBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPaymentResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPaymentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPaymentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPaymentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPaymentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotPaidError</code>: 결제가 완료되지 않은 경우</li>
			 *     <li><code>PaymentAlreadyCancelledError</code>: 결제가 이미 취소된 경우</li>
			 *     <li><code>CancellableAmountConsistencyBrokenError</code>: 취소 가능 잔액 검증에 실패한 경우</li>
			 *     <li><code>CancelAmountExceedsCancellableAmountError</code>: 결제 취소 금액이 취소 가능 금액을 초과한 경우</li>
			 *     <li><code>SumOfPartsExceedsCancelAmountError</code>: 면세 금액 등 하위 항목들의 합이 전체 취소 금액을 초과한 경우</li>
			 *     <li><code>CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError</code>: 취소 면세 금액이 취소 가능한 면세 금액을 초과한 경우</li>
			 *     <li><code>CancelTaxAmountExceedsCancellableTaxAmountError</code>: 취소 과세 금액이 취소 가능한 과세 금액을 초과한 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPaymentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelPaymentError"];
				};
			};
		};
	};
	PayWithBillingKey: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["BillingKeyPaymentInput"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayWithBillingKeyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayWithBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayWithBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayWithBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>BillingKeyNotFoundError</code>: 빌링키가 존재하지 않는 경우</li>
			 *     <li><code>ChannelNotFoundError</code>: 요청된 채널이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayWithBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>AlreadyPaidError</code>: 결제가 이미 완료된 경우</li>
			 *     <li><code>SumOfPartsExceedsTotalAmountError</code>: 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우</li>
			 *     <li><code>BillingKeyAlreadyDeletedError</code>: 빌링키가 이미 삭제된 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayWithBillingKeyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayWithBillingKeyError"];
				};
			};
		};
	};
	PayInstantly: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["InstantPaymentInput"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayInstantlyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayInstantlyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayInstantlyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayInstantlyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ChannelNotFoundError</code>: 요청된 채널이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayInstantlyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>AlreadyPaidError</code>: 결제가 이미 완료된 경우</li>
			 *     <li><code>SumOfPartsExceedsTotalAmountError</code>: 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayInstantlyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PayInstantlyError"];
				};
			};
		};
	};
	issueCashReceipt: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["IssueCashReceiptBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueCashReceiptResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ChannelNotFoundError</code>: 요청된 채널이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>CashReceiptAlreadyIssuedError</code>: 현금영수증이 이미 발급된 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueCashReceiptError"];
				};
			};
		};
	};
	cancelCashReceiptByPaymentId: {
		parameters: {
			query?: {
				/** @description <p>상점 아이디</p>
				 *     <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
				 *      */
				storeId?: string;
			};
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelCashReceiptResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>CashReceiptNotIssuedError</code>: 현금영수증이 발급되지 않은 경우</li>
			 *     <li><code>CashReceiptNotFoundError</code>: 현금영수증이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelCashReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelCashReceiptError"];
				};
			};
		};
	};
	closeVirtualAccount: {
		parameters: {
			query?: {
				/** @description <p>상점 아이디</p>
				 *     <p>접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.</p>
				 *      */
				storeId?: string;
			};
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CloseVirtualAccountResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CloseVirtualAccountError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CloseVirtualAccountError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CloseVirtualAccountError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CloseVirtualAccountError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotWaitingForDepositError</code>: 결제 건이 입금 대기 상태가 아닌 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CloseVirtualAccountError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CloseVirtualAccountError"];
				};
			};
		};
	};
	applyEscrowLogistics: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RegisterEscrowLogisticsBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ApplyEscrowLogisticsResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ApplyEscrowLogisticsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ApplyEscrowLogisticsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ApplyEscrowLogisticsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ApplyEscrowLogisticsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotPaidError</code>: 결제가 완료되지 않은 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ApplyEscrowLogisticsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ApplyEscrowLogisticsError"];
				};
			};
		};
	};
	modifyEscrowLogistics: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ModifyEscrowLogisticsBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ModifyEscrowLogisticsResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ModifyEscrowLogisticsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ModifyEscrowLogisticsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ModifyEscrowLogisticsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ModifyEscrowLogisticsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotPaidError</code>: 결제가 완료되지 않은 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ModifyEscrowLogisticsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ModifyEscrowLogisticsError"];
				};
			};
		};
	};
	confirmEscrow: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ConfirmEscrowBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmEscrowResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmEscrowError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmEscrowError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmEscrowError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmEscrowError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotPaidError</code>: 결제가 완료되지 않은 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmEscrowError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ConfirmEscrowError"];
				};
			};
		};
	};
	resendWebhook: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ResendWebhookBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendWebhookResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendWebhookError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendWebhookError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendWebhookError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
			 *     <li><code>WebhookNotFoundError</code>: 웹훅 내역이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ResendWebhookError"];
				};
			};
		};
	};
	getAnalyticsPaymentChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsPaymentChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 결제 현황을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsPaymentChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsPaymentChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsPaymentChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsPaymentChartError"];
				};
			};
		};
	};
	getAnalyticsPaymentChartInsight: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsPaymentChartInsightBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 결제 현황 인사이트를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsPaymentChartInsight"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsPaymentChartInsightError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsPaymentChartInsightError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsPaymentChartInsightError"];
				};
			};
		};
	};
	getAverageAmountChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsAverageAmountChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 평균 거래액 현황을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsAverageAmountChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAverageAmountChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAverageAmountChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAverageAmountChartError"];
				};
			};
		};
	};
	getPaymentMethodChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsPaymentMethodChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 결제수단 현황을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsPaymentMethodChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentMethodChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentMethodChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentMethodChartError"];
				};
			};
		};
	};
	getPaymentMethodTrendChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsPaymentMethodTrendChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 결제수단 트렌드를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsPaymentMethodTrendChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentMethodTrendChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentMethodTrendChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentMethodTrendChartError"];
				};
			};
		};
	};
	getAnalyticsCardChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsCardChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 카드결제 현황을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsCardChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsCardChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsCardChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsCardChartError"];
				};
			};
		};
	};
	getAnalyticsCardCompanyChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsCardCompanyChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 카드사별 결제 현황을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsCardCompanyChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsCardCompanyChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsCardCompanyChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsCardCompanyChartError"];
				};
			};
		};
	};
	getAnalyticsEasyPayChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsEasyPayChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 간편결제 현황을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsEasyPayChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsEasyPayChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsEasyPayChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsEasyPayChartError"];
				};
			};
		};
	};
	getAnalyticsEasyPayProviderChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsEasyPayProviderChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 간편결제사별 결제 현황을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsEasyPayProviderChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsEasyPayProviderChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsEasyPayProviderChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsEasyPayProviderChartError"];
				};
			};
		};
	};
	getPgCompanyChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsPgCompanyChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 결제대행사 현황을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsPgCompanyChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPgCompanyChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPgCompanyChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPgCompanyChartError"];
				};
			};
		};
	};
	getPgCompanyTrendChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsPgCompanyTrendChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 결제대행사별 거래 추이를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsPgCompanyTrendChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPgCompanyTrendChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPgCompanyTrendChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPgCompanyTrendChartError"];
				};
			};
		};
	};
	getAnalyticsOverseasPaymentUsage: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 해외 결제 사용 여부을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsOverseasPaymentUsage"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsOverseasPaymentUsageError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsOverseasPaymentUsageError"];
				};
			};
		};
	};
	getAnalyticsCancellationRate: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsCancellationRateBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 환불율을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsCancellationRate"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsCancellationRateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsCancellationRateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetAnalyticsCancellationRateError"];
				};
			};
		};
	};
	getPaymentStatusChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsPaymentStatusChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 결제상태 이력 집계 결과를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsPaymentStatusChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusChartError"];
				};
			};
		};
	};
	getPaymentStatusByPaymentMethodChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsPaymentStatusByPaymentMethodChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 결제수단별 결제전환율 조회 결과를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsPaymentStatusByPaymentMethodChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusByPaymentMethodChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusByPaymentMethodChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusByPaymentMethodChartError"];
				};
			};
		};
	};
	getPaymentStatusByPgCompanyChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsPaymentStatusByPgCompanyChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 PG사별 결제전환율 조회 결과를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsPaymentStatusByPgCompanyChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusByPgCompanyChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusByPgCompanyChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusByPgCompanyChartError"];
				};
			};
		};
	};
	getPaymentStatusByPaymentClientChart: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GetAnalyticsPaymentStatusByPaymentClientChartBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 결제환경별 결제전환율 조회 결과를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AnalyticsPaymentStatusByPaymentClientChart"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusByPaymentClientChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusByPaymentClientChartError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetPaymentStatusByPaymentClientChartError"];
				};
			};
		};
	};
	getB2bMemberCompany: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 사업자 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bMemberCompany"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bMemberCompanyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bMemberCompanyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bMemberCompanyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bMemberCompanyNotFoundError</code>: 연동 사업자가 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bMemberCompanyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bMemberCompanyError"];
				};
			};
		};
	};
	updateB2bMemberCompany: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateB2bMemberCompanyBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateB2bMemberCompanyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateB2bMemberCompanyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateB2bMemberCompanyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateB2bMemberCompanyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bMemberCompanyNotFoundError</code>: 연동 사업자가 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateB2bMemberCompanyError"];
				};
			};
		};
	};
	registerB2bMemberCompany: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RegisterB2bMemberCompanyBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterB2bMemberCompanyResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterB2bMemberCompanyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterB2bMemberCompanyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterB2bMemberCompanyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bIdAlreadyExistsError</code>: ID가 이미 사용중인 경우</li>
			 *     <li><code>B2bCompanyAlreadyRegisteredError</code>: 사업자가 이미 연동되어 있는 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterB2bMemberCompanyError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterB2bMemberCompanyError"];
				};
			};
		};
	};
	getB2bMemberCompanyContact: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
				/** @description <p>담당자 ID</p>
				 *      */
				contactId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 담당자 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bCompanyContact"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bMemberCompanyContactError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bMemberCompanyContactError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bMemberCompanyContactError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bMemberCompanyNotFoundError</code>: 연동 사업자가 존재하지 않는 경우</li>
			 *     <li><code>B2bContactNotFoundError</code>: 담당자가 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bMemberCompanyContactError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bMemberCompanyContactError"];
				};
			};
		};
	};
	updateB2bMemberCompanyContact: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
				/** @description <p>담당자 ID</p>
				 *      */
				contactId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateB2bMemberCompanyContactBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateB2bMemberCompanyContactResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateB2bMemberCompanyContactError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateB2bMemberCompanyContactError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateB2bMemberCompanyContactError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bContactNotFoundError</code>: 담당자가 존재하지 않는 경우</li>
			 *     <li><code>B2bMemberCompanyNotFoundError</code>: 연동 사업자가 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateB2bMemberCompanyContactError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateB2bMemberCompanyContactError"];
				};
			};
		};
	};
	getB2bCertificateRegistrationUrl: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 URL을 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCertificateRegistrationUrlResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCertificateRegistrationUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCertificateRegistrationUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCertificateRegistrationUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bMemberCompanyNotFoundError</code>: 연동 사업자가 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCertificateRegistrationUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCertificateRegistrationUrlError"];
				};
			};
		};
	};
	getB2bCertificate: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 인증서 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bCertificate"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCertificateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCertificateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCertificateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bMemberCompanyNotFoundError</code>: 연동 사업자가 존재하지 않는 경우</li>
			 *     <li><code>B2bCertificateUnregisteredError</code>: 인증서가 등록되어 있지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCertificateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCertificateError"];
				};
			};
		};
	};
	getB2bContactIdExistence: {
		parameters: {
			query: {
				/** @description <p>담당자 ID</p>
				 *      */
				contactId: string;
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답입니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bContactIdExistenceResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["getB2bContactIdExistenceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["getB2bContactIdExistenceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["getB2bContactIdExistenceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["getB2bContactIdExistenceError"];
				};
			};
		};
	};
	getB2bBankAccountHolder: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>은행</p>
				 *      */
				bank: components["schemas"]["Bank"];
				/** @description <p>'-'를 제외한 계좌 번호</p>
				 *      */
				accountNumber: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bBankAccountHolderResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bAccountHolderError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bAccountHolderError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bAccountHolderError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bBankAccountNotFoundError</code>: 계좌가 존재하지 않는 경우</li>
			 *     <li><code>B2bForeignExchangeAccountError</code>: 계좌 정보 조회가 불가능한 외화 계좌인 경우</li>
			 *     <li><code>B2bSuspendedAccountError</code>: 정지 계좌인 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bAccountHolderError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bAccountHolderError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bRegularMaintenanceTimeError</code>: 금융기관 시스템이 정기 점검 중인 경우</li>
			 *     <li><code>B2bFinancialSystemFailureError</code>: 금융기관 장애</li>
			 *     <li><code>B2bFinancialSystemUnderMaintenanceError</code>: 금융기관 시스템이 점검 중인 경우</li>
			 *     <li><code>B2bFinancialSystemCommunicationError</code>: 금융기관과의 통신에 실패한 경우</li>
			 *     </ul>
			 *      */
			503: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bAccountHolderError"];
				};
			};
		};
	};
	getB2bCompanyState: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 사업자 상태 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bCompanyState"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCompanyStateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCompanyStateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCompanyStateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bCompanyNotFoundError</code>: 사업자가 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCompanyStateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCompanyStateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bHometaxUnderMaintenanceError</code>: 홈택스가 점검중이거나 순단이 발생한 경우</li>
			 *     </ul>
			 *      */
			503: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bCompanyStateError"];
				};
			};
		};
	};
	requestB2bTaxInvoiceReverseIssuance: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RequestB2bTaxInvoiceReverseIssuanceRequestBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 세금계산서를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bTaxInvoice"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RequestB2bTaxInvoiceReverseIssuanceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RequestB2bTaxInvoiceReverseIssuanceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RequestB2bTaxInvoiceReverseIssuanceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bSupplierNotFoundError</code>: 공급자가 존재하지 않은 경우</li>
			 *     <li><code>B2bRecipientNotFoundError</code>: 공급받는자가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RequestB2bTaxInvoiceReverseIssuanceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RequestB2bTaxInvoiceReverseIssuanceError"];
				};
			};
		};
	};
	getB2bTaxInvoice: {
		parameters: {
			query: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
				/** @description <p>문서 번호 유형</p>
				 *     <p>path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
				 *      */
				documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>세금계산서 문서 번호</p>
				 *      */
				documentKey: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 세금계산서를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bTaxInvoice"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoiceError"];
				};
			};
		};
	};
	deleteB2bTaxInvoice: {
		parameters: {
			query: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
				/** @description <p>문서 번호 유형</p>
				 *     <p>path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
				 *      */
				documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>세금계산서 문서 번호</p>
				 *      */
				documentKey: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>B2bTaxInvoiceNonDeletableStatusError</code>: 세금계산서가 삭제 가능한 상태가 아닌 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteB2bTaxInvoiceError"];
				};
			};
		};
	};
	issueB2bTaxInvoice: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["IssueB2bTaxInvoiceRequestBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 세금계산서를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bTaxInvoice"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>B2bTaxInvoiceNotRequestedStatusError</code>: 세금계산서가 역발행 대기 상태가 아닌 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["IssueB2bTaxInvoiceError"];
				};
			};
		};
	};
	cancelB2bTaxInvoiceRequest: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CancelB2bTaxInvoiceRequestBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 세금계산서를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bTaxInvoice"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>B2bTaxInvoiceNotRequestedStatusError</code>: 세금계산서가 역발행 대기 상태가 아닌 경우</li>
			 *     <li><code>B2bTaxInvoiceNoRecipientDocumentKeyError</code>: 세금계산서에 공급받는자 문서 번호가 기입되지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelB2bTaxInvoiceRequestError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelB2bTaxInvoiceRequestError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelB2bTaxInvoiceRequestError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelB2bTaxInvoiceRequestError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelB2bTaxInvoiceRequestError"];
				};
			};
		};
	};
	cancelB2bTaxInvoiceIssuance: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CancelB2bTaxInvoiceIssuanceBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 세금계산서를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bTaxInvoice"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>B2bTaxInvoiceNotIssuedStatusError</code>: 세금계산서가 발행된(ISSUED) 상태가 아닌 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelB2bTaxInvoiceIssuanceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelB2bTaxInvoiceIssuanceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelB2bTaxInvoiceIssuanceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CancelB2bTaxInvoiceIssuanceError"];
				};
			};
		};
	};
	refuseB2bTaxInvoiceRequest: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RefuseB2bTaxInvoiceRequestBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 세금계산서를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bTaxInvoice"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>B2bTaxInvoiceNotRequestedStatusError</code>: 세금계산서가 역발행 대기 상태가 아닌 경우</li>
			 *     <li><code>B2bTaxInvoiceNoSupplierDocumentKeyError</code>: 세금계산서에 공급자 문서 번호가 기입되지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RefuseB2bTaxInvoiceRequestError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RefuseB2bTaxInvoiceRequestError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RefuseB2bTaxInvoiceRequestError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RefuseB2bTaxInvoiceRequestError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RefuseB2bTaxInvoiceRequestError"];
				};
			};
		};
	};
	getB2bTaxInvoices: {
		parameters: {
			query: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
				/** @description <p>페이지 번호</p>
				 *     <p>0부터 시작하는 페이지 번호. 기본 값은 0.</p>
				 *      */
				pageNumber?: number;
				/** @description <p>페이지 크기</p>
				 *     <p>각 페이지 당 포함할 객체 수. 기본 값은 500이며 최대 1000까지 요청가능합니다.</p>
				 *      */
				pageSize?: number;
				/** @description <p>조회 시작일</p>
				 *      */
				from: string;
				/** @description <p>조회 종료일</p>
				 *      */
				until: string;
				/** @description <p>조회 기간 기준</p>
				 *      */
				dateType: components["schemas"]["B2bSearchDateType"];
				/** @description <p>문서 번호 유형</p>
				 *     <p>path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
				 *      */
				documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicesResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicesError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicesError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicesError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicesError"];
				};
			};
		};
	};
	getB2bTaxInvoicePopupUrl: {
		parameters: {
			query: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
				/** @description <p>문서 번호 유형</p>
				 *     <p>path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
				 *      */
				documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
				/** @description <p>메뉴 포함 여부</p>
				 *     <p>팝업 URL에 메뉴 레이아웃을 포함 여부를 결정합니다. 기본 값은 true입니다.</p>
				 *      */
				includeMenu?: boolean;
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>세금계산서 문서 번호</p>
				 *      */
				documentKey: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePopupUrlResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePopupUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePopupUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePopupUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePopupUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePopupUrlError"];
				};
			};
		};
	};
	getB2bTaxInvoicePrintUrl: {
		parameters: {
			query: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
				/** @description <p>문서 번호 유형</p>
				 *     <p>path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
				 *      */
				documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>세금계산서 문서 번호</p>
				 *      */
				documentKey: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePrintUrlResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePrintUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePrintUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePrintUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePrintUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePrintUrlError"];
				};
			};
		};
	};
	getB2bTaxInvoicePdfDownloadUrl: {
		parameters: {
			query: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
				/** @description <p>문서 번호 유형</p>
				 *     <p>path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
				 *      */
				documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>세금계산서 문서 번호</p>
				 *      */
				documentKey: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePdfDownloadUrlResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePdfDownloadUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePdfDownloadUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePdfDownloadUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePdfDownloadUrlError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoicePdfDownloadUrlError"];
				};
			};
		};
	};
	requestB2bTaxInvoiceRegister: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RequestB2bTaxInvoiceRegisterBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 세금계산서를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bTaxInvoice"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RequestB2bTaxInvoiceRegisterError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RequestB2bTaxInvoiceRegisterError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RequestB2bTaxInvoiceRegisterError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bSupplierNotFoundError</code>: 공급자가 존재하지 않은 경우</li>
			 *     <li><code>B2bRecipientNotFoundError</code>: 공급받는자가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RequestB2bTaxInvoiceRegisterError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RequestB2bTaxInvoiceRegisterError"];
				};
			};
		};
	};
	requestB2bTaxInvoice: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RequestB2bTaxInvoiceRequestBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답으로 세금계산서를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["B2bTaxInvoice"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>B2bTaxInvoiceNotRegisteredStatusError</code>: 세금계산서가 임시저장 상태가 아닌 경우</li>
			 *     <li><code>B2bTaxInvoiceNoRecipientDocumentKeyError</code>: 세금계산서에 공급받는자 문서 번호가 기입되지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["requestB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["requestB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["requestB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["requestB2bTaxInvoiceError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["requestB2bTaxInvoiceError"];
				};
			};
		};
	};
	createB2bTaxInvoiceFileUploadLink: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateB2bTaxInvoiceFileUploadLinkBody"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreateB2bTaxInvoiceFileUploadLinkResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreateB2bTaxInvoiceFileUploadLinkCreateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreateB2bTaxInvoiceFileUploadLinkCreateError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CreateB2bTaxInvoiceFileUploadLinkCreateError"];
				};
			};
		};
	};
	attachB2bTaxInvoiceFile: {
		parameters: {
			query?: {
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AttachB2bTaxInvoiceFileBody"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>B2bTaxInvoiceNotRegisteredStatusError</code>: 세금계산서가 임시저장 상태가 아닌 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AttachB2bTaxInvoiceFileError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AttachB2bTaxInvoiceFileError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AttachB2bTaxInvoiceFileError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     <li><code>B2bFileNotFoundError</code>: 업로드한 파일을 찾을 수 없는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AttachB2bTaxInvoiceFileError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AttachB2bTaxInvoiceFileError"];
				};
			};
		};
	};
	getB2bTaxInvoiceAttachments: {
		parameters: {
			query: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
				/** @description <p>문서 번호 유형</p>
				 *     <p>path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
				 *      */
				documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>세금계산서 문서 번호</p>
				 *      */
				documentKey: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoiceAttachmentsResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoiceAttachmentsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoiceAttachmentsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoiceAttachmentsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoiceAttachmentsError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetB2bTaxInvoiceAttachmentsError"];
				};
			};
		};
	};
	deleteB2bTaxInvoiceAttachment: {
		parameters: {
			query: {
				/** @description <p>사업자등록번호</p>
				 *      */
				brn: string;
				/** @description <p>문서 번호 유형</p>
				 *     <p>path 파라미터로 전달된 문서번호 유형. 기본 값은 RECIPIENT이며 SUPPLIER, RECIPIENT을 지원합니다.</p>
				 *      */
				documentKeyType?: components["schemas"]["B2bTaxInvoiceDocumentKeyType"];
				/** @description <p>테스트 모드 여부</p>
				 *     <p>true 이면 테스트 모드로 실행되며, false 이거나 주어지지 않은 경우 테스트 모드를 사용하지 않습니다.</p>
				 *      */
				test?: boolean;
			};
			header?: never;
			path: {
				/** @description <p>세금계산서 문서 번호</p>
				 *      */
				documentKey: string;
				/** @description <p>첨부파일 아이디</p>
				 *      */
				attachmentId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     <li><code>B2bTaxInvoiceNotRegisteredStatusError</code>: 세금계산서가 임시저장 상태가 아닌 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteB2bTaxInvoiceAttachmentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteB2bTaxInvoiceAttachmentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bNotEnabledError</code>: B2B 기능이 활성화되지 않은 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteB2bTaxInvoiceAttachmentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bTaxInvoiceNotFoundError</code>: 세금계산서가 존재하지 않은 경우</li>
			 *     <li><code>B2bTaxInvoiceAttachmentNotFoundError</code>: 세금계산서의 첨부파일을 찾을 수 없는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteB2bTaxInvoiceAttachmentError"];
				};
			};
			/** @description <ul>
			 *     <li><code>B2bExternalServiceError</code>: 외부 서비스에서 에러가 발생한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteB2bTaxInvoiceAttachmentError"];
				};
			};
		};
	};
	GetKakaopayPaymentOrder: {
		parameters: {
			query: {
				/** @description <p>카카오페이 주문 번호 (tid)</p>
				 *      */
				pgTxId: string;
				/** @description <p>채널 키</p>
				 *      */
				channelKey: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description <p>성공 응답으로 카카오페이 주문 조회 응답 객체를 반환합니다.</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetKakaopayPaymentOrderResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetKakaopayPaymentOrderError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetKakaopayPaymentOrderError"];
				};
			};
		};
	};
	registerStoreReceipt: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description <p>등록할 하위 상점 결제 건 아이디</p>
				 *      */
				paymentId: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RegisterStoreReceiptBody"];
			};
		};
		responses: {
			/** @description <p>성공 응답</p>
			 *      */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterStoreReceiptResponse"];
				};
			};
			/** @description <ul>
			 *     <li><code>InvalidRequestError</code>: 요청된 입력 정보가 유효하지 않은 경우</li>
			 *     </ul>
			 *      */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterStoreReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>UnauthorizedError</code>: 인증 정보가 올바르지 않은 경우</li>
			 *     </ul>
			 *      */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterStoreReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>ForbiddenError</code>: 요청이 거절된 경우</li>
			 *     </ul>
			 *      */
			403: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterStoreReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotFoundError</code>: 결제 건이 존재하지 않는 경우</li>
			 *     </ul>
			 *      */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterStoreReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PaymentNotPaidError</code>: 결제가 완료되지 않은 경우</li>
			 *     </ul>
			 *      */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterStoreReceiptError"];
				};
			};
			/** @description <ul>
			 *     <li><code>PgProviderError</code>: PG사에서 오류를 전달한 경우</li>
			 *     </ul>
			 *      */
			502: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RegisterStoreReceiptError"];
				};
			};
		};
	};
}
